<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Croissant2097</title>
  
  <subtitle>Record &amp; Share &amp; Learn</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-30T04:20:22.864Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP UDP</title>
    <link href="http://yoursite.com/2020/10/30/TCP-UDP/"/>
    <id>http://yoursite.com/2020/10/30/TCP-UDP/</id>
    <published>2020-10-30T03:13:15.000Z</published>
    <updated>2020-10-30T04:20:22.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UDP-和-TCP-的特点与区别"><a href="#UDP-和-TCP-的特点与区别" class="headerlink" title="UDP 和 TCP 的特点与区别"></a>UDP 和 TCP 的特点与区别</h1><h2 id="用户数据报协议-UDP（User-Datagram-Protocol）"><a href="#用户数据报协议-UDP（User-Datagram-Protocol）" class="headerlink" title="用户数据报协议 UDP（User Datagram Protocol）"></a>用户数据报协议 UDP（User Datagram Protocol）</h2><p>是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</p><h2 id="传输控制协议-TCP（Transmission-Control-Protocol）"><a href="#传输控制协议-TCP（Transmission-Control-Protocol）" class="headerlink" title="传输控制协议 TCP（Transmission Control Protocol）"></a>传输控制协议 TCP（Transmission Control Protocol）</h2><p>是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。</p><h2 id="UDP-、TCP-首部格式"><a href="#UDP-、TCP-首部格式" class="headerlink" title="UDP 、TCP 首部格式"></a>UDP 、TCP 首部格式</h2><p><img src="/2020/10/30/TCP-UDP/1.png" alt></p><p>UDP 首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。</p><p><img src="/2020/10/30/TCP-UDP/2.png" alt></p><p>TCP 首部格式比 UDP 复杂。</p><p><strong>序号：</strong>用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</p><p><strong>确认号：</strong>期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</p><p><strong>数据偏移：</strong>指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</p><p><strong>控制位：</strong>八位从左到右分别是 CWR，ECE，URG，ACK，PSH，RST，SYN，FIN。</p><p><strong>CWR：</strong>CWR 标志与后面的 ECE 标志都用于 IP 首部的 ECN 字段，ECE 标志为 1 时，则通知对方已将拥塞窗口缩小；</p><p><strong>ECE：</strong>若其值为 1 则会通知对方，从对方到这边的网络有阻塞。在收到数据包的 IP 首部中 ECN 为 1 时将 TCP 首部中的 ECE 设为 1；</p><p><strong>URG：</strong>该位设为 1，表示包中有需要紧急处理的数据，对于需要紧急处理的数据，与后面的紧急指针有关；</p><p><strong>ACK：</strong>该位设为 1，确认应答的字段有效，TCP规定除了最初建立连接时的 SYN 包之外该位必须设为 1；</p><p><strong>PSH：</strong>该位设为 1，表示需要将收到的数据立刻传给上层应用协议，若设为 0，则先将数据进行缓存；</p><p><strong>RST：</strong>该位设为 1，表示 TCP 连接出现异常必须强制断开连接；</p><p><strong>SYN：</strong>用于建立连接，该位设为 1，表示希望建立连接，并在其序列号的字段进行序列号初值设定；</p><p><strong>FIN：</strong>该位设为 1，表示今后不再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 FIN 位置为 1 的 TCP 段。</p><p>每个主机又对对方的 FIN 包进行确认应答之后可以断开连接。不过，主机收到 FIN 设置为 1 的 TCP 段之后不必马上回复一个 FIN 包，而是可以等到缓冲区中的所有数据都因为已成功发送而被自动删除之后再发 FIN 包；</p><p><strong>窗口：</strong>窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</p><h2 id="什么是-TCP-的三次握手和四次挥手？"><a href="#什么是-TCP-的三次握手和四次挥手？" class="headerlink" title="什么是 TCP 的三次握手和四次挥手？"></a>什么是 TCP 的三次握手和四次挥手？</h2><p>TCP 是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如 IP 地址、端口号等。</p><p>TCP 可以看成是一种字节流，它会处理 IP 层或以下的层的丢包、重复以及错误问题。在连接的建立过程中，双方需要交换一些连接的参数。这些参数可以放在 TCP 头部。</p><p>TCP 提供了一种可靠、面向连接、字节流、传输层的服务，采用三次握手建立一个连接；采用四次挥手来关闭一个连接。</p><p>一个 TCP 连接由一个 4 元组构成，分别是两个 IP 地址和两个端口号。一个TCP连接通常分为三个阶段：启动、数据传输、退出（关闭）。</p><p>当 TCP 接收到另一端的数据时，它会发送一个确认，但这个确认不会立即发送，一般会延迟一会（提供网络利用率这部分有讲到）。</p><p>ACK 是累积的，一个确认字节号 N 的 ACK 表示所有直到 N 的字节（不包括 N）已经成功被接收了。这样的好处是如果一个 ACK 丢失，很可能后续的 ACK 就足以确认前面的报文段了。</p><p><strong>一个完整的 TCP 连接是双向和对称的，数据可以在两个方向上平等地流动。给上层应用程序提供一种双工服务。一旦建立了一个连接，这个连接的一个方向上的每个 TCP 报文段都包含了相反方向上的报文段的一个 ACK。</strong></p><p>序列号的作用是使得一个 TCP 接收端可丢弃重复的报文段，记录以杂乱次序到达的报文段。因为 TCP 使用 IP 来传输报文段，而IP 不提供重复消除或者保证次序正确的功能。</p><p>另一方面，TCP 是一个字节流协议，绝不会以杂乱的次序给上层程序发送数据。因此 TCP 接收端会被迫先保持大序列号的数据不交给应用程序，直到缺失的小序列号的报文段被填满。</p><h2 id="TCP-的三次握手（为什么三次？）"><a href="#TCP-的三次握手（为什么三次？）" class="headerlink" title="TCP 的三次握手（为什么三次？）"></a>TCP 的三次握手（为什么三次？）</h2><p>三次握手：</p><p><img src="/2020/10/30/TCP-UDP/3.png" alt></p><p>假设 A 为客户端，B 为服务器端。</p><p>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</p><ul><li>A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。</li><li>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</li><li>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</li></ul><p>B 收到 A 的确认后，连接建立。</p><h3 id="为什么三次？"><a href="#为什么三次？" class="headerlink" title="为什么三次？"></a>为什么三次？</h3><p>1、第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>2、换个易于理解的视角来看为什么要 3 次握手。</p><p>客户端和服务端通信前要进行连接，“3次握手”的作用就是双方都能明确自己和对方的收、发能力是正常的。</p><p>第一次握手：客户端发送网络包，服务端收到了。这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</p><p>第二次握手：服务端发包，客户端收到了。这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。从客户端的视角来看，我接到了服务端发送过来的响应数据包，说明服务端接收到了我在第一次握手时发送的网络包，并且成功发送了响应数据包，这就说明，服务端的接收、发送能力正常。而另一方面，我收到了服务端的响应数据包，说明我第一次发送的网络包成功到达服务端，这样，我自己的发送和接收能力也是正常的。</p><p>第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力，服务端的发送、接收能力是正常的。第一、二次握手后，服务端并不知道客户端的接收能力以及自己的发送能力是否正常。</p><p>而在第三次握手时，服务端收到了客户端对第二次握手作的回应。从服务端的角度，我在第二次握手时的响应数据发送出去了，客户端接收到了。所以，我的发送能力是正常的。而客户端的接收能力也是正常的。</p><p>经历了上面的三次握手过程，客户端和服务端都确认了自己的接收、发送能力是正常的。之后就可以正常通信了。</p><p><strong>每次都是接收到数据包的一方可以得到一些结论，发送的一方其实没有任何头绪。我虽然有发包的动作，但是我怎么知道我有没有发出去，而对方有没有接收到呢？</strong></p><p>而从上面的过程可以看到，最少是需要三次握手过程的。两次达不到让双方都得出自己、对方的接收、发送能力都正常的结论。</p><p>其实每次收到网络包的一方至少是可以得到：对方的发送、我方的接收是正常的。而每一步都是有关联的，下一次的“响应”是由于第一次的“请求”触发，因此每次握手其实是可以得到额外的结论的。</p><p>比如第三次握手时，服务端收到数据包，表明看服务端只能得到客户端的发送能力、服务端的接收能力是正常的，但是结合第二次，说明服务端在第二次发送的响应包，客户端接收到了，并且作出了响应，从而得到额外的结论：客户端的接收、服务端的发送是正常的。</p><h3 id="TCP-的四次挥手（为什么四次？）"><a href="#TCP-的四次挥手（为什么四次？）" class="headerlink" title="TCP 的四次挥手（为什么四次？）"></a>TCP 的四次挥手（为什么四次？）</h3><p>四次挥手：</p><p><img src="/2020/10/30/TCP-UDP/4.png" alt></p><ul><li>客户端发送一个 FIN 段，并包含一个希望接收者看到的自己当前的序列号 K. 同时还包含一个 ACK 表示确认对方最近一次发过来的数据。</li><li>服务端将 K 值加 1 作为 ACK 序号值，表明收到了上一个包。这时上层的应用程序会被告知另一端发起了关闭操作，通常这将引起应用程序发起自己的关闭操作。</li><li>服务端发起自己的 FIN 段，ACK=K+1, Seq=L。</li><li>客户端确认。进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。ACK=L+1。</li></ul><h3 id="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"><a href="#为什么建立连接是三次握手，而关闭连接却是四次挥手呢？" class="headerlink" title="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"></a>为什么建立连接是三次握手，而关闭连接却是四次挥手呢？</h3><p>1、TCP连接是双向传输的对等的模式，就是说双方都可以同时向对方发送或接收数据。当有一方要关闭连接时，会发送指令告知对方，我要关闭连接了。</p><p><strong>2、这时对方会回一个ACK，此时一个方向的连接关闭。但是另一个方向仍然可以继续传输数据，也就是说，服务端收到客户端的 FIN 标志，知道客户端想要断开这次连接了，但是，我服务端，我还想发数据呢？我等到发送完了所有的数据后，会发送一个 FIN 段来关闭此方向上的连接。接收方发送 ACK确认关闭连接。</strong></p><p>注意，接收到FIN报文的一方只能回复一个ACK, 它是无法马上返回对方一个FIN报文段的，因为结束数据传输的“指令”是上层应用层给出的，我只是一个“搬运工”，我无法了解“上层的意志”。</p><p>3、客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><p>4、因为服务端在 LISTEN 状态下，收到建立连接请求的 SYN 报文后，把 ACK 和 SYN 放在一个报文里发送给客户端。而关闭连接时，当收到对方的 FIN 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方 ACK 和 FIN 一般都会分开发。</p><p><strong>TIME_WAIT</strong></p><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li></ul><h2 id="TCP-短连接和长连接的区别"><a href="#TCP-短连接和长连接的区别" class="headerlink" title="TCP 短连接和长连接的区别"></a>TCP 短连接和长连接的区别</h2><p><strong>短连接：</strong>Client 向 Server 发送消息，Server 回应 Client，然后一次读写就完成了，这时候双方任何一个都可以发起 close 操作，不过一般都是 Client 先发起 close 操作。短连接一般只会在 Client/Server 间传递一次读写操作。</p><p>短连接的优点：管理起来比较简单，建立存在的连接都是有用的连接，不需要额外的控制手段。</p><p><strong>长连接：</strong>Client 与 Server 完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。</p><p>在长连接的应用场景下，Client 端一般不会主动关闭它们之间的连接，Client 与 Server 之间的连接如果一直不关闭的话，随着客户端连接越来越多，Server 压力也越来越大，这时候 Server 端需要采取一些策略，如关闭一些长时间没有读写事件发生的连接，这样可以避免一些恶意连接导致 Server 端服务受损；如果条件再允许可以以客户端为颗粒度，限制每个客户端的最大长连接数，从而避免某个客户端连累后端的服务。</p><p>长连接和短连接的产生在于 Client 和 Server 采取的关闭策略，具体的应用场景采用具体的策略。</p><h2 id="TCP粘包、拆包及解决办法"><a href="#TCP粘包、拆包及解决办法" class="headerlink" title="TCP粘包、拆包及解决办法"></a>TCP粘包、拆包及解决办法</h2><h3 id="为什么常说-TCP-有粘包和拆包的问题而不说-UDP-？"><a href="#为什么常说-TCP-有粘包和拆包的问题而不说-UDP-？" class="headerlink" title="为什么常说 TCP 有粘包和拆包的问题而不说 UDP ？"></a>为什么常说 TCP 有粘包和拆包的问题而不说 UDP ？</h3><p>由前两节可知，UDP 是基于报文发送的，UDP首部采用了 16bit 来指示 UDP 数据报文的长度，因此在应用层能很好的将不同的数据报文区分开，从而避免粘包和拆包的问题。</p><p>而 TCP 是基于字节流的，虽然应用层和 TCP 传输层之间的数据交互是大小不等的数据块，但是 TCP 并没有把这些数据块区分边界，仅仅是一连串没有结构的字节流；另外从 TCP 的帧结构也可以看出，在 TCP 的首部没有表示数据长度的字段，基于上面两点，在使用 TCP 传输数据时，才有粘包或者拆包现象发生的可能。</p><h3 id="什么是粘包、拆包？"><a href="#什么是粘包、拆包？" class="headerlink" title="什么是粘包、拆包？"></a>什么是粘包、拆包？</h3><p>假设 Client 向 Server 连续发送了两个数据包，用 packet1 和 packet2 来表示，那么服务端收到的数据可以分为三种情况，现列举如下：</p><p>第一种情况，接收端正常收到两个数据包，即没有发生拆包和粘包的现象。</p><p><img src="/2020/10/30/TCP-UDP/5.png" alt></p><p>第二种情况，接收端只收到一个数据包，但是这一个数据包中包含了发送端发送的两个数据包的信息，这种现象即为粘包。这种情况由于接收端不知道这两个数据包的界限，所以对于接收端来说很难处理。</p><p><img src="/2020/10/30/TCP-UDP/6.png" alt></p><p>第三种情况，这种情况有两种表现形式，如下图。接收端收到了两个数据包，但是这两个数据包要么是不完整的，要么就是多出来一块，这种情况即发生了拆包和粘包。这两种情况如果不加特殊处理，对于接收端同样是不好处理的。</p><p><img src="/2020/10/30/TCP-UDP/7.png" alt></p><p><img src="/2020/10/30/TCP-UDP/8.png" alt></p><h3 id="为什么会发生-TCP-粘包、拆包？"><a href="#为什么会发生-TCP-粘包、拆包？" class="headerlink" title="为什么会发生 TCP 粘包、拆包？"></a>为什么会发生 TCP 粘包、拆包？</h3><ul><li>要发送的数据大于 TCP 发送缓冲区剩余空间大小，将会发生拆包。</li><li>待发送数据大于 MSS（最大报文长度），TCP 在传输前将进行拆包。</li><li>要发送的数据小于 TCP 发送缓冲区的大小，TCP 将多次写入缓冲区的数据一次发送出去，将会发生粘包。</li><li>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</li></ul><h3 id="粘包、拆包解决办法"><a href="#粘包、拆包解决办法" class="headerlink" title="粘包、拆包解决办法"></a>粘包、拆包解决办法</h3><p>由于 TCP 本身是面向字节流的，无法理解上层的业务数据，所以在底层是无法保证数据包不被拆分和重组的，这个问题只能通过上层的应用协议栈设计来解决，根据业界的主流协议的解决方案，归纳如下：</p><ul><li><strong>消息定长：</strong>发送端将每个数据包封装为固定长度（不够的可以通过补 0 填充），这样接收端每次接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</li><li><strong>设置消息边界：</strong>服务端从网络流中按消息边界分离出消息内容。在包尾增加回车换行符进行分割，例如 FTP 协议。</li><li><strong>将消息分为消息头和消息体：</strong>消息头中包含表示消息总长度（或者消息体长度）的字段。</li><li>更复杂的应用层协议比如 Netty 中实现的一些协议都对粘包、拆包做了很好的处理。</li></ul><h2 id="TCP-可靠传输"><a href="#TCP-可靠传输" class="headerlink" title="TCP 可靠传输"></a>TCP 可靠传输</h2><p>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p><p>一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：</p><script type="math/tex; mode=display">RRTs = (1-a)*(RTTs) + a * RTT</script><p>其中，$0 ≤ a ＜ 1$，$RTTs$ 随着 $a$ 的增加更容易受到 $RTT$ 的影响。超时时间 $RTO$ 应该略大于 $RTTs$，TCP 使用的超时时间计算如下：</p><script type="math/tex; mode=display">RTO = RTTs + 4 * RTTd</script><p>其中 $RTTd$ 为偏差的加权平均值。</p><h2 id="TCP-滑动窗口"><a href="#TCP-滑动窗口" class="headerlink" title="TCP 滑动窗口"></a>TCP 滑动窗口</h2><p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p><p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p><p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p><p><img src="/2020/10/30/TCP-UDP/9.png" alt></p><h2 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h2><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p><p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><p><strong>实际上，为了避免此问题的产生，发送端主机会时不时的发送一个叫做窗口探测的数据段</strong>，此数据段仅包含一个字节来获取最新的窗口大小信息。</p><h2 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h2><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p><p><img src="/2020/10/30/TCP-UDP/10.png" alt></p><p>TCP 主要通过四个算法来进行拥塞控制：</p><p><strong>慢开始、拥塞避免、快重传、快恢复。</strong></p><p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p><p>为了便于讨论，做如下假设：</p><ul><li>接收方有足够大的接收缓存，因此不会发生流量控制；</li><li>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。</li></ul><p><img src="/2020/10/30/TCP-UDP/11.png" alt></p><p><strong>慢开始与拥塞避免</strong></p><p>发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p><p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p><p>如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p><p><strong>快重传与快恢复</strong></p><p>在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。</p><p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。</p><p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。</p><p>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p><p><img src="/2020/10/30/TCP-UDP/12.png" alt></p><h2 id="提供网络利用率"><a href="#提供网络利用率" class="headerlink" title="提供网络利用率"></a>提供网络利用率</h2><h3 id="Nagle-算法"><a href="#Nagle-算法" class="headerlink" title="Nagle 算法"></a>Nagle 算法</h3><p>发送端即使还有应该发送的数据，但如果这部分数据很少的话，则进行延迟发送的一种处理机制。具体来说，就是仅在下列任意一种条件下才能发送数据。如果两个条件都不满足，那么暂时等待一段时间以后再进行数据发送。</p><ul><li>已发送的数据都已经收到确认应答。</li><li>可以发送最大段长度的数据时。</li></ul><h3 id="延迟确认应答"><a href="#延迟确认应答" class="headerlink" title="延迟确认应答"></a>延迟确认应答</h3><p>接收方收到数据之后可以并不立即返回确认应答，而是延迟一段时间的机制。</p><ul><li>在没有收到 2*最大段长度的数据为止不做确认应答。</li><li>其他情况下，最大延迟 0.5秒 发送确认应答。</li><li>TCP 文件传输中，大多数是每两个数据段返回一次确认应答。</li></ul><h3 id="捎带应答"><a href="#捎带应答" class="headerlink" title="捎带应答"></a>捎带应答</h3><p>在一个 TCP 包中既发送数据又发送确认应答的一种机制，由此，网络利用率会提高，计算机的负荷也会减轻，但是这种应答必须等到应用处理完数据并将作为回执的数据返回为止。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UDP-和-TCP-的特点与区别&quot;&gt;&lt;a href=&quot;#UDP-和-TCP-的特点与区别&quot; class=&quot;headerlink&quot; title=&quot;UDP 和 TCP 的特点与区别&quot;&gt;&lt;/a&gt;UDP 和 TCP 的特点与区别&lt;/h1&gt;&lt;h2 id=&quot;用户数据报协议-U
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://yoursite.com/2020/10/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2020/10/30/计算机网络/</id>
    <published>2020-10-30T02:07:52.000Z</published>
    <updated>2020-10-30T03:12:41.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="TCP-IP四层模型"><a href="#TCP-IP四层模型" class="headerlink" title="TCP/IP四层模型"></a>TCP/IP四层模型</h2><h3 id="数据链路层（以太网协议、MAC地址）"><a href="#数据链路层（以太网协议、MAC地址）" class="headerlink" title="数据链路层（以太网协议、MAC地址）"></a>数据链路层（以太网协议、MAC地址）</h3><p><strong>以太网协议</strong> —— 以太网。一组电信号是一个数据包，叫一个帧（frame），每个帧分成两个部分，标头（head）和数（data），标头包含一些说明性的东西，比如说发送者、接收者和数据类型之类的。</p><p>以太网协议规定了，接入网络里的所有设备，都得有个网卡，以太网协议里的那个数据包，在数据链路层传输的数据包，<strong>必须从一个电脑的网卡传输到另外一个电脑的网卡，而这个网卡地址就叫做所谓的mac地址。每块网卡出厂的时候，就有一个唯一的mac地址</strong>，48位的二进制，但是一般用12个16进制数字表示，前6个16进制是厂商编号，后6个16进制是网卡流水号。</p><p>所以在以太网里传输数据包的时候，必须指定接收者的mac地址才能传输数据。</p><p>但是以太网的数据包怎么从一个mac地址发送到另一个mac地址？这个不是精准推送的，以太网里面，<strong>如果一个电脑发个数据包出去，会广播给局域网内的所有电脑设备的网卡</strong> ，然后每台电脑都从数据包里获取接收者的mac地址，跟自己的mac地址对比一下，如果一样，就说明这是发给自己的数据包。</p><p>但是上面这种广播的方式，仅仅针对<strong>一个子网（局域网）</strong>内的电脑，会广播，否则一个电脑不能广播数据包给全世界所有的其他电脑吧，是仅仅广播给一个子网里面的电脑的。</p><h3 id="网络层（IP）"><a href="#网络层（IP）" class="headerlink" title="网络层（IP）"></a>网络层（IP）</h3><p>网络层里有IP协议，IP协议定义的地址就叫做IP地址。IP地址有IPv4和IPv6两个版本，目前广泛使用的是IPv4，是32个二进制数字组成的，但是一般用4个十进制数字表示，范围从0.0.0.0到255.255.255.255之间。</p><p><strong>一套IP地址，IP地址就可以让我们区分哪些电脑是一个子网的。</strong></p><p>ARP：用来在一个局域网内让各个设备都知道每个设备的 <strong>ip 地址和mac地址的对应关系</strong></p><p><strong>子网掩码</strong>：用来划分子网。</p><h3 id="传输层（TCP、端口号）"><a href="#传输层（TCP、端口号）" class="headerlink" title="传输层（TCP、端口号）"></a>传输层（TCP、端口号）</h3><p><strong>网络层，是基于ip协议，进行主机和主机间的寻址和通信的，然后传输层，其实是建立某个主机的某个端口，到另外一个主机的某个端口的连接和通信的。</strong></p><p><strong>传输层的 tcp 协议，仅仅只是规定了一套基于端口的点对点的通信协议，包括如何建立连接，如何发送和读取消息，但是实际上如果你要基于 tcp 协议来开发，你一般是用socket，java socket网络编程。</strong></p><h3 id="应用层（HTTP、HTTPS、DNS、FTP等）"><a href="#应用层（HTTP、HTTPS、DNS、FTP等）" class="headerlink" title="应用层（HTTP、HTTPS、DNS、FTP等）"></a>应用层（HTTP、HTTPS、DNS、FTP等）</h3><p>通过传输层的 tcp 协议可以传输数据，但是人家收到数据之后，怎么来解释？</p><p>最常见的，应用层的协议就是http协议，进行网络通信。</p><p>网络设置，一般包含了ip地址、子网掩码、网关地址、DNS地址。ip地址和子网掩码用来划分子网的，判断哪些 ip 地址在一个子网内。同时你的 ip 地址和 mac 地址关联起来的，唯一定位了你的网卡。网关地址，你就认为是路由器上的那个网卡的 ip 地址吧，路由器的网卡也有 mac 地址，mac 地址对应了一个 ip 地址。</p><p>DNS地址是啥呢？Domain Name System，域名解析器。</p><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><ol><li><strong>确认ACK，仅当ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有报文的传输都必须把ACK置1；</strong></li><li><strong>同步SYN，在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；</strong></li><li><strong>终止FIN，用来释放连接。当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放；</strong></li></ol><p><img src="/2020/10/30/计算机网络/1.png" alt></p><p>首先，在三次握手建立连接的阶段，是不会传输 TCP 报文段的，传输的是 传输控制块（TCB），<code>传输控制块</code> TCB(Transmission Control Block)存储了每一个连接中的一些重要信息，如：TCP 连接表，指向发送和接收缓存的指针，指向重传队列的指针，当前的发送和接收序号等等。</p><h3 id="为何不直接在第一次握手就带上报文段消息，非要第三次才可以带？"><a href="#为何不直接在第一次握手就带上报文段消息，非要第三次才可以带？" class="headerlink" title="为何不直接在第一次握手就带上报文段消息，非要第三次才可以带？"></a>为何不直接在第一次握手就带上报文段消息，非要第三次才可以带？</h3><p>因为 TCP 是要保证数据的不丢失且可靠，如果在第一次就带上报文段消息，此次建立连接很有可能就会失败，那么就不能保证数据的不丢失了，在不可靠的机制上进行这种操作，换来的代价太大，每次发送报文段的资源也会增大，得不偿失；</p><p>而第三次握手的时候，客户端已经知道服务器端准备好了，所以只要告诉服务器端自己准备好了就okay了，所以此时带上报文段信息没有任何问题。</p><h3 id="可不可以只握手两次？"><a href="#可不可以只握手两次？" class="headerlink" title="可不可以只握手两次？"></a>可不可以只握手两次？</h3><p><strong>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</strong></p><p>肯定是不可以的，三次握手主要是解决这样一个常见的问题，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</p><p>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="/2020/10/30/计算机网络/2.png" alt></p><ol><li>客户端进程<strong>发出连接释放报文，并且停止发送数据</strong>。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，<strong>客户端进入FIN-WAIT-1（终止等待1）状态</strong>。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li>服务器<strong>收到连接释放报文，发出确认报文</strong>，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了<strong>CLOSE-WAIT（关闭等待）状态</strong>。<strong>TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，</strong>也就是整个CLOSE-WAIT状态持续的时间。</li><li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<strong>（在这之前还需要接受服务器发送的最后的数据）</strong>。</li><li>服务器将<strong>最后的数据发送完毕后，就向客户端发送连接释放报文</strong>，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了<strong>LAST-ACK（最后确认）</strong>状态，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<strong>注意此时TCP连接还没有释放，必须经过2*MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</strong></li><li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<strong>可以看到，服务器结束TCP连接的时间要比客户端早一些</strong>。</li></ol><h3 id="为何不能三次挥手呢？"><a href="#为何不能三次挥手呢？" class="headerlink" title="为何不能三次挥手呢？"></a>为何不能三次挥手呢？</h3><ul><li>首先如果去掉最后一次挥手，那么服务器端就不知道自己要关闭的报文有没有传输成功，可能半路上就失败了，但是此时客户端不知道，导致客户端一直在等待服务器关闭，但是此时服务器端直接就关闭了；</li><li>如果中间的两次挥手合并，那是肯定不行的，因为此时服务器端可能还有很多报文未处理完，此时直接关闭肯定会对传输有很大影响。</li><li><strong>复位连接</strong>（卡在路上的第一次握手，服务器返回第二次握手后，客户端得给服务器返回第三次握手，要求服务器释放资源）</li></ul><p><img src="/2020/10/30/计算机网络/3.png" alt></p><h3 id="为什么客户端在收到-服务器端发来的-FIN-包后要等-2-个最长报文段传输时间？"><a href="#为什么客户端在收到-服务器端发来的-FIN-包后要等-2-个最长报文段传输时间？" class="headerlink" title="为什么客户端在收到 服务器端发来的 FIN 包后要等 2 个最长报文段传输时间？"></a>为什么客户端在收到 服务器端发来的 FIN 包后要等 2 个最长报文段传输时间？</h3><p>防止最后自己发去的 ack 没传送到服务器，如果服务器没收到客户端的 ack，肯定会选择重发一次 FIN 包，那么此时如果客户端已经关闭了，客户端就不能再发 ack 确认收到了，至于为何是 2 个报文段传输时间，因为刚好一去一回嘛… 2 个最长报文传输时间没有 FIN 包发来，就说明服务器已经关闭了，客户端也就可以安心关闭了。</p><h3 id="如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h3><p>TCP还设有一个<strong>保活计时器</strong>，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会<strong>重新复位这个计时器</strong>，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><h2 id="http1-0-http1-1-http2-0具体有哪些区别"><a href="#http1-0-http1-1-http2-0具体有哪些区别" class="headerlink" title="http1.0,http1.1,http2.0具体有哪些区别"></a>http1.0,http1.1,http2.0具体有哪些区别</h2><p><strong>http 1.0要指定keep-alive来开启持久连接，默认是短连接，就是浏览器每次请求都要重新建立一次tcp连接，完事儿了就释放tcp连接</strong>。</p><p><strong>http 1.1默认支持长连接，http 1.1还支持host头，也就可以支持虚拟主机；而且对断点续传有支持。</strong></p><p><strong>http 2.0，支持多路复用，基于一个tcp连接并行发送多个请求以及接收响应，解决了http 1.1对同一时间同一个域名的请求有限制的问题</strong>。<strong>二进制分帧，将传输数据拆分为更小的帧（数据包），frame（数据包，帧），提高了性能，实现低延迟高吞吐。</strong></p><h2 id="HTTP-和HTTPS"><a href="#HTTP-和HTTPS" class="headerlink" title="HTTP 和HTTPS"></a>HTTP 和HTTPS</h2><p>http协议都是明文的，是没有加密的，所以其实现在一般大部分应用都是用https协议的。之前是基于SSL协议对http进行加密，后来又升级到了TSL协议来加密，现在称之为SSL / TSL吧。</p><p><strong>HTTP 的不足之处</strong></p><ul><li>通信内容使用明文——内容可能被窃听</li><li>不验证通信方的身份——可能遭遇伪装</li><li>无法验证报文的完整性——报文有可能已遭篡改</li></ul><p><strong>HTTPS = HTTP + 加密 + 认证 + 数字签名</strong> 解决上述的三个问题</p><h3 id="HTTPS的工作原理"><a href="#HTTPS的工作原理" class="headerlink" title="HTTPS的工作原理"></a>HTTPS的工作原理</h3><p>（1）浏览器把自己支持的加密规则发送给网站</p><p>（2）网站从这套加密规则里选出来一套加密算法和hash算法，然后把自己的身份信息用证书的方式发回给浏览器，证书里有网站地址、加密公钥、证书颁发机构（<strong>hash算法用来保证验证消息是否没有被篡改，专业术语叫做 数字签名</strong>）</p><p>（3）浏览器验证证书的合法性，然后浏览器地址栏上会出现一把小锁；浏览器接着生成一串随机数密码，然后用证书里的公钥进行加密，这块走的非对称加密；用约定好的hash算法生成握手消息的hash值，然后用密码对消息进行加密，然后把所有东西都发给网站，这块走的是对称加密。<strong>这里的总的消息分成三部分，用公钥加密的随机密码，消息的hash值，和用随机密码加密的消息</strong></p><p>（4）网站，从消息里面可以取出来公钥加密后的随机密码，用本地的私钥对消息解密取出来密码，然后用密码解密浏览器发来的握手消息，计算消息的hash值，并验证与浏览器发送过来的hash值是否一致，最后用密码加密一段握手消息，发给浏览器</p><p>（5）浏览器解密握手消息，然后计算消息的hash值，如果跟网站发来的hash一样，握手就结束，之后所有的数据都会由之前浏览器生成的随机密码，然后用对称加密来进行进行加密。</p><p><strong>常用的非对称加密是RSA算法，对称加密是AES、RC4等，hash算法就是MD5</strong></p><p>非对称加密，有个人说我加密的时候是用了一个公钥去加密，然后你解密的时候是用私钥去解密；我加密的时候用的算法，跟解密的时候用的算法，是一样的，对称加密。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h1&gt;&lt;h2 id=&quot;TCP-IP四层模型&quot;&gt;&lt;a href=&quot;#TCP-IP四层模型&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JUC常用同步工具类</title>
    <link href="http://yoursite.com/2020/10/03/JUC%E5%B8%B8%E7%94%A8%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://yoursite.com/2020/10/03/JUC常用同步工具类/</id>
    <published>2020-10-03T07:38:08.000Z</published>
    <updated>2020-10-03T07:52:21.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JUC常用同步工具类——CountDownLatch，CyclicBarrier，Semaphore"><a href="#JUC常用同步工具类——CountDownLatch，CyclicBarrier，Semaphore" class="headerlink" title="JUC常用同步工具类——CountDownLatch，CyclicBarrier，Semaphore"></a>JUC常用同步工具类——CountDownLatch，CyclicBarrier，Semaphore</h1><ol><li>CountDownLatch 是一个线程等待其他线程， CyclicBarrier 是多个线程互相等待。</li><li>CountDownLatch 的计数是减 1 直到 0，CyclicBarrier 是加 1，直到指定值。</li><li>CountDownLatch 是一次性的， CyclicBarrier  可以循环利用。</li><li>CyclicBarrier 可以在最后一个线程达到屏障之前，选择先执行一个操作。</li><li>Semaphore ，需要拿到许可才能执行，并可以选择公平和非公平模式。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JUC常用同步工具类——CountDownLatch，CyclicBarrier，Semaphore&quot;&gt;&lt;a href=&quot;#JUC常用同步工具类——CountDownLatch，CyclicBarrier，Semaphore&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JUC" scheme="http://yoursite.com/categories/Java/JUC/"/>
    
    
      <category term="JUC" scheme="http://yoursite.com/tags/JUC/"/>
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot + Security + JWT + Redis</title>
    <link href="http://yoursite.com/2020/08/09/SpringBoot-Security-JWT/"/>
    <id>http://yoursite.com/2020/08/09/SpringBoot-Security-JWT/</id>
    <published>2020-08-09T06:12:43.000Z</published>
    <updated>2020-08-09T08:20:10.902Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/freeMak/boot-security" target="_blank" rel="noopener">https://github.com/freeMak/boot-security</a></p><p>本篇是对开源项目集合 <strong><code>SpringSecurity、JWT、Redis</code></strong> 进行权限控制的学习记录（仅包含登录时的授权与进入首页认证）</p><h1 id="对登录授权实现的分析"><a href="#对登录授权实现的分析" class="headerlink" title="对登录授权实现的分析"></a>对登录授权实现的分析</h1><h2 id="SecurityConfig"><a href="#SecurityConfig" class="headerlink" title="SecurityConfig"></a>SecurityConfig</h2><p><strong>① <code>SecurityConfig</code>继承 <code>WebSecurityConfigurerAdapter</code>，重写<code>configure(HttpSecurity http)</code>方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>② 定义加密Bean <code>BCryptPasswordEncoder</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">bCryptPasswordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③ 关闭 <code>csrf</code> 保护</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.csrf().disable();</span><br></pre></td></tr></table></figure><p><strong>④ 关闭session</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br></pre></td></tr></table></figure><p><strong>⑤ 放行的普通文件和接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">    .antMatchers(<span class="string">"/"</span>, <span class="string">"/*.html"</span>, <span class="string">"/favicon.ico"</span>, <span class="string">"/css/**"</span>, <span class="string">"/js/**"</span>, <span class="string">"/fonts/**"</span>,</span><br><span class="line">                 <span class="string">"/layui/**"</span>, <span class="string">"/img/**"</span>, <span class="string">"/v2/api-docs/**"</span>, <span class="string">"/swagger-resources/**"</span>,</span><br><span class="line">                 <span class="string">"/webjars/**"</span>, <span class="string">"/pages/**"</span>, <span class="string">"/druid/**"</span>, <span class="string">"/statics/**"</span>)</span><br><span class="line">    .permitAll().anyRequest().authenticated();</span><br></pre></td></tr></table></figure><p><strong>⑥ 登录</strong> </p><ul><li><p><strong>登录接口，<code>SpringSecurity</code> 为我们提供登录处理，不用自己写Controller</strong></p></li><li><p><strong><code>successHandler</code> 认证成功后的处理逻辑，注入<code>authenticationSuccessHandler</code></strong></p></li><li><p><strong><code>failureHandler</code> 认证失败后的处理逻辑，注入<code>authenticationFailureHandler</code></strong></p></li><li><p><strong><code>authenticationEntryPoint</code> 认证异常后的处理逻辑，注入<code>authenticationEntryPoint</code></strong></p></li><li><p><strong><font color="red">authenticationSuccessHandler、authenticationFailureHandler、authenticationEntryPoint 处理器，自己编写</font></strong></p><p><strong><font color="red">后面仅对authenticationSuccessHandler展开分析。</font></strong></p><p><strong>处理逻辑在<code>com.boot.security.server.config.SecurityHandlerConfig</code>中</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">    .successHandler(authenticationSuccessHandler).failureHandler(authenticationFailureHandler).and()</span><br><span class="line">    .exceptionHandling().authenticationEntryPoint(authenticationEntryPoint);</span><br></pre></td></tr></table></figure><p><strong>⑦ 退出</strong></p><ul><li><strong>与登录类似</strong></li><li><strong><font color="red">logoutSuccessHandler 处理器，也是后面展开讲</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.logout().logoutUrl(<span class="string">"/logout"</span>).logoutSuccessHandler(logoutSuccessHandler);</span><br></pre></td></tr></table></figure><p><strong>⑧ 解决不允许显示在iframe的问题和开启缓存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决不允许显示在iframe的问题</span></span><br><span class="line">http.headers().frameOptions().disable();</span><br><span class="line">http.headers().cacheControl();</span><br></pre></td></tr></table></figure><p><strong>⑨ 过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤器 com.boot.security.server.filter.TokenFilter</span></span><br><span class="line">http.addFilterBefore(tokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure><h2 id="SecurityHandlerConfig认证成功AuthenticationSuccessHandler-后的分析"><a href="#SecurityHandlerConfig认证成功AuthenticationSuccessHandler-后的分析" class="headerlink" title="SecurityHandlerConfig认证成功AuthenticationSuccessHandler 后的分析"></a>SecurityHandlerConfig认证成功AuthenticationSuccessHandler 后的分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationSuccessHandler <span class="title">loginSuccessHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AuthenticationSuccessHandler() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ① 得到用户认证信息</span></span><br><span class="line">            <span class="comment">// LoginUser  ----&gt;  com.boot.security.server.dto.LoginUser</span></span><br><span class="line">            <span class="comment">// com.boot.security.server.utils.UserUtil</span></span><br><span class="line">            <span class="comment">// 主要实现在 com.boot.security.server.service.impl.UserDetailsServiceImpl</span></span><br><span class="line">            LoginUser loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">         </span><br><span class="line">            <span class="comment">// ② 生成 jwt Token</span></span><br><span class="line">            <span class="comment">// com.boot.security.server.service.impl.TokenServiceJWTImpl</span></span><br><span class="line">            Token token = tokenService.saveToken(loginUser);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ③ 给前端返回 Jwt Token</span></span><br><span class="line">            ResponseUtil.responseJson(response, HttpStatus.OK.value(), token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="①-得到用户认证信息"><a href="#①-得到用户认证信息" class="headerlink" title="① 得到用户认证信息"></a>① 得到用户认证信息</h3><p><strong>LoginUser类（包括用户的基本信息 SysUser 类 和权限信息 Permission 类）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUser</span> <span class="keyword">extends</span> <span class="title">SysUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用户的权限</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Permission&gt; permissions;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    <span class="comment">/** 登陆时间戳（毫秒） */</span></span><br><span class="line">    <span class="keyword">private</span> Long loginTime;</span><br><span class="line">    <span class="comment">/** 过期时间戳 */</span></span><br><span class="line">    <span class="keyword">private</span> Long expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="comment">// 返回权限不为空的集合 Set（去重）</span></span><br><span class="line">        <span class="keyword">return</span> permissions.parallelStream().filter(p -&gt; !StringUtils.isEmpty(p.getPermission()))</span><br><span class="line">            .map(p -&gt; <span class="keyword">new</span> SimpleGrantedAuthority(p.getPermission())).collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get set 方法（省略）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SysUser类（用户的基本信息）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String headImgUrl;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> DISABLED = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> VALID = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> LOCKED = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    get set 方法（省略）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Permission类（用户的权限）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permission</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String css;</span><br><span class="line">    <span class="keyword">private</span> String href;</span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="keyword">private</span> String permission;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Permission&gt; child;</span><br><span class="line">    get set 方法（省略）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red"> UserDetailsServiceImpl 实现 Spring Security 提供的 UserDetailsService 接口，实现 loadUserByUsername 方法</font></strong></p><p>此方法可以获取登录时用户输入的用户名（手机号或邮箱或用户名）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionDao permissionDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// com.boot.security.server.service.impl.UserServiceImpl</span></span><br><span class="line">        <span class="comment">// 根据姓名得到该用户</span></span><br><span class="line">        SysUser sysUser = userService.getUser(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sysUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationCredentialsNotFoundException(<span class="string">"用户名不存在"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sysUser.getStatus() == Status.LOCKED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedException(<span class="string">"用户被锁定,请联系管理员"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sysUser.getStatus() == Status.DISABLED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DisabledException(<span class="string">"用户已作废"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LoginUser loginUser = <span class="keyword">new</span> LoginUser();</span><br><span class="line">        <span class="comment">// sysUser 拷贝到 loginUser</span></span><br><span class="line">        BeanUtils.copyProperties(sysUser, loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据用户 id 读取权限信息</span></span><br><span class="line">        List&lt;Permission&gt; permissions = permissionDao.listByUserId(sysUser.getId());</span><br><span class="line">        loginUser.setPermissions(permissions);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loginUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>根据姓名从数据库中查询改用户的信息</strong>（DAO的简单实现就不展开了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">getUser</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getUser(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后得到的用户信息举例如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">loginUser = LoginUser &#123;</span><br><span class="line">    permissions = [</span><br><span class="line">        Permission &#123;</span><br><span class="line">            parentId = <span class="number">0</span>, name = <span class="string">'用户管理'</span>, css = <span class="string">'fa-users'</span>, href = <span class="string">''</span>,</span><br><span class="line">            type = <span class="number">1</span>, permission = <span class="string">''</span>, sort = <span class="number">1</span>, child = <span class="keyword">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        Permission &#123;</span><br><span class="line">            parentId = <span class="number">12</span>, name = <span class="string">'删除'</span>, css = <span class="string">''</span>, href = <span class="string">''</span>,</span><br><span class="line">            type = <span class="number">2</span>, permission = <span class="string">'sys:role:del'</span>, sort = <span class="number">100</span>, child = <span class="keyword">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    ], token = <span class="string">'null'</span>, loginTime = <span class="keyword">null</span>, expireTime = <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②-生成-jwt-Token"><a href="#②-生成-jwt-Token" class="headerlink" title="② 生成 jwt Token"></a>② 生成 jwt Token</h3><p>编写 <code>TokenServiceJWTImpl</code>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenServiceJWTImpl</span> <span class="keyword">implements</span> <span class="title">TokenService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token过期秒数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;token.expire.seconds&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer expireSeconds;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注入redisTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, LoginUser&gt; redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;token.jwtSecret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jwtSecret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Key KEY = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGIN_USER_KEY = <span class="string">"LOGIN_USER_KEY"</span>;</span><br><span class="line"></span><br><span class="line">    saveToken..</span><br><span class="line">    cacheLoginUser..</span><br><span class="line">    createJWTToken..(省略)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回 JWT Token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">saveToken</span><span class="params">(LoginUser loginUser)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 随机生成一个 Token 用于存放在redis （k值 就是Token）</span></span><br><span class="line">    loginUser.setToken(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 用户信息loginUser 和 Token 存入redis缓存中 （不是JWT Token）</span></span><br><span class="line">    cacheLoginUser(loginUser);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成jwt</span></span><br><span class="line">    String jwtToken = createJWTToken(loginUser);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Token(jwtToken, loginUser.getLoginTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将用户的基本信息、权限信息、Token<strong><font color="red">（此Token不是JWT Token）</font></strong>，存入 Redis中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cacheLoginUser</span><span class="params">(LoginUser loginUser)</span> </span>&#123;</span><br><span class="line">    loginUser.setLoginTime(System.currentTimeMillis());</span><br><span class="line">    loginUser.setExpireTime(loginUser.getLoginTime() + expireSeconds * <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 根据uuid将loginUser缓存</span></span><br><span class="line">    redisTemplate.boundValueOps(getTokenKey(loginUser.getToken())).set(loginUser, expireSeconds, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redis中的数据举例如下：</p><p>K值：<strong>tokens:7a5104ff-5391-440b-82aa-5e0c853e83c4</strong>（通过该K值查找Value）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@class"</span>: <span class="string">"com.boot.security.server.dto.LoginUser"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"createTime"</span>: [</span><br><span class="line">        <span class="string">"java.util.Date"</span>,</span><br><span class="line">        <span class="number">1491808898000</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"updateTime"</span>: [</span><br><span class="line">        <span class="string">"java.util.Date"</span>,</span><br><span class="line">        <span class="number">1499304019000</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"$2a$10$iYM/H7TrSaLs7XyIWQdGwe1xf4cdmt3nwMja6RT0wxG5YY1RjN0EK"</span>,</span><br><span class="line">    <span class="attr">"nickname"</span>: <span class="string">"管理员"</span>,</span><br><span class="line">    <span class="attr">"headImgUrl"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"telephone"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: [</span><br><span class="line">        <span class="string">"java.util.Date"</span>,</span><br><span class="line">        <span class="string">"1998-06-30"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"intro"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"permissions"</span>: [</span><br><span class="line">        <span class="string">"java.util.ArrayList"</span>,</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"@class"</span>: <span class="string">"com.boot.security.server.model.Permission"</span>,</span><br><span class="line">                <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"createTime"</span>: [</span><br><span class="line">                    <span class="string">"java.util.Date"</span>,</span><br><span class="line">                    <span class="number">1596958614806</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"updateTime"</span>: [</span><br><span class="line">                    <span class="string">"java.util.Date"</span>,</span><br><span class="line">                    <span class="number">1596958614806</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"用户管理"</span>,</span><br><span class="line">                <span class="attr">"css"</span>: <span class="string">"fa-users"</span>,</span><br><span class="line">                <span class="attr">"href"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"permission"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"sort"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"child"</span>: <span class="literal">null</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"@class"</span>: <span class="string">"com.boot.security.server.model.Permission"</span>,</span><br><span class="line">                <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"createTime"</span>: [</span><br><span class="line">                    <span class="string">"java.util.Date"</span>,</span><br><span class="line">                    <span class="number">1596958614807</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"updateTime"</span>: [</span><br><span class="line">                    <span class="string">"java.util.Date"</span>,</span><br><span class="line">                    <span class="number">1596958614807</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"parentId"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"用户查询"</span>,</span><br><span class="line">                <span class="attr">"css"</span>: <span class="string">"fa-user"</span>,</span><br><span class="line">                <span class="attr">"href"</span>: <span class="string">"pages/user/userList.html"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"permission"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"sort"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"child"</span>: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"7a5104ff-5391-440b-82aa-5e0c853e83c4"</span>,</span><br><span class="line">    <span class="attr">"loginTime"</span>: <span class="number">1596958614912</span>,</span><br><span class="line">    <span class="attr">"expireTime"</span>: <span class="number">1596965814912</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成JWT Token <strong>(JWT Token 中载荷部分值存放 <code>UUID.randomUUID()</code> 生成的Token，用户从Redis中读取信息)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">createJWTToken</span><span class="params">(LoginUser loginUser)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; claims = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    claims.put(LOGIN_USER_KEY, loginUser.getToken());<span class="comment">// 放入一个随机字符串，通过该串可找到登陆用户</span></span><br><span class="line"></span><br><span class="line">    String jwtToken = Jwts.builder().setClaims(claims).signWith(SignatureAlgorithm.HS256, getKeyInstance())</span><br><span class="line">        .compact();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jwtToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③-给前端返回-Jwt-Token"><a href="#③-给前端返回-Jwt-Token" class="headerlink" title="③ 给前端返回 Jwt Token"></a>③ 给前端返回 Jwt Token</h3><p>前端将JWT Token存放在 <code>localStorage</code> 或者 头信息中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">login</span><span class="params">(obj)</span> </span>&#123;</span><br><span class="line">    $(obj).attr(<span class="string">"disabled"</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> username = $.trim($(<span class="string">'#username'</span>).val());</span><br><span class="line">    <span class="keyword">var</span> password = $.trim($(<span class="string">'#password'</span>).val());</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="string">""</span> || password == <span class="string">""</span>) &#123;</span><br><span class="line">        $(<span class="string">"#info"</span>).html(<span class="string">'用户名或者密码不能为空'</span>);</span><br><span class="line">        $(obj).attr(<span class="string">"disabled"</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type : <span class="string">'post'</span>,</span><br><span class="line">            url : <span class="string">'/login'</span>,</span><br><span class="line">            data : $(<span class="string">"#login-form"</span>).serialize(),</span><br><span class="line">            success : function(data) &#123;</span><br><span class="line">                <span class="comment">// 将后台返回的 jwt立牌 存放在 cookie中</span></span><br><span class="line">                localStorage.setItem(<span class="string">"token"</span>, data.token);</span><br><span class="line">                location.href = <span class="string">'/index.html'</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            error : function(xhr, textStatus, errorThrown) &#123;</span><br><span class="line">                <span class="keyword">var</span> msg = xhr.responseText;</span><br><span class="line">                <span class="keyword">var</span> response = JSON.parse(msg);</span><br><span class="line">                $(<span class="string">"#info"</span>).html(response.message);</span><br><span class="line">                $(obj).attr(<span class="string">"disabled"</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="登录授权后的权限认证分析"><a href="#登录授权后的权限认证分析" class="headerlink" title="登录授权后的权限认证分析"></a>登录授权后的权限认证分析</h1><h2 id="SecurityConfig-1"><a href="#SecurityConfig-1" class="headerlink" title="SecurityConfig"></a>SecurityConfig</h2><p><strong><code>SecurityConfig</code>继承 <code>WebSecurityConfigurerAdapter</code>，重写<code>configure(AuthenticationManagerBuilder auth)</code>方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// com.boot.security.server.service.impl.UserDetailsServiceImpl</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OncePerRequestFilter"><a href="#OncePerRequestFilter" class="headerlink" title="OncePerRequestFilter"></a>OncePerRequestFilter</h2><p><strong>定义一个前置请求的过滤器，去获取Token，检测Toekn</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_KEY = <span class="string">"token"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenService tokenService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long MINUTES_10 = <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>根据参数或者header获取token</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static <span class="keyword">String</span> <span class="built_in">getToken</span>(HttpServletRequest request) &#123;</span><br><span class="line">   <span class="keyword">String</span> token = request.getParameter(TOKEN_KEY);</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.isBlank(<span class="built_in">token</span>)) &#123;</span><br><span class="line">      token = request.getHeader(TOKEN_KEY);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">token</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>校验时间：过期时间与当前时间对比，临近过期10分钟内的话，自动刷新缓存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> LoginUser <span class="title">checkLoginTime</span><span class="params">(LoginUser loginUser)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> expireTime = loginUser.getExpireTime();</span><br><span class="line">    <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span> (expireTime - currentTime &lt;= MINUTES_10) &#123;</span><br><span class="line">        String token = loginUser.getToken();</span><br><span class="line">        loginUser = (LoginUser) userDetailsService.loadUserByUsername(loginUser.getUsername());</span><br><span class="line">        loginUser.setToken(token);</span><br><span class="line">        tokenService.refresh(loginUser);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loginUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionDao permissionDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// com.boot.security.server.model.SysUser</span></span><br><span class="line">        <span class="comment">// com.boot.security.server.service.impl.UserServiceImpl</span></span><br><span class="line">        <span class="comment">// 系统管理用户的基本信息</span></span><br><span class="line">        <span class="comment">// 根据姓名得到该用户</span></span><br><span class="line">        SysUser sysUser = userService.getUser(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sysUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationCredentialsNotFoundException(<span class="string">"用户名不存在"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sysUser.getStatus() == Status.LOCKED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedException(<span class="string">"用户被锁定,请联系管理员"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sysUser.getStatus() == Status.DISABLED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DisabledException(<span class="string">"用户已作废"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LoginUser loginUser = <span class="keyword">new</span> LoginUser();</span><br><span class="line">        <span class="comment">// sysUser 拷贝到 loginUser</span></span><br><span class="line">        BeanUtils.copyProperties(sysUser, loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据 id 读取权限信息</span></span><br><span class="line">        List&lt;Permission&gt; permissions = permissionDao.listByUserId(sysUser.getId());</span><br><span class="line">        loginUser.setPermissions(permissions);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loginUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现接口定义的<code>doFilterInternal()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据参数或者header获取token</span></span><br><span class="line">    String token = getToken(request);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(token)) &#123;</span><br><span class="line">        <span class="comment">// 根据token从redis读取用户信息</span></span><br><span class="line">        LoginUser loginUser = tokenService.getLoginUser(token);</span><br><span class="line">        <span class="keyword">if</span> (loginUser != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 校验过期时间与当前时间，临近过期10分钟内的话，自动刷新缓存</span></span><br><span class="line">            loginUser = checkLoginTime(loginUser);</span><br><span class="line"></span><br><span class="line">            UsernamePasswordAuthenticationToken authentication = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser,<span class="keyword">null</span>, loginUser.getAuthorities());</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LoginUser <span class="title">getLoginUser</span><span class="params">(String jwtToken)</span> </span>&#123;</span><br><span class="line">    String uuid = getUUIDFromJWT(jwtToken);</span><br><span class="line">    <span class="keyword">if</span> (uuid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.boundValueOps(getTokenKey(uuid)).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getUUIDFromJWT</span><span class="params">(String jwtToken)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"null"</span>.equals(jwtToken) || StringUtils.isBlank(jwtToken)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; jwtClaims = Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken).getBody();</span><br><span class="line">        <span class="keyword">return</span> MapUtils.getString(jwtClaims, LOGIN_USER_KEY);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">        log.error(<span class="string">"&#123;&#125;已过期"</span>, jwtToken);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"&#123;&#125;"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/freeMak/boot-security&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/freeMak/boot-security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇是
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="SpringSecurity" scheme="http://yoursite.com/tags/SpringSecurity/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="JWT" scheme="http://yoursite.com/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Spring-注解</title>
    <link href="http://yoursite.com/2020/08/06/Spring-%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/08/06/Spring-注解/</id>
    <published>2020-08-06T15:01:06.000Z</published>
    <updated>2020-08-09T05:52:48.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解基础概念"><a href="#注解基础概念" class="headerlink" title="注解基础概念"></a>注解基础概念</h1><p><strong>什么是注解编程</strong>？</p><ul><li>在 类 或者 方法 上加入特定的注解（<code>@xxx</code>），完成特定功能的开发。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXX</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么要学习注解编程</strong>？</p><ol><li><p>注解开发方便，代码简单， 开发速度大大提高。</p></li><li><p>注解开发是 Spring 开发潮流</p><p>Spring 2.x 引入注解，Spring 3.x 完善注解，SpringBoot 普及、推广 注解编程。</p></li></ol><h2 id="注解的作用"><a href="#注解的作用" class="headerlink" title="注解的作用"></a>注解的作用</h2><ul><li><strong>替换 XML 这种配置形式，简化配置。</strong></li></ul><p><img src="/2020/08/06/Spring-注解/1.png" alt></p><ul><li><p><strong>替换接口，实现调用双方的契约性。</strong></p><p>通过注解的方式，在功能调用者和功能提供者之间达成契约，进而进行功能的调用。因为注解的应用的更为方便灵活，所以在现在的开发中，更推荐通过注解的方式完成。</p></li></ul><p><img src="/2020/08/06/Spring-注解/2.png" alt></p><h2 id="Spring-注解的发展历程"><a href="#Spring-注解的发展历程" class="headerlink" title="Spring 注解的发展历程"></a>Spring 注解的发展历程</h2><ol><li>Spring 2.x： 开始支持注解编程 <strong><code>@Component</code>、<code>@Service</code>、<code>@Scope</code>…</strong><br>目的：提供的这些注解只是为了某些 XML 的配置，作为 XML 开发的有益补充。</li><li>Spring 3.x： <strong><code>@Configuration</code>、<code>@Bean</code>…</strong><br>目的：彻底替换 XML，基于纯注解</li><li>Spring 4.x： <strong>SpringBoot</strong> 提倡使用注解进行开发</li></ol><h2 id="Spring-注解开发的一个问题"><a href="#Spring-注解开发的一个问题" class="headerlink" title="Spring 注解开发的一个问题"></a>Spring 注解开发的一个问题</h2><p>Spring 基于注解进行配置后，还能否解耦合呢？</p><ul><li>在 Spring 框架应用注解时，如果对注解配置的内容不满意，可以通过 Spring 配置文件覆盖。</li></ul><h1 id="Spring-基础注解-Spring-2-x"><a href="#Spring-基础注解-Spring-2-x" class="headerlink" title="Spring 基础注解(Spring 2.x)"></a>Spring 基础注解(Spring 2.x)</h1><p>这个阶段的注解，仅仅是简化 XML 的配置，并不能完全替代 XML。</p><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><p>作用：让Spring框架在设置包及其子包中扫描对应的注解，使其生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.Cro"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对象创建相关注解"><a href="#对象创建相关注解" class="headerlink" title="对象创建相关注解"></a>对象创建相关注解</h2><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>作用：替换原有 Spring 配置文件中的 <strong><code>&lt;bean&gt;</code></strong> 标签</p><ul><li><strong><code>id</code></strong> 属性：在 <strong><code>@Component</code></strong> 中提供了默认的设置方式，首字母小写（UserDAO —&gt; userDAO）</li><li><strong><code>class</code></strong> 属性：通过反射获得的 <strong><code>class</code></strong> 的内容</li></ul><p><strong><code>@Component</code></strong> 细节：</p><ul><li>如何显式指定工厂创建对象的 id 值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"u"</span>)</span><br></pre></td></tr></table></figure><p>Spring 配置文件覆盖注解配置内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">applicationContext.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.Cro.bean.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">id值、class值 要和 注解 中的设置保持一致, </span><br><span class="line">否则 Spring 会创建新的对象。</span><br></pre></td></tr></table></figure><h3 id="Repository、-Service、-Contoller"><a href="#Repository、-Service、-Contoller" class="headerlink" title="@Repository、@Service、@Contoller"></a>@Repository、@Service、@Contoller</h3><p><strong><code>@Repository</code>、<code>@Service</code>、<code>@Controller</code></strong> 都是 <strong><code>@Component</code></strong> 的 <strong>衍生注解</strong>。</p><p>本质上这些衍生注解就是 <strong><code>@Component</code></strong>，通过源码可以看见他们都使用了 <code>@Component</code>；</p><p>它们的存在是为了：<strong>更加准确的表达一个类型的作用</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span> ----&gt; XXXDAO</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAO</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>注意：Spring 整合 Mybatis 开发过程中，不使用 <strong><code>@Repository</code>、<code>@Component</code></strong></p><h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p>作用：控制简单对象创建次数<br>注意：不添加 <strong><code>@Scope</code></strong>，Spring 提供默认值 <strong><code>singleton</code></strong></p><ul><li>XML 配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.Cro.Customer"</span> <span class="attr">scope</span>=<span class="string">"singleton | prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建单例对象</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">创建多例对象</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h3><p>作用：延迟创建单实例对象</p><p>注意：一旦使用 <strong><code>@Lazy</code></strong> 注解后，Spring 会在使用这个对象的时候，再创建这个对象。</p><ul><li>XML 配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"account"</span> <span class="attr">class</span>=<span class="string">"com.Cro.Account"</span> <span class="attr">lazy</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Account.Account"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生命周期注解-PostConstruct、-PreDestroy"><a href="#生命周期注解-PostConstruct、-PreDestroy" class="headerlink" title="生命周期注解 @PostConstruct、@PreDestroy"></a>生命周期注解 @PostConstruct、@PreDestroy</h3><p>初始化相关方法： <strong><code>@PostConstruct</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InitializingBean</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">init-method</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>销毁方法：<strong><code>@PreDestory</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DisposableBean</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">destory-method</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>上述的两个注解并不是 Spring 提供的，由 <strong>JSR(JavaEE规范)520</strong> 提供</li><li>再次验证，通过注解实现了接口的契约性</li></ul><h2 id="注入相关注解"><a href="#注入相关注解" class="headerlink" title="注入相关注解"></a>注入相关注解</h2><h3 id="用户自定义类型-Autowired"><a href="#用户自定义类型-Autowired" class="headerlink" title="用户自定义类型 @Autowired"></a>用户自定义类型 @Autowired</h3><p><img src="/2020/08/06/Spring-注解/3.png" alt></p><h3 id="Autowired-细节"><a href="#Autowired-细节" class="headerlink" title="@Autowired 细节"></a>@Autowired 细节</h3><p><strong>① <code>@Autowired</code></strong> 注解 <strong>基于类型进行注入</strong> [推荐]<br>注入对象的类型，必须与目标成员变量类型相同或者是其子类（实现类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDAO userDAO;</span><br></pre></td></tr></table></figure><p><strong>② <code>@Autowired</code>、<code>@Qualifier</code></strong> 注解联合实现 <strong>基于名字进行注入</strong> [了解]<br>注入对象的 id 值，必须与 <strong><code>@Qualifier</code></strong> 注解中设置的名字相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"userDAOImpl"</span>)</span><br><span class="line"><span class="keyword">private</span> UserDAO userDAO;</span><br></pre></td></tr></table></figure><p><strong>③ <code>@Autowired</code></strong> 注解放置位置</p><ul><li>放置在对应成员变量的 setter 方法上，调用 setter 方法赋值</li><li><strong>直接放置在成员变量上，Spring 通过反射直接对成员变量进行赋值 [推荐]</strong></li></ul><p><strong>④ JavaEE 规范中类似功能的注解</strong></p><ul><li>JSR250 提供的 <strong><code>@Resource(name=&quot;userDAOImpl&quot;)</code></strong> <strong>基于名字进行注入</strong>，<br>等价于 <strong><code>@Autowired</code></strong> 与 <strong><code>@Qualifier</code></strong> 联合实现的效果。<br>注意：<strong><code>@Resource</code></strong> 注解如果名字没有配对成功，会继续 <strong>按照类型进行注入</strong>。</li><li>JSR330 提供的 <strong><code>@Injection</code></strong> 作用与 <strong><code>@Autowired</code></strong> 完全一致，基于类型进行注入 —-&gt; 一般用在 EJB3.0 中</li></ul><h3 id="JDK类型"><a href="#JDK类型" class="headerlink" title="JDK类型"></a>JDK类型</h3><h4 id="Value-注解"><a href="#Value-注解" class="headerlink" title="@Value 注解"></a><strong><code>@Value</code></strong> 注解</h4><p>开发步骤：</p><ol><li><p>设置配置文件 <code>xxx.properties</code></p><p><strong><code>id = 10;name = xiaoxiao</code></strong></p></li><li><p>Spring的工厂读取这个配置文件</p><p><strong><code>&lt;context:property-placeholder location=&quot;&quot; /&gt;</code></strong></p></li><li><p>代码</p><p>属性<strong><code>@Value(&quot;${key}&quot;)</code></strong></p></li></ol><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a><code>@PropertySource</code></h4><ol><li><p>作用：用于替换Spring配置文件中的<strong><code>&lt;context:property-placeholder location=&quot;&quot; /&gt;</code></strong>标签</p></li><li><p>开发步骤</p><ul><li><p>设置配置文件 <code>xxx.properties</code></p><p><strong><code>id = 10;name = xiaoxiao</code></strong></p></li><li><p>应用 <strong><code>@PropertySource(&quot;classpath:/xxx.properties&quot;)</code></strong></p></li><li><p>代码</p><p>属性<strong><code>@Value(&quot;${key}&quot;)</code></strong></p></li></ul></li></ol><h4 id="Value注解的使用细节"><a href="#Value注解的使用细节" class="headerlink" title="@Value注解的使用细节"></a><code>@Value</code>注解的使用细节</h4><ul><li><p><strong><code>@Value</code></strong> 注解不能应用在静态成员变量上</p><p>如果应用，赋值(注入)失败</p></li><li><p><strong><code>@Value + @Properties</code></strong>  这种方式，不能注入集合类型</p><p>Spring提供新的配置形式 <code>YAML、YML</code></p></li></ul><h2 id="注解扫描详解"><a href="#注解扫描详解" class="headerlink" title="注解扫描详解"></a>注解扫描详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.Cro"</span> /&gt;</span></span><br><span class="line">当前包 及其 子包</span><br></pre></td></tr></table></figure><p>① 排除方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.Cro"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">expression</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    type:assignable:  排除特定的类型 不进行扫描</span><br><span class="line">     annotation:  排除特定的注解 不进行扫描</span><br><span class="line">     aspectj:     切入点表达式</span><br><span class="line">                      包切入点: com.Cro.bean..*</span><br><span class="line">                      类切入点: *..User</span><br><span class="line">     regex:       正则表达式</span><br><span class="line">     custom:      自定义排除策略，框架底层开发</span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">排除策略可以叠加使用</span><br></pre></td></tr></table></figure><p><img src="/2020/08/06/Spring-注解/4.png" alt></p><p>② 包含方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.Cro"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">expression</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">1. use-default-filters="false"</span><br><span class="line">作用：让Spring默认的注解扫描方式失效</span><br><span class="line">2. <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">expression</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">作用：指定扫描哪些注解</span><br><span class="line">type:assignable:  排除特定的类型 进行扫描</span><br><span class="line">annotation:  排除特定的注解 进行扫描</span><br><span class="line">aspectj:     切入点表达式</span><br><span class="line">                     包切入点: com.Cro.bean..*</span><br><span class="line">                     类切入点: *..User</span><br><span class="line">regex:       正则表达式</span><br><span class="line">custom:      自定义排除策略，框架底层开发</span><br><span class="line">包含策略可以叠加使用</span><br></pre></td></tr></table></figure><h1 id="Spring高级注解-Spring3-x及以上"><a href="#Spring高级注解-Spring3-x及以上" class="headerlink" title="Spring高级注解(Spring3.x及以上)"></a>Spring高级注解(Spring3.x及以上)</h1><h2 id="Configuration-配置Bean"><a href="#Configuration-配置Bean" class="headerlink" title="@Configuration(配置Bean )"></a><code>@Configuration</code>(配置Bean )</h2><p>Spring在3.x提供的新注解，用于替换XML配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>① 配置 Bean 在应用的过程中 替换了XML具体什么内容？(替换了XML的全部工作)</strong></p><p><img src="/2020/08/06/Spring-注解/5.png" alt></p><p>② <strong><code>AnnotationConfigApplicationContext</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 创建工厂代码</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line"><span class="number">2</span>. 指定配置文件</span><br><span class="line">  <span class="number">1</span>. 指定配置Bean的Class</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">  <span class="number">2</span>. 指定配置Bean所在的路径</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">"com.Cro"</span>);</span><br></pre></td></tr></table></figure><h3 id="配置Bean的细节"><a href="#配置Bean的细节" class="headerlink" title="配置Bean的细节"></a>配置Bean的细节</h3><h4 id="基于注解开发使用日志"><a href="#基于注解开发使用日志" class="headerlink" title="基于注解开发使用日志"></a>基于注解开发使用日志</h4><p>不能集成Log4j</p><p><strong>集成logback</strong></p><ul><li>引入相关jar</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- slf4j + logback: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 实现lsf4j接口并整合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引入logback配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder </span></span><br><span class="line"><span class="comment">            by default --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Configuration注解的本质"><a href="#Configuration注解的本质" class="headerlink" title="@Configuration注解的本质"></a><code>@Configuration</code>注解的本质</h4><p>本质：也是<strong><code>@Component</code></strong>注解的衍生注解，可以应用 <strong><code>&lt;context:component-scan&gt;</code></strong>进行扫描（了解）</p><h2 id="Bean注解"><a href="#Bean注解" class="headerlink" title="@Bean注解"></a>@Bean注解</h2><p><strong><code>@Bean</code></strong> 注解在 <strong>配置bean</strong> 中进行使用，等同于XML配置文件中的<code>&lt;bean&gt;</code>标签</p><h3 id="Bean注解的基本使用"><a href="#Bean注解的基本使用" class="headerlink" title="@Bean注解的基本使用"></a>@Bean注解的基本使用</h3><p>对象的创建</p><ul><li><p>简单对象</p><p>直接能够通过new方式创建的对象</p><p><code>User、UserService、UserDAO</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>复杂对象</p><p>不能通过new的方式直接创建的对象</p><p><code>Connection、SqlSessionFactory</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">conn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/spring?useSSL=false"</span>,<span class="string">"root"</span>,<span class="string">"1234"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义id值"><a href="#自定义id值" class="headerlink" title="自定义id值"></a>自定义id值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(<span class="string">"u"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制对象创建次数"><a href="#控制对象创建次数" class="headerlink" title="控制对象创建次数"></a>控制对象创建次数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton | prototype"</span>) <span class="comment">//默认值 singleton（单例）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bean注解的注入"><a href="#Bean注解的注入" class="headerlink" title="@Bean注解的注入"></a>@Bean注解的注入</h3><h4 id="用户自定义类型的注入"><a href="#用户自定义类型的注入" class="headerlink" title="用户自定义类型的注入"></a>用户自定义类型的注入</h4><p><img src="/2020/08/06/Spring-注解/6.png" alt></p><h4 id="JDK类型的注入"><a href="#JDK类型的注入" class="headerlink" title="JDK类型的注入"></a>JDK类型的注入</h4><p>耦合采用 <strong><code>@Value、@PropertySource</code></strong>解决</p><p><img src="/2020/08/06/Spring-注解/7.png" alt></p><h2 id="ComponentScan注解"><a href="#ComponentScan注解" class="headerlink" title="@ComponentScan注解"></a><code>@ComponentScan</code>注解</h2><p><strong><code>@ComponentScan</code></strong>注解在配置bean中进行使用，等同于XML配置文件中的<strong><code>&lt;context:component-scan&gt;</code></strong>标签</p><p>目的：进行相关注解的扫描( <strong><code>@Component、@Value ... @Autowired</code></strong> )</p><p><img src="/2020/08/06/Spring-注解/8.png" alt></p><h3 id="排除、包含的使用"><a href="#排除、包含的使用" class="headerlink" title="排除、包含的使用"></a>排除、包含的使用</h3><ul><li>排除</li></ul><p><img src="/2020/08/06/Spring-注解/9.png" alt></p><ul><li>包含</li></ul><p><img src="/2020/08/06/Spring-注解/10.png" alt></p><h1 id="Spring工厂创建对象的多种配置方式"><a href="#Spring工厂创建对象的多种配置方式" class="headerlink" title="Spring工厂创建对象的多种配置方式"></a>Spring工厂创建对象的多种配置方式</h1><p><img src="/2020/08/06/Spring-注解/11.png" alt></p><h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p><strong>@Component及其衍生注解 &lt; @Bean &lt; 配置文件bean标签</strong></p><p><strong>优先级高的配置 可以覆盖优先级低的配置</strong></p><p>配置覆盖：<strong>id 值 要保持一致</strong></p><h1 id="整合多个配置信息"><a href="#整合多个配置信息" class="headerlink" title="整合多个配置信息"></a>整合多个配置信息</h1><ul><li><p>为什么会有多个配置信息</p><p>拆分多个配置bean的开发，是一种模块化开发的形式，也体现了面向对象各司其职的设计模式</p></li><li><p>多配置信息整合的方式</p><ol><li>多个配置Bean的整合</li><li>配置Bean与<strong><code>@component</code></strong>相关注解的整合</li><li>配置Bean与 springXML 配置文件的整合</li></ol></li><li><p>整合多种配置需要关注哪些要点</p><ol><li>如何使多配置的信息汇总成一个整体</li><li>如何实现跨配置的注入</li></ol></li></ul><h2 id="多个配置Bean的整合"><a href="#多个配置Bean的整合" class="headerlink" title="多个配置Bean的整合"></a>多个配置Bean的整合</h2><h3 id="多配置的信息汇总"><a href="#多配置的信息汇总" class="headerlink" title="多配置的信息汇总"></a>多配置的信息汇总</h3><ul><li>base-package进行多个配置Bean的整合</li></ul><p><img src="/2020/08/06/Spring-注解/12.png" alt></p><ul><li><strong><code>@Import</code></strong><ol><li>可以创建对象</li><li>多配置bean的整合</li></ol></li></ul><p><img src="/2020/08/06/Spring-注解/13.png" alt></p><ul><li>在工厂创建时，指定多个配置Bean的Class对象 [了解]</li></ul><p><img src="/2020/08/06/Spring-注解/15.png" alt></p><h3 id="跨配置进行注入"><a href="#跨配置进行注入" class="headerlink" title="跨配置进行注入"></a>跨配置进行注入</h3><p><img src="/2020/08/06/Spring-注解/14.png" alt></p><h2 id="配置Bean与-component相关注解的整合"><a href="#配置Bean与-component相关注解的整合" class="headerlink" title="配置Bean与@component相关注解的整合"></a>配置Bean与<code>@component</code>相关注解的整合</h2><p><img src="/2020/08/06/Spring-注解/16.png" alt></p><h2 id="配置Bean与-XML-配置文件的整合"><a href="#配置Bean与-XML-配置文件的整合" class="headerlink" title="配置Bean与 XML 配置文件的整合"></a>配置Bean与 XML 配置文件的整合</h2><p><img src="/2020/08/06/Spring-注解/17.png" alt></p><h2 id="配置Bean的底层实现"><a href="#配置Bean的底层实现" class="headerlink" title="配置Bean的底层实现"></a>配置Bean的底层实现</h2><p><img src="/2020/08/06/Spring-注解/18.png" alt></p><h1 id="纯注解版AOP开发"><a href="#纯注解版AOP开发" class="headerlink" title="纯注解版AOP开发"></a>纯注解版AOP开发</h1><p><img src="/2020/08/06/Spring-注解/25.png" alt></p><h1 id="纯注解版Spring-MyBatis整合"><a href="#纯注解版Spring-MyBatis整合" class="headerlink" title="纯注解版Spring+MyBatis整合"></a>纯注解版Spring+MyBatis整合</h1><p><img src="/2020/08/06/Spring-注解/19.png" alt></p><p><img src="/2020/08/06/Spring-注解/20.png" alt></p><h2 id="MapperLocations编码时通配的写法"><a href="#MapperLocations编码时通配的写法" class="headerlink" title="MapperLocations编码时通配的写法"></a>MapperLocations编码时通配的写法</h2><p><img src="/2020/08/06/Spring-注解/21.png" alt></p><h2 id="配置Bean数据耦合的问题"><a href="#配置Bean数据耦合的问题" class="headerlink" title="配置Bean数据耦合的问题"></a>配置Bean数据耦合的问题</h2><p><img src="/2020/08/06/Spring-注解/22.png" alt></p><p><img src="/2020/08/06/Spring-注解/23.png" alt></p><h1 id="纯注解版事务编程"><a href="#纯注解版事务编程" class="headerlink" title="纯注解版事务编程"></a>纯注解版事务编程</h1><p><img src="/2020/08/06/Spring-注解/24.png" alt></p><h1 id="Spring框架中YML的使用"><a href="#Spring框架中YML的使用" class="headerlink" title="Spring框架中YML的使用"></a>Spring框架中YML的使用</h1><h2 id="什么是YML"><a href="#什么是YML" class="headerlink" title="什么是YML"></a>什么是YML</h2><p><img src="/2020/08/06/Spring-注解/26.png" alt></p><h2 id="Properties进行配置的问题"><a href="#Properties进行配置的问题" class="headerlink" title="Properties进行配置的问题"></a>Properties进行配置的问题</h2><p><img src="/2020/08/06/Spring-注解/27.png" alt></p><h2 id="Spring与YML的整合思路"><a href="#Spring与YML的整合思路" class="headerlink" title="Spring与YML的整合思路"></a>Spring与YML的整合思路</h2><p><img src="/2020/08/06/Spring-注解/28.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注解基础概念&quot;&gt;&lt;a href=&quot;#注解基础概念&quot; class=&quot;headerlink&quot; title=&quot;注解基础概念&quot;&gt;&lt;/a&gt;注解基础概念&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;什么是注解编程&lt;/strong&gt;？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 类 或者 方法 上加入特定
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring5.X" scheme="http://yoursite.com/tags/Spring5-X/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合Mvc</title>
    <link href="http://yoursite.com/2020/08/06/SpringMvc/"/>
    <id>http://yoursite.com/2020/08/06/SpringMvc/</id>
    <published>2020-08-06T14:33:00.000Z</published>
    <updated>2020-08-09T05:53:19.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVC-框架整合思想"><a href="#MVC-框架整合思想" class="headerlink" title="MVC 框架整合思想"></a>MVC 框架整合思想</h1><h2 id="为什么要整合-MVC-框架"><a href="#为什么要整合-MVC-框架" class="headerlink" title="为什么要整合 MVC 框架"></a>为什么要整合 MVC 框架</h2><ol><li><p>MVC 框架提供了控制器（Controller）调用 Service</p><p>Controller ——&gt; Service ——&gt; DAO</p></li><li><p>请求响应的处理</p></li><li><p>接收请求参数 <strong><code>request.getParameter(&quot;&quot;)</code></strong></p></li><li><p>控制程序的运行流程</p></li><li><p>视图解析（JSP、JSON、Freemarker、Thymeleaf）</p></li></ol><p><strong>Spring 可以整合哪些 MVC 框架？</strong></p><ol><li>struts1</li><li>webwork</li><li>jsf</li><li>struts2</li><li><strong>springMVC</strong></li></ol><h2 id="搭建-Web-运行环境"><a href="#搭建-Web-运行环境" class="headerlink" title="搭建 Web 运行环境"></a>搭建 Web 运行环境</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring-整合-MVC-框架的核心思路"><a href="#Spring-整合-MVC-框架的核心思路" class="headerlink" title="Spring 整合 MVC 框架的核心思路"></a>Spring 整合 MVC 框架的核心思路</h1><h2 id="准备工厂"><a href="#准备工厂" class="headerlink" title="准备工厂"></a>准备工厂</h2><p><strong>Web 开发过程中如何创建工厂?</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> WebXmlApplicationContext(<span class="string">"/applicationContext.xml"</span>);</span><br></pre></td></tr></table></figure><p><strong>如何保证工厂唯一，同时被共用？</strong></p><ul><li><strong>共用</strong>：工厂存储在 <strong><code>ServletContext</code></strong> 这个作用域中，<strong><code>ServletContext.setAttribute(&quot;xxx&quot;, ctx);</code></strong></li><li><strong>唯一</strong>：在 <strong><code>ServletContext</code></strong> 对象创建的同时 ——&gt; 创建工厂。<br><strong><code>ServletContextListener</code></strong> 在 <strong><code>ServletContext</code></strong> 对象创建的同时，被调用（只会被调用一次），把创建工厂的代码写在 <strong><code>ServletContextListener</code></strong> 中，也会保证只调用一次，保证了工厂的唯一性。</li></ul><p><strong>Spring 封装了一个 <code>ContextLoaderListener</code>，主要做了两件事：</strong></p><ol><li>创建工厂</li><li>把工厂存在 <strong><code>ServletContext</code></strong> 中</li></ol><p><strong><code>ContextLoaderListener</code></strong>使用方式：web.xml 中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listen-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h2><p><strong>依赖注入：把 Service 对象注入到控制器对象</strong></p><p><img src="/2020/08/06/SpringMvc/1.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MVC-框架整合思想&quot;&gt;&lt;a href=&quot;#MVC-框架整合思想&quot; class=&quot;headerlink&quot; title=&quot;MVC 框架整合思想&quot;&gt;&lt;/a&gt;MVC 框架整合思想&lt;/h1&gt;&lt;h2 id=&quot;为什么要整合-MVC-框架&quot;&gt;&lt;a href=&quot;#为什么要整合-M
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring5.X" scheme="http://yoursite.com/tags/Spring5-X/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringMvc" scheme="http://yoursite.com/tags/SpringMvc/"/>
    
  </entry>
  
  <entry>
    <title>Spring-事务</title>
    <link href="http://yoursite.com/2020/08/06/Spring-%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2020/08/06/Spring-事务/</id>
    <published>2020-08-06T11:42:58.000Z</published>
    <updated>2020-08-09T05:54:34.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h1><ul><li>事务时保证业务操作完整性的一种<strong>数据库机制</strong>。</li></ul><p>事务的 4 大特点： <strong><code>A</code>、<code>C</code>、<code>I</code>、<code>D</code></strong></p><ul><li><strong><code>A</code> 原子性</strong></li><li><strong><code>C</code> 一致性</strong></li><li><strong><code>I</code> 隔离性</strong></li><li><strong><code>D</code> 持久性</strong></li></ul><p><strong>如何控制事务?</strong>（JDBC、Mybatis）</p><p>JDBC</p><ul><li><strong><code>Connection.setAutoCommit(false);</code></strong></li><li><strong><code>Connection.commit();</code></strong></li><li><strong><code>Connection.rollback();</code></strong></li></ul><p>Mybatis</p><ul><li>Mybatis 自动开启事务</li><li><strong><code>sqlSession.commit();</code></strong>底层还是调用的 <strong><code>Connection</code></strong></li><li><strong><code>sqlSession.rollback();</code></strong> 底层还是调用的 <strong><code>Connection</code></strong></li></ul><p>结论：控制事务的底层，都是通过 <strong><code>Connection</code></strong> 对象完成的。</p><h1 id="Spring-控制事务的开发"><a href="#Spring-控制事务的开发" class="headerlink" title="Spring 控制事务的开发"></a>Spring 控制事务的开发</h1><p><strong>Spring是通过AOP的方式进行事务开发</strong></p><ul><li>搭建开发环境 <code>pom.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编码</li></ul><p>类 <strong><code>UserServiceImpl.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件<strong><code>applicationContext.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span> <span class="attr">ref</span>=<span class="string">"userDAO"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--DataSourceTransactionManager--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>细节<br>进行动态代理底层实现的切换，默认 <code>false</code> 是 JDK，<code>true</code> 是 Cglib。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring-中的事务属性（Transaction-Attribute）"><a href="#Spring-中的事务属性（Transaction-Attribute）" class="headerlink" title="Spring 中的事务属性（Transaction Attribute）"></a>Spring 中的事务属性（Transaction Attribute）</h1><p><strong>什么是事务属性</strong>？</p><p><strong>属性</strong>：描述物体特征的一系列值（性别、身高、体重）</p><p><strong>事务属性</strong>：描述事务特征的一系列值</p><ol><li><strong>隔离属性</strong></li><li><strong>传播属性</strong></li><li><strong>只读属性</strong></li><li><strong>超时属性</strong></li><li><strong>异常属性</strong></li></ol><p><strong>如何添加事务属性？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(isolation=, propagation=, readOnly=,timeout=,rollbackFor,noRollbackFor=,)</span><br></pre></td></tr></table></figure><h2 id="隔离属性（ISOLATION）"><a href="#隔离属性（ISOLATION）" class="headerlink" title="隔离属性（ISOLATION）"></a>隔离属性（ISOLATION）</h2><h3 id="概念：描述了事务解决并发问题的特征。"><a href="#概念：描述了事务解决并发问题的特征。" class="headerlink" title="概念：描述了事务解决并发问题的特征。"></a>概念：描述了事务解决并发问题的特征。</h3><ol><li><strong>什么是并发？</strong><br>多个事务（用户）在同一时间，访问操作了相同的数据。<br>同一时间：0.000 几秒左右</li><li>并发会产生那些问题？<ul><li>脏读</li><li>不可重复读</li><li>幻影读</li></ul></li><li><strong>并发问题如何解决？</strong><br>通过隔离属性解决，隔离属性中设置不同过的值，解决并发处理的过程中的问题。</li></ol><h3 id="事务并发产生的问题："><a href="#事务并发产生的问题：" class="headerlink" title="事务并发产生的问题："></a>事务并发产生的问题：</h3><ul><li><strong>脏读</strong><br>一个事务，读取了另一个事务中没有提交的数据，会在本事务中产生数据不一样的现象<br>解决方案：<strong><code>@Transactional(isolation=Isolation.READ_COMMITTED)</code></strong></li><li><strong>不可重复读</strong><br>一个事务中，多次读取相同的数据，但是读取结果不一样，会在本事务中产生数据不一样的现象<br><strong>注意：1.不是脏读 2.在一个事务中</strong><br>解决方案：<strong><code>@Transactional(isolation=Isolation.REPEATABLE_READ)</code></strong><br>本质：<strong>一把行锁（对数据库表的某一行加锁）</strong></li><li><strong>幻影读</strong><br>一个事务中，多次对<strong>整表</strong>进行<strong>查询统计</strong>，但是<strong>结果不一样</strong>，会在本事务中产生数据不一致的问题<br>解决方案：<strong><code>@Transactional(isolation=Isolation.SERIALIZABLE)</code></strong><br>本质：<strong>表锁（对数据库某个表加锁）</strong></li></ul><p><strong>安全与效率对比：</strong></p><ul><li>并发安全：<strong><code>READ_COMMITTED</code> &lt; <code>READ_ONLY</code> &lt; <code>SERIALIZABLE</code></strong></li><li>运行效率：<strong><code>READ_COMMITTED</code> &gt; <code>READ_ONLY</code> &gt; <code>SERIALIZABLE</code></strong></li></ul><p><strong>数据库对隔离属性的支持：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">隔离属性的值</th><th style="text-align:center">MySQL</th><th style="text-align:center">Oracle</th></tr></thead><tbody><tr><td style="text-align:center"><code>ISOLATION_READ_COMMITTED</code></td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center"><code>ISOLATION_REPEATABLE_READ</code></td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center"><code>ISOLATION_SERIALIZABLE</code></td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr></tbody></table></div><p>Oracle 不支持 <code>REPEATABLE_READ</code>，那该如何解决不可重复读？</p><p>采用 <strong>多版本比对</strong> 的方式解决不可重复读问题。</p><p><strong>默认的隔离属性</strong>：</p><ul><li>Spring 会指定为 <code>ISOLATION_DEFAULT</code>，调用不同数据库所设置的默认隔离属性<br>MySQL：<code>REPEATABLE_READ</code><br>Oracle：<code>READ_COMMITTED</code></li><li>查看数据库的默认隔离属性：<br>MySQL：<code>SELECT @@tx_isolation;</code><br>Oracle：较麻烦，建议百度。</li></ul><p><strong>隔离属性在实验中的建议</strong>：</p><ul><li>推荐使用 Spring 默认指定的 <code>ISOLATION_DEFAULT</code></li><li>未来的实战中，遇到并发访问的情况，很少见</li><li>如果真的遇到并发问题，解决方案：<strong>乐观锁</strong><br>Hibernate(JPA)：version<br>MyBatis：通过拦截器自定义开发</li></ul><h2 id="传播属性（PROPAGATION）"><a href="#传播属性（PROPAGATION）" class="headerlink" title="传播属性（PROPAGATION）"></a>传播属性（PROPAGATION）</h2><ul><li><p>概念：描述了事务解决 <strong>嵌套 问题</strong> 的特征。</p><p><strong>事务的嵌套</strong>：指的是一个大的事务中，包含了若干个小的事务。</p><p><strong>事务嵌套产生的问题</strong>： 大事务中融入了很多小的事务，他们彼此影响，最终就导致外部大的事务丧失了事务的原子性。</p></li><li><p>传播属性的值及其用法：</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">传播属性的值</th><th style="text-align:center">外部不存在事务</th><th style="text-align:center">外部存在事务</th><th style="text-align:center">用法</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>REQUIRED</strong></td><td style="text-align:center">开启新的事务</td><td style="text-align:center">融合到外部事务中</td><td style="text-align:center"><strong><code>@Transactional(propagation = Propagation.REQUIRED)</code></strong></td><td style="text-align:center">增、删、改方法</td></tr><tr><td style="text-align:center"><strong>SUPPORTS</strong></td><td style="text-align:center">不开启事务</td><td style="text-align:center">融合到外部事务中</td><td style="text-align:center"><strong><code>@Transactional(propagation = Propagation.SUPPORTS)</code></strong></td><td style="text-align:center">查询方法</td></tr><tr><td style="text-align:center">REQUIRES_NEW</td><td style="text-align:center">开启新的事务</td><td style="text-align:center">挂起外部事务，创建新的事务</td><td style="text-align:center"><strong><code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code></strong></td><td style="text-align:center">日志记录方法中</td></tr><tr><td style="text-align:center">NOT_SUPPORTED</td><td style="text-align:center">不开启事务</td><td style="text-align:center">挂起外部事务</td><td style="text-align:center"><strong><code>@Transactional(propagation = Propagation.NOT_SUPPORTED)</code></strong></td><td style="text-align:center">极其不常用</td></tr><tr><td style="text-align:center">NEVER</td><td style="text-align:center">不开启事务</td><td style="text-align:center">抛出异常</td><td style="text-align:center"><strong><code>@Transactional(propagation = Propagation.NEVER)</code></strong></td><td style="text-align:center">极其不常用</td></tr><tr><td style="text-align:center">MANDATORY</td><td style="text-align:center">抛出异常</td><td style="text-align:center">融合到外部事物中</td><td style="text-align:center"><strong><code>@Transactional(propagation = Propagation.MANDATORY)</code></strong></td><td style="text-align:center">极其不常用</td></tr></tbody></table></div><p>Spring 中<strong>传播属性的默认值</strong>是：REQUIRED</p><p>推荐传播属性的使用方式：</p><ul><li><strong>增删改</strong> 方法：使用默认值 REQUIRED</li><li><strong>查询</strong> 方法：显示指定传播属性的值为 SUPPORTS</li></ul><h2 id="只读属性（readOnly）"><a href="#只读属性（readOnly）" class="headerlink" title="只读属性（readOnly）"></a>只读属性（readOnly）</h2><p>针对于 <strong>只进行查询操作的业务方法</strong>，可以加入只读属性，提高运行效率。</p><p>默认值：<code>false</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><h2 id="超时属性（timeout）"><a href="#超时属性（timeout）" class="headerlink" title="超时属性（timeout）"></a>超时属性（timeout）</h2><p>指定了事务等待的最长时间。</p><ol><li><p>为什么事务会进行等待？</p><p>当前事务访问数据时，有可能访问的数据被别的事务进行加锁的处理，那么此时本事务就必须进行等待。</p></li><li><p>等待时间，单位是 <strong>秒</strong></p></li><li><p>如何使用：<strong><code>@Transactional(timeout = 2)</code></strong></p></li><li><p><strong>超时属性的默认值：-1</strong></p><p><strong>-1 表示超时属性由对应的数据库来指定（一般不会主动指定，-1 即可）</strong></p></li></ol><h2 id="异常属性"><a href="#异常属性" class="headerlink" title="异常属性"></a>异常属性</h2><p>Spring 事务处理过程中：</p><ul><li>默认对于 <strong><code>RuntimeException</code></strong> 及其子类，采用 <strong>回滚</strong> 的策略。</li><li>默认对于 <strong><code>Exception</code></strong> 及其子类，采用 <strong>提交</strong> 的策略。</li></ul><p>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(rollbackFor = java.lang.Exception.class, xxx, xxx)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(noRollbackFor = java.lang.RuntimeException, xxx, xxx)</span><br></pre></td></tr></table></figure><p>建议：实战中使用 <strong><code>RuntimeException</code></strong> 及其子类，使用事务异常属性的默认值。</p><h2 id="事务属性常见配置总结"><a href="#事务属性常见配置总结" class="headerlink" title="事务属性常见配置总结"></a>事务属性常见配置总结</h2><ol><li>隔离属性 默认值</li><li>传播属性 <strong><code>Required</code></strong>（默认值）增删改、<strong><code>Supports</code></strong> 查询操作</li><li>只读属性 <strong><code>readOnly=false</code></strong> 增删改，<strong><code>true</code></strong> 查询操作</li><li>超时属性 默认值 -1</li><li>异常属性 默认值</li></ol><p><strong>增删改操作：<code>@Transactional</code></strong></p><p><strong>查询操作：<code>@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)</code></strong></p><h1 id="基于标签的事务配置方式-事务开发的第二种方式"><a href="#基于标签的事务配置方式-事务开发的第二种方式" class="headerlink" title="基于标签的事务配置方式(事务开发的第二种方式)"></a>基于标签的事务配置方式(事务开发的第二种方式)</h1><p><strong>基于标签的事务配置：(不推荐)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--DataSourceTransactionManager--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"register"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.Cro.service.UserServiceImpl.register(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基于标签的事务配置在 <strong>实战</strong> 中的应用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"register"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"modify*"</span>/&gt;</span></span><br><span class="line">        编程时候, service中负责进行增删改操作的方法 都以 modify 开头</span><br><span class="line">        查询操作 命名无所谓</span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.Cro.service..*.*(..))"</span>/&gt;</span></span><br><span class="line">    应用的过程中, 将 service 都放到 service 包下</span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是事务？&quot;&gt;&lt;a href=&quot;#什么是事务？&quot; class=&quot;headerlink&quot; title=&quot;什么是事务？&quot;&gt;&lt;/a&gt;什么是事务？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;事务时保证业务操作完整性的一种&lt;strong&gt;数据库机制&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring5.X" scheme="http://yoursite.com/tags/Spring5-X/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合Mybatis</title>
    <link href="http://yoursite.com/2020/08/06/Spring%E6%95%B4%E5%90%88Mybatis/"/>
    <id>http://yoursite.com/2020/08/06/Spring整合Mybatis/</id>
    <published>2020-08-06T08:47:41.000Z</published>
    <updated>2020-08-09T05:55:17.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持久层整合"><a href="#持久层整合" class="headerlink" title="持久层整合"></a>持久层整合</h1><p>1、Spring 框架为什么要与持久层技术进行整合？</p><ul><li>JavaEE开发需要持久层进行数据库的访问操作</li><li>JDBC、Hibernate、MyBatis 进行持久开发过程存在大量的代码冗余</li><li>Spring 基于模板设计模式对于上述的持久层技术进行了封装</li></ul><p>2、Spring 可以与哪些持久层技术进行整合？</p><ul><li>JDBC —— <strong><code>JDBCTemplate</code></strong></li><li>Hibernate（JPA）—— <strong><code>HibernateTemplate</code></strong></li><li><strong>MyBatis</strong> —— <strong><code>SqlSessionFactoryBean</code>、<code>MapperScannerConfigure</code></strong></li></ul><h1 id="Mybatis-开发步骤回顾"><a href="#Mybatis-开发步骤回顾" class="headerlink" title="Mybatis 开发步骤回顾"></a>Mybatis 开发步骤回顾</h1><p>① 实体类 <code>User</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get set方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 实体别名 <strong><code>mybatis-config.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Confi 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.Cro.mybatis.User"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③ 表 <strong><code>t_users</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_users <span class="keyword">values</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">12</span>),</span><br><span class="line">    <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">12</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>④ 创建 DAO 接口：<strong><code>UserDAO</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤ 实现Mapper文件：<strong><code>UserDAOMapper.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.Cro.mybatis.UserDAO"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        insert into t_users(name, password) values (#&#123;name&#125;, #&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑥ 注册 Mapper 文件 <strong><code>mybatis-config.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"UserDAOMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑦ MybatisAPI 调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        UserDAO userDAO = session.getMapper(UserDAO.class);</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"xiaoxiao"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        userDAO.save(user);</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis-开发中存在的问题"><a href="#Mybatis-开发中存在的问题" class="headerlink" title="Mybatis 开发中存在的问题"></a>Mybatis 开发中存在的问题</h2><p>问题：配置繁琐、代码冗余</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>实体</span><br><span class="line"><span class="bullet">2. </span>实体别名            配置繁琐</span><br><span class="line"><span class="bullet">3. </span>表</span><br><span class="line"><span class="bullet">4. </span>创建 DAO 接口</span><br><span class="line"><span class="bullet">5. </span>实现 Mapper 文件</span><br><span class="line"><span class="bullet">6. </span>注册 Mapper 文件    配置繁琐</span><br><span class="line"><span class="bullet">7. </span>Mybatis API 调用   代码冗余</span><br></pre></td></tr></table></figure><h1 id="Spring-与-Mybatis-整合思路"><a href="#Spring-与-Mybatis-整合思路" class="headerlink" title="Spring 与 Mybatis 整合思路"></a>Spring 与 Mybatis 整合思路</h1><p><img src="/2020/08/06/Spring整合Mybatis/1.png" alt></p><h1 id="Spring-与-Mybatis-整合的开发步骤"><a href="#Spring-与-Mybatis-整合的开发步骤" class="headerlink" title="Spring 与 Mybatis 整合的开发步骤"></a>Spring 与 Mybatis 整合的开发步骤</h1><ul><li><p>配置文件（ApplicationContext.xml）进行相关配置（<strong>只需要配置一次</strong>）</p></li><li><p>编码</p><p>1.实体类</p><p>2.表</p><p>3.创建DAO接口</p><p>4.Mapper文件配置</p></li></ul><h1 id="Spring-与-Mybatis-整合的编码"><a href="#Spring-与-Mybatis-整合的编码" class="headerlink" title="Spring 与 Mybatis 整合的编码"></a>Spring 与 Mybatis 整合的编码</h1><h2 id="搭建开发环境-pom-xml"><a href="#搭建开发环境-pom-xml" class="headerlink" title="搭建开发环境 pom.xml"></a>搭建开发环境 pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-配置文件的配置"><a href="#Spring-配置文件的配置" class="headerlink" title="Spring 配置文件的配置"></a>Spring 配置文件的配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建SqlSessionFactory SqlSessionFactoryBean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定实体类所在的包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.Cro.entity"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定配置文件（映射文件）的路径，还有通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:com.Cro.dao/*Mapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建DAO对象 MapperScannerConfigure--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定DAO接口放置的包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.Cro.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注意 MapperScannerConfigurer这种方式不推荐使用。</span><br><span class="line">可以看下官网的话：在 MyBatis-Spring 1.0.2 之前，sqlSessionFactoryBean 和 sqlSessionTemplateBean 属性是唯一可用的属性。</span><br><span class="line">但由于 MapperScannerConfigurer 在启动过程中比 PropertyPlaceholderConfigurer 运行得更早，经常会产生错误。</span><br><span class="line">基于这个原因，上述的属性已被废弃，现在建议使用 sqlSessionFactoryBeanName 和sqlSessionTemplateBeanName 属性。</span><br></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>① 实体 <strong><code>com.Cro.entity.User</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">// get set...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 表 <strong><code>t_user</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_users <span class="keyword">values</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">12</span>),</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">12</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>③ DAO接口 <strong><code>com.Cro.dao.UserDAO</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④ Mapper文件配置 <strong><code>UserDAOMapper.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    insert into t_user (name,password) values (#&#123;name&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑤ 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于测试: Spring 与 Mybatis 的整合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/applicationContext.xml"</span>);</span><br><span class="line">    UserDAO userDAO = (UserDAO) ctx.getBean(<span class="string">"userDAO"</span>);</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"xiaojr"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"999999"</span>);</span><br><span class="line"></span><br><span class="line">    userDAO.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-与-Mybatis-整合细节"><a href="#Spring-与-Mybatis-整合细节" class="headerlink" title="Spring 与 Mybatis 整合细节"></a>Spring 与 Mybatis 整合细节</h1><p>问题：Spring 与 Myabatis 整合后，为什么 DAO 不提交事务，但是数据能够插入数据库中？</p><ol><li>Mybatis 提供的连接池对象 —&gt; 创建 <strong><code>Connection</code><br><code>Connection.setAutoCommit(false)</code></strong> 手工的控制了事务，操作完成后，需要手工提交。</li><li>Druid（C3P0、DBCP）作为连接池 —&gt; 创建 <strong><code>Connection</code><br><code>Connection.setAutoCommit(true)</code></strong> 默认值为 <strong><code>true</code></strong>，保持自动控制事务，一条 sql 自动提交。</li></ol><p>答案：因为 Spring 与 Mybatis 整合时，引入了外部连接池对象，保持自动的事务提交这个机制<strong><code>Connection.setAutoCommit(true)</code></strong>，不需要手工进行事务的操作，也能进行事务的提交。</p><p>注意：实战中，还是会手工控制事务（多条SQL一起成功，一起失败），后续 Spring 通过 <strong>事务控制</strong> 解决这个问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;持久层整合&quot;&gt;&lt;a href=&quot;#持久层整合&quot; class=&quot;headerlink&quot; title=&quot;持久层整合&quot;&gt;&lt;/a&gt;持久层整合&lt;/h1&gt;&lt;p&gt;1、Spring 框架为什么要与持久层技术进行整合？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaEE开发需要持久层进行数据库
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring5.X" scheme="http://yoursite.com/tags/Spring5-X/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring-AOP</title>
    <link href="http://yoursite.com/2020/08/05/Spring-AOP/"/>
    <id>http://yoursite.com/2020/08/05/Spring-AOP/</id>
    <published>2020-08-05T15:26:36.000Z</published>
    <updated>2020-08-09T05:55:57.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后置处理-Bean"><a href="#后置处理-Bean" class="headerlink" title="后置处理 Bean"></a>后置处理 Bean</h1><p>BeanPostProcessor 作用：对 Spring 工厂所创建的对象，进行再加工。<strong>（AOP 的底层实现）</strong></p><h2 id="后置处理-Bean-原理分析"><a href="#后置处理-Bean-原理分析" class="headerlink" title="后置处理 Bean 原理分析"></a>后置处理 Bean 原理分析</h2><p><img src="/2020/08/05/Spring-AOP/1.png" alt></p><p><strong>实现 <code>BeanPostProcessor</code> 接口中规定的两个方法：</strong></p><ul><li><p>作用：Spring <strong>创建完对象，并进行注入后</strong>，可以运行 <strong><code>Before</code></strong> ⽅法进行加工；<strong>（初始化前）</strong></p><p>通过方法的参数获得 Spring 创建好的对象，最终通过返回值交给 Spring 框架。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>作⽤：Spring <strong>执行完对象的初始化操作后</strong>，可以运行 <strong><code>After</code></strong> ⽅法进行加工；<strong>（初始化后）</strong></p><p>通过方法的参数获得 Spring 创建好的对象，最终通过返回值交给 Spring 框架。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实战中：很少处理 Spring 的初始化操作，没有必要区分 <code>Before</code>，<code>After</code>。只需要实现其中一个，建议是 <code>After</code> 方法即可。</strong></p><p><strong>注意：只实现其中一个 <code>After</code>方法 <code>Before</code> 要返回一个空实现 <code>return bean</code>对象</strong></p><h2 id="BeanPostProcessor-开发步骤"><a href="#BeanPostProcessor-开发步骤" class="headerlink" title="BeanPostProcessor 开发步骤"></a>BeanPostProcessor 开发步骤</h2><ul><li>类 实现 <strong><code>BeanPostProcessor</code></strong> 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        Category category = (Category) bean;</span><br><span class="line">        category.setName(<span class="string">"xiaoxiao"</span>);</span><br><span class="line">        <span class="keyword">return</span> category;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spring 配置文件中进行配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"com.Cro.beanpost.MyBeanPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>细节</strong>：BeanPostProcessor 会对 Spring 工厂创建的<strong>所有对象</strong>进行加工。如果工厂创建了多个不同的对象，要注意区别传入的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span>  Category) &#123;</span><br><span class="line">        Category category = (Category) bean;</span><br><span class="line">        category.setName(<span class="string">"xiaoxiao"</span>);</span><br><span class="line">        <span class="keyword">return</span> category;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="静态代理设计模式"><a href="#静态代理设计模式" class="headerlink" title="静态代理设计模式"></a>静态代理设计模式</h1><h2 id="为什么需要代理设计模式"><a href="#为什么需要代理设计模式" class="headerlink" title="为什么需要代理设计模式"></a>为什么需要代理设计模式</h2><p>问题：在 JavaEE 分层开发开发中，哪个层次（<strong>DAO、Service、Controller</strong>）对于我们来讲最重要？<strong>Service 层</strong></p><p><strong>Service 层中包含了哪些代码？</strong></p><ul><li><strong>核心功能</strong>（代码量较多）：业务运算，DAO 调用</li><li><strong>额外功能</strong>（附加功能，不属于业务，可有可无，代码量小）：事务、日志、性能 …</li></ul><p><strong>额外功能书写在 Service 层好不好?</strong></p><ul><li>Service 层的调用者的角度（Controller)：需要在 Service 层书写额外功能。</li><li>软件设计者：Service 层不需要额外功能。</li></ul><p>拿现实生活中的例子来做对比，解决方案是 <strong>引入一个代理</strong>。</p><p><img src="/2020/08/05/Spring-AOP/2.png" alt></p><h2 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h2><p>概念：通过代理类，为原始类（⽬标类）增加额外的功能</p><p>好处：利于原始类（目标类）的维护</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>目标类 / 原始类</strong>：指的是 <strong>业务类</strong> (核心功能 —&gt; 业务运算、DAO调用)</p><p><strong>目标方法 / 原始方法</strong>：目标类（原始类）中的方法就是目标方法（原始方法）</p><p><strong>额外功能 / 附加功能</strong>：日志、事务、性能 …</p><h3 id="代理开发的核心要素"><a href="#代理开发的核心要素" class="headerlink" title="代理开发的核心要素"></a>代理开发的核心要素</h3><p>代理类 = <strong>目标类(原始类) + 额外功能</strong> + 原始类(目标类)实现相同的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">房东 ---&gt; 目标类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    m1</span><br><span class="line">    m2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> UserServiceImpl implements UserServiceImpl &#123;</span><br><span class="line">    m1 ---&gt; 业务运算、调用DAO</span><br><span class="line">    m2 </span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------</span><br><span class="line">中介 --- 代理类：要实现目标类相同的接口</span><br><span class="line">    <span class="keyword">public</span> UserServiceProxy implements UserService &#123;</span><br><span class="line">    m1</span><br><span class="line">    m2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态代理编码"><a href="#静态代理编码" class="headerlink" title="静态代理编码"></a>静态代理编码</h3><p><strong>静态代理：为每⼀个原始类，手工编写⼀个代理类</strong>（.java .class）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserServiceImpl.register 业务运算 + DAO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserServiceImpl.login 业务运算 + DAO"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态代理类编码实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123; <span class="comment">// 实现原始类相同的接口</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserServiceImpl(); <span class="comment">// 代理类中必须有原始类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---log---"</span>); <span class="comment">// 额外功能</span></span><br><span class="line">        userService.register(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---log---"</span>); <span class="comment">// 额外功能</span></span><br><span class="line">        <span class="keyword">return</span> userService.login(name, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态代理存在的问题"><a href="#静态代理存在的问题" class="headerlink" title="静态代理存在的问题"></a>静态代理存在的问题</h3><ol><li><p><strong>静态类文件数量过多，不利于项目管理</strong></p><p><strong><code>UserServiceImpl</code>、<code>UserServiceProxy</code></strong></p><p><strong><code>OrderServiceImpl</code>、<code>OrderServiceProxy</code></strong><br><strong>…</strong></p></li><li><p><strong>额外功能维护性差</strong>：在代理类中修改额外功能较为麻烦</p></li></ol><h1 id="动态代理开发"><a href="#动态代理开发" class="headerlink" title="动态代理开发"></a>动态代理开发</h1><p>概念：通过代理类为原始类（目标类）增加额外功能</p><p>好处：利于原始类（目标类）的维护</p><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-动态代理的开发步骤-4步"><a href="#Spring-动态代理的开发步骤-4步" class="headerlink" title="Spring 动态代理的开发步骤(4步)"></a>Spring 动态代理的开发步骤(4步)</h2><p><img src="/2020/08/05/Spring-AOP/4.png" alt></p><p>① 创建原始对象（目标对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserServiceImpl.register 业务运算 + DAO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserServiceImpl.login 业务运算 + DAO"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 额外功能 <strong><code>MethodBeforeAdvice</code></strong> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Before</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作用: 把需要运行在原始方法执行之前运行的额外功能, 书写在 before 方法中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---method before advice log---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 额外功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"before"</span> <span class="attr">class</span>=<span class="string">"com.Cro.aop.Before"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>③ 定义 <strong>切入点</strong>：额外功能的加入</p><p>⽬的: 由程序员根据⾃⼰的需要，决定额外功能加入给哪个原始方法(register、login)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--切入点:额外功能的加入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--⽬的: 由程序员根据⾃⼰的需要，决定额外功能加入给哪个原始方法(register、login)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简单的测试：所有方法都作为切入点，都加入额外的功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* * (..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④ 组装（②、③ 整合）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.aop.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 额外功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"before"</span> <span class="attr">class</span>=<span class="string">"com.Cro.aop.Before"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* * (..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表达的含义: 所有的方法 都加入before的额外功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑤ 调用</p><p>目的：获得 Spring 工厂创建的动态代理对象，并进行调用</p><p>注意：</p><ul><li><strong>Spring 的工厂通过原始对象的 id 值获得的是代理对象</strong></li><li>获得代理对象后，可以通过声明接口类型，进行对象的存储</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于测试动态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/applicationContext.xml"</span>);</span><br><span class="line">    UserService userService = (UserService) ctx.getBean(<span class="string">"userService"</span>);</span><br><span class="line">    userService.login(<span class="string">"admin"</span>, <span class="string">"1234"</span>);</span><br><span class="line">    userService.register(<span class="keyword">new</span> User());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理细节分析"><a href="#动态代理细节分析" class="headerlink" title="动态代理细节分析"></a>动态代理细节分析</h2><p>① Spring 创建的动态代理类在哪里？</p><ul><li>Spring 框架在运行时，通过动态字节码技术，在 JVM 创建的，运行在 JVM 内部，等程序结束后，会和 JVM 一起消失。</li></ul><p>什么是 <strong>动态字节码技术</strong>？</p><ul><li>通过<strong>第三方动态字节码框架</strong>，在 JVM 中创建对应类的字节码，进而创建对象，当虚拟机结束，动态字节码跟着消失。</li></ul><p>结论：</p><ul><li><strong>动态代理不需要定义类文件，都是 JVM 运行过程中动态创建的</strong>；所以不会造成静态代理的缺点：类⽂件数量过多，影响项目管理的问题。</li></ul><p><img src="/2020/08/05/Spring-AOP/3.png" alt></p><p>② 动态代理编程简化代理的开发</p><ul><li>在额外功能不改变的前提下，创建其他目标类（原始类）的代理对象时，只需要指定原始（目标）对象即可。</li></ul><p>③ 动态代理使得 <strong>额外功能的维护性大大增强</strong>。</p><h1 id="额外功能的详解"><a href="#额外功能的详解" class="headerlink" title="额外功能的详解"></a>额外功能的详解</h1><h2 id="MethodBeforeAdvice-分析"><a href="#MethodBeforeAdvice-分析" class="headerlink" title="MethodBeforeAdvice 分析"></a>MethodBeforeAdvice 分析</h2><ol><li><p><strong><code>MethodBeforeAdvice</code></strong> 接口作用：额外功能运行在原始方法执行之前，进行额外功能操作。</p></li><li><p><strong><code>before</code></strong> 方法的 <strong>3 个参数在实战中</strong>，该如何使用？<strong>(基本用不到)</strong></p><p><strong><code>before</code></strong> 方法的参数，在实战中，会根据需要进行使用，不⼀定都会用到，也有可能都不用。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Before</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作用: 把需要运行在原始方法执行之前运行的额外功能, 书写在 before 方法中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Method: 额外功能所增加给的那个原始方法</span></span><br><span class="line"><span class="comment">     *                          1. login</span></span><br><span class="line"><span class="comment">     *                          2. register</span></span><br><span class="line"><span class="comment">     *                          --------</span></span><br><span class="line"><span class="comment">     *                          showOrder</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Object[]:  额外功能所增加给的那个原始方法的参数</span></span><br><span class="line"><span class="comment">     *                          1. String name,String password</span></span><br><span class="line"><span class="comment">     *                          2. User</span></span><br><span class="line"><span class="comment">     *                          --------</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Object: 额外功能所增加给的那个原始对象</span></span><br><span class="line"><span class="comment">     *                          1、2 UserServiceImpl</span></span><br><span class="line"><span class="comment">     *                          ---------------</span></span><br><span class="line"><span class="comment">     *                          OrderServiceImpl</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---new method before advice log---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MethodInterceptor（方法拦截器）"><a href="#MethodInterceptor（方法拦截器）" class="headerlink" title="MethodInterceptor（方法拦截器）"></a>MethodInterceptor（方法拦截器）</h2><ol><li><p>功能比 <strong><code>MethodBeforeAdvice</code></strong> 强</p></li><li><p><strong><code>methodinterceptor</code></strong> 接口：额外功能可以根据需要运行在原始方法执行 <strong>前、后、前后</strong>。</p><ul><li><p>参数：<strong><code>MethodInvocation</code></strong>：额外功能所增加给的那个原始方法 (login, register)</p></li><li><p>返回值：<strong><code>Object</code></strong>：原始方法的返回值 (没有就返回 null)</p></li><li><p><strong><code>invocation.proceed()</code></strong>：原始方法运行 <strong>(执行自己的业务)</strong></p></li></ul></li></ol><p>额外功能运行在原始方法 <strong>之前</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Around</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"---额外功能运行在原始方法执行之前---"</span>);</span><br><span class="line">        </span><br><span class="line">        Object ret = invocation.proceed(); <span class="comment">// 原始方法运行, 获取原始方法的返回值</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额外功能运行在原始方法 <strong>之后</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Around</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Object ret = invocation.proceed(); <span class="comment">// 原始方法运行, 获取原始方法的返回值</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"---额外功能运行在原始方法执行之后---"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额外功能运行在原始方法 <strong>之前、之后</strong>：</p><p><strong>什么样的额外功能 运行在原始方法执行之前、之后都要添加？（事务）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Around</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"---额外功能运行在原始方法执行之前---"</span>);</span><br><span class="line">        </span><br><span class="line">        Object ret = invocation.proceed(); <span class="comment">// 原始方法运行, 获取原始方法的返回值</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"---额外功能运行在原始方法执行之后---"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额外功能运行在原始方法抛出异常的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Around</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object ret = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ret = invocation.proceed(); <span class="comment">// 原始方法运行, 获取原始方法的返回值</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">"---额外功能运行在原始方法抛异常的时候---"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>MethodInterceptor</code></strong> 影响原始方法的返回值：</p><p>原始方法的返回值，直接作为<strong><code>invoke</code></strong>方法的返回值返回，<strong><code>MethodInterceptor</code></strong>不会影响原始方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Around</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---log---"</span>);</span><br><span class="line">        Object ret = invocation.proceed();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="切入点详解"><a href="#切入点详解" class="headerlink" title="切入点详解"></a>切入点详解</h1><p>切入点决定额外功能加入位置（方法）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--execution(* * (..)) 匹配了所有方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* * (..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>execution()</code>：切入点函数</strong></li><li><strong><code>* *(..)</code>：切入点表达式</strong></li></ul><h2 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h2><h3 id="方法切入点"><a href="#方法切入点" class="headerlink" title="方法切入点"></a>方法切入点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">定义一个方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> add（<span class="keyword">int</span> i, <span class="keyword">int</span> j）</span><br><span class="line">        *    *      (..)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>* (..)    --&gt; 所有方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">*  </span>---&gt;  修饰符 返回值</span><br><span class="line"><span class="bullet">*  </span>---&gt;  方法名</span><br><span class="line">() ---&gt;  参数表</span><br><span class="line">.. ---&gt;  对于参数没有要求 (参数有没有，参数有⼏个都行，参数是什么类型的都行)</span><br></pre></td></tr></table></figure><p><img src="/2020/08/05/Spring-AOP/5.png" alt></p><ul><li>定义 <code>login</code> 和 <code>register</code>方法作为切入点：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义login作为切入点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* login (..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义register作为切入点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* register (..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义方法名为 <code>login</code> 且 <strong>有两个字符串类型的参数</strong> 作为切入点；</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* login (String,String))"</span>/&gt;</span><span class="tag">&lt;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">&lt;!-- ⾮ java.lang java.lang 包中的类型, 必须要写全限定名 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* register (com.Cro.a.UserServiceImpl))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  ..可以和具体的参数类型连用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* login(String, ..))"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- === login(String), login(String,String), login(String,com.Cro.a.UserServiceImpl) --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>精准方法切入点限定</li></ul><p><img src="/2020/08/05/Spring-AOP/6.png" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.Cro.a.UserServiceImpl.login(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.Cro.a.UserServiceImpl.login(String, String))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类切入点"><a href="#类切入点" class="headerlink" title="类切入点"></a>类切入点</h3><p>指定 <strong>特定类作为切入点(额外功能加入的位置)</strong>，这个类中的所有方法，都会加上对应的额外功能。</p><ul><li>语法1</li></ul><p><img src="/2020/08/05/Spring-AOP/7.png" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 类中所有的方法加入了额外功能</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.Cro.a.UserServiceImpl.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>语法2</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 忽略包</span><br><span class="line">1. 类只存在一级包</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* *.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">2. 类存在多级包</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* *..UserServiceImpl.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="包切入点（实战中用的多）"><a href="#包切入点（实战中用的多）" class="headerlink" title="包切入点（实战中用的多）"></a>包切入点（实战中用的多）</h3><p>指定<strong>包作为额外功能加入的位置</strong>，自然包中的所有类及其方法都会加入额外的功能。</p><ul><li>语法1：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 切入点包中的所有类，必须在proxy中，不能在proxy包的⼦包中</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.Cro.proxy.*.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>语法2：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 切入点当前包及其⼦包都生效</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.Cro.proxy..*.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="切入点函数（execution、args、within）"><a href="#切入点函数（execution、args、within）" class="headerlink" title="切入点函数（execution、args、within）"></a>切入点函数（execution、args、within）</h2><p>切入点函数：用于执行切入点表达式</p><h3 id="exectuion"><a href="#exectuion" class="headerlink" title="exectuion"></a>exectuion</h3><p><strong><code>execution</code></strong> 是<strong>最为重要的切入点函数</strong>，功能最全；可以执行执行 <strong>方法切入点表达式</strong>、<strong>类切入点表达式</strong>、<strong>包切入点表达式</strong>；<br>弊端：<strong><code>execution</code></strong> 执⾏切入点表达式 ，书写麻烦</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.Cro.proxy..*.*(..))</span><br></pre></td></tr></table></figure><p>注意：其他的 切入点函数 简化的是 <strong><code>execution</code></strong> 的书写复杂度，功能上完全⼀致。</p><h3 id="args"><a href="#args" class="headerlink" title="args"></a>args</h3><p><strong><code>args</code></strong> 作用：主要用于 <strong>函数(方法) 参数的匹配</strong>；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">切入点：方法参数必须得是 2 个字符串类型的参数</span><br><span class="line"></span><br><span class="line"># 使用 execution</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* *(String, String))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"># 使用 args</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"args(String, String)"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="within"><a href="#within" class="headerlink" title="within"></a>within</h3><p><strong><code>within</code></strong> 作用：主要用于进行 <strong>类、包切入点表达式</strong> 的匹配。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">切入点: UserServiceImpl 这个类</span><br><span class="line"></span><br><span class="line"># 使用 execution</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"expression(* *..UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"># 使用 within</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"within(*..UserServiceImpl)"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">切入点: com.Cro.proxy 这个包</span><br><span class="line"></span><br><span class="line"># 使用 execution</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.Cro.proxy..*.*(..)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"># 使用 within</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"within(com.Cro.proxy..*)"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h3><p>作用：为具有<strong>特殊注解</strong>的 <strong>方法</strong> 加入额外功能。</p><p>例如我们自定义了一个注解：<strong><code>Log</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们要为使用了 <strong><code>Log</code></strong>注解的方法加入额外功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"@annotation(com.Cro.Log)"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="切入点函数的逻辑运算（and、or）"><a href="#切入点函数的逻辑运算（and、or）" class="headerlink" title="切入点函数的逻辑运算（and、or）"></a>切入点函数的逻辑运算（and、or）</h3><p>切入点函数的逻辑运算 指的是：整合多个切入点函数⼀起配合工作，进⽽完成更为复杂的需求。</p><p><strong>and 与操作</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 案例: 方法名叫 login 同时 参数是 2个字符串</span><br><span class="line"># execution</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* login(String, String))"</span>/&gt;</span></span><br><span class="line"># execution and args</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* login(..)) and args(String, String))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"># 注意：与操作不同⽤于同种类型的切⼊点函数</span><br><span class="line"># 以下这个是错误的, 因为不存在同时叫 login 和 register 的方法</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* login(..)) and execution(* register(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>or 或操作</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">案例: 方法名叫 register 或 login 的⽅法作为切⼊点</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* login(..)) or execution(* register(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="AOP-编程"><a href="#AOP-编程" class="headerlink" title="AOP 编程"></a>AOP 编程</h1><h2 id="AOP-概念"><a href="#AOP-概念" class="headerlink" title="AOP 概念"></a>AOP 概念</h2><ul><li><p>POP (Producer Oriented Programing）</p><ul><li>面向过程（方法、函数）编程 —— C</li><li>以过程为基本单位的程序开发，通过过程间的彼此协同，相互调用，完成程序的构建。</li></ul></li><li><p>OOP (Object Oritened Programing)</p><ul><li>面向对象编程 —— Java</li><li>以对象为基本单位的程序开发，通过对象间的彼此协同，相互调用，完成程序的构建。</li></ul></li><li><p>AOP (Aspect Oriented Programing)</p><ul><li>面向切面编程 = Spring动态代理开发</li><li>以切面为基本单位的程序开发，通过切面间的彼此协同，相互调用，完成程序的构建。</li><li>切面 = 切入点 + 额外功能</li></ul></li></ul><p><strong>AOP 的概念：</strong></p><ul><li>本质就是 Spring 的动态代理开发，通过代理类为原始类增加额外功能。</li><li>好处：利于原始类的维护</li><li>注意：AOP 编程不可能取代 OOP，AOP 是 OOP 编程的补充。</li></ul><h2 id="AOP-编程的开发步骤"><a href="#AOP-编程的开发步骤" class="headerlink" title="AOP 编程的开发步骤"></a>AOP 编程的开发步骤</h2><ol><li>原始对象</li><li>额外功能 <strong>(<code>MethodInterceptor</code>)</strong></li><li>切入点</li><li>组装切面 (额外功能+切入点)</li></ol><h2 id="切面的名词解释"><a href="#切面的名词解释" class="headerlink" title="切面的名词解释"></a>切面的名词解释</h2><p>切面 = 切入点 + 额外功能</p><p>几何学：面 = 点 + 相同的性质</p><p><img src="/2020/08/05/Spring-AOP/8.png" alt></p><h1 id="AOP-的底层实现原理"><a href="#AOP-的底层实现原理" class="headerlink" title="AOP 的底层实现原理"></a>AOP 的底层实现原理</h1><p><strong>核心问题：</strong></p><ol><li><strong><font color="red">AOP 如何创建动态代理类(动态字节码技术)</font></strong></li><li><strong><font color="red">Spring 工厂如何加工创建代理对象(通过原始对象的 id 值，获得的是代理对象)</font></strong></li></ol><h2 id="动态代理类的创建"><a href="#动态代理类的创建" class="headerlink" title="动态代理类的创建"></a>动态代理类的创建</h2><h3 id="JDK-的动态代理（原理-编码）"><a href="#JDK-的动态代理（原理-编码）" class="headerlink" title="JDK 的动态代理（原理 + 编码）"></a>JDK 的动态代理（原理 + 编码）</h3><ul><li><strong><code>Proxy.newPorxyInstance</code></strong> 方法参数详解</li></ul><p><img src="/2020/08/05/Spring-AOP/9.png" alt></p><p><img src="/2020/08/05/Spring-AOP/10.png" alt></p><ul><li>编码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDKProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     1. 借⽤类加载器  TestJDKProxy 或 UserServiceImpl 都可以</span></span><br><span class="line"><span class="comment">     2. JDK8.x 前必须加 final</span></span><br><span class="line"><span class="comment">     final UserService userService = new UserServiceImpl();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建原始对象</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. JDK 动态代理</span></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"---- proxy log ----"</span>);</span><br><span class="line">                <span class="comment">// 原始方法运行</span></span><br><span class="line">                Object ret = method.invoke(userService, args);</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        UserService userServiceProxy = (UserService) Proxy.newProxyInstance(TestJDKProxy.class.getClassLoader(),</span><br><span class="line">                             userService.getClass().getInterfaces(),</span><br><span class="line">                             handler);</span><br><span class="line">        userServiceProxy.login(<span class="string">"xiaoxiao"</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        userServiceProxy.register(<span class="keyword">new</span> User());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CGlib-的动态代理"><a href="#CGlib-的动态代理" class="headerlink" title="CGlib 的动态代理"></a>CGlib 的动态代理</h3><p>CGlib 创建动态代理的原理：通过<strong>父子继承关系</strong>创建代理对象，原始类作为父类，代理类作为子类，这样既可以保证 2 者方法⼀致，同时在代理类中可以提供新的实现（额外功能+原始方法）。</p><p><img src="/2020/08/05/Spring-AOP/11.png" alt></p><ul><li>CGlib 编码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglib</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建原始对象</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         2. 通过 cglib 方式创建动态代理对象</span></span><br><span class="line"><span class="comment">         对比 jdk 动态代理 ---&gt; Proxy.newProxyInstance(classLoader, interface, invocationHandler);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         Enhancer.setClassLoader()</span></span><br><span class="line"><span class="comment">         Enhancer.setSuperClass()</span></span><br><span class="line"><span class="comment">         Enhancer.setCallBack() ---&gt; MethodInterceptor(cglib)</span></span><br><span class="line"><span class="comment">         Enhancer.createProxy() ---&gt; 创建代理对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"></span><br><span class="line">        enhancer.setClassLoader(TestCglib.class.getClassLoader());</span><br><span class="line">        enhancer.setSuperclass(userService.getClass());</span><br><span class="line"></span><br><span class="line">        MethodInterceptor interceptor = <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"--- cglib log ----"</span>);</span><br><span class="line">                Object ret = method.invoke(userService, args); <span class="comment">// 执行原始方法</span></span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        enhancer.setCallback(interceptor);</span><br><span class="line">        UserService userServiceProxy = (UserService) enhancer.create();</span><br><span class="line">        userServiceProxy.login(<span class="string">"xiaoxiao"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        userServiceProxy.register(<span class="keyword">new</span> User());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>JDK 动态代理<br><strong><code>Proxy.newProxyInstance</code></strong>：通过接口创建代理的实现类</li><li>Cglib 动态代理<br><strong><code>Enhancer</code></strong>：通过继承⽗类创建的代理类</li></ol><h2 id="Spring-工厂如何加工原始对象"><a href="#Spring-工厂如何加工原始对象" class="headerlink" title="Spring 工厂如何加工原始对象"></a>Spring 工厂如何加工原始对象</h2><ul><li>思路分析：主要通过 <strong><code>BeanPostProcessor</code></strong> 将原始对象加工为代理对象</li></ul><p><img src="/2020/08/05/Spring-AOP/12.png" alt></p><ul><li>编码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"--- new log ---"</span>); <span class="comment">// 进行加工</span></span><br><span class="line">                Object ret = method.invoke(bean, args); <span class="comment">// 原始方法</span></span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(ProxyBeanPostProcessor.class.getClassLoader(), bean.getClass().getInterfaces(), handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.factory.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1. 实现 BeanPostProcessor 进行加工--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2. 配置文件中对 BeanPostProcessor 进行配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"com.Cro.factory.ProxyBeanPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基于注解的-AOP-编程的开发"><a href="#基于注解的-AOP-编程的开发" class="headerlink" title="基于注解的 AOP 编程的开发"></a>基于注解的 AOP 编程的开发</h1><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><p>① 原始功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserServiceImpl.register 业务运算 + DAO"</span>);</span><br><span class="line">        <span class="comment">// throw new RuntimeException("测试异常");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserServiceImpl.login 业务运算 + DAO"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>② 额外功能、③ 切入点、④ 组装切面</strong></p><p><strong>②、③、④ 都放在了 <code>MyAspect</code> 类中完成：</strong></p><p><strong>通过<code>@Aspect</code> 切面类</strong></p><ul><li><p><strong>定义了 额外功能 <code>Around</code></strong></p></li><li><p><strong>定义了 切入点     <code>@Around</code></strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 额外功能</span></span><br><span class="line"><span class="comment">        public class MyAround implements MethodInterceptor &#123;</span></span><br><span class="line"><span class="comment">            public Object invoke(MethodInvocation invocation) &#123;</span></span><br><span class="line"><span class="comment">                Object ret = invocation.proceed();</span></span><br><span class="line"><span class="comment">                return ret;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        &lt;bean id="around" class="com.Cro.dynamic.Around"/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2. 切入点</span></span><br><span class="line"><span class="comment">        &lt;aop:config&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:pointcut id="pc" expression="execution(* login(..)))"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:advisor advice-ref="around" pointcut-ref="pc"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/aop:config&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* login(..))"</span>) <span class="comment">//1. 额外功能</span></span><br><span class="line">    <span class="comment">// 2. 切入点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---- aspect log ----"</span>);</span><br><span class="line">        Object ret = joinPoint.proceed();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.aspect.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        切面:</span></span><br><span class="line"><span class="comment">            1. 额外功能</span></span><br><span class="line"><span class="comment">            2. 切入点</span></span><br><span class="line"><span class="comment">            3. 组装切面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"around"</span> <span class="attr">class</span>=<span class="string">"com.Cro.aspect.MyAspect"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--告知 Spring 基于注解进行 AOP 编程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="切入点复用"><a href="#切入点复用" class="headerlink" title="切入点复用"></a>切入点复用</h2><p>切入点复用：在切面类中定义⼀个函数，上面用 <code>@Pointcut</code> 注解。</p><p>通过这种方式定义切入点表达式，后续更加有利于切入点复用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* login(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPoincut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"myPoincut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---- aspect log ----"</span>);</span><br><span class="line">        Object ret = joinPoint.proceed();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"myPoincut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around1</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---- aspect transaction ----"</span>);</span><br><span class="line">        Object ret = joinPoint.proceed();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="切换动态代理的创建方式（JDK、Cglib）"><a href="#切换动态代理的创建方式（JDK、Cglib）" class="headerlink" title="切换动态代理的创建方式（JDK、Cglib）"></a>切换动态代理的创建方式（JDK、Cglib）</h1><p>AOP 底层实现：2 种代理创建方式：</p><ol><li>JDK：通过 <strong>实现接口，做新的实现类</strong> 创建代理对象</li><li>Cglib：通过 <strong>继承父类，做新的子类</strong> 创建代理对象</li></ol><p><strong>默认情况 AOP 编程 底层应用 JDK动态代理创建方式</strong>。</p><ul><li>基于注解的 AOP 开发 中切换为 Cglib：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>传统的 AOP 开发 中切换为 Cglib：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="AOP-开发中的一个坑（业务方法互相调用）"><a href="#AOP-开发中的一个坑（业务方法互相调用）" class="headerlink" title="AOP 开发中的一个坑（业务方法互相调用）"></a>AOP 开发中的一个坑（业务方法互相调用）</h1><p><strong>坑！</strong>：在同⼀个业务类中，进⾏业务方法间的相互调用，只有最外层的方法，才是加入了额外功能(内部的方法，通过普通的方式调用，都调用的是原始方法)。如果想让内层的方法也调用代理对象的方法，就要实现 <strong><code>AppicationContextAware</code></strong> 获得⼯厂，进而获得代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ctx;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        ctx = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserServiceImpl.register 业务运算 + DAO"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this.login("xiaoxiao", "123456"); // 调用原始对象的 login 方法 ---&gt; 核心功能（没有额外功能）</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 为什么不在这里创建一个工厂获取代理对象呢？</span></span><br><span class="line">        <span class="comment">// Spring的工厂是重量级资源, 一个应用中应该只创建一个工厂.</span></span><br><span class="line">        <span class="comment">// 因此通过 ApplicationContextAware 拿到已经创建好的工厂</span></span><br><span class="line">        UserService userService = (UserService) ctx.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService.login(<span class="string">"xiaoxiao"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserServiceImpl.login 业务运算 + DAO"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP-知识总结"><a href="#AOP-知识总结" class="headerlink" title="AOP 知识总结"></a>AOP 知识总结</h1><p><img src="/2020/08/05/Spring-AOP/13.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;后置处理-Bean&quot;&gt;&lt;a href=&quot;#后置处理-Bean&quot; class=&quot;headerlink&quot; title=&quot;后置处理 Bean&quot;&gt;&lt;/a&gt;后置处理 Bean&lt;/h1&gt;&lt;p&gt;BeanPostProcessor 作用：对 Spring 工厂所创建的对象，进行再
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring5.X" scheme="http://yoursite.com/tags/Spring5-X/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring-对象的生命周期</title>
    <link href="http://yoursite.com/2020/08/05/Spring-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2020/08/05/Spring-对象的生命周期/</id>
    <published>2020-08-05T11:20:40.000Z</published>
    <updated>2020-08-09T05:56:57.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h1><p>什么是对象的⽣命周期？</p><ul><li>⼀个对象 <strong>创建、存活、消亡</strong> 的⼀个完整过程。</li></ul><p>为什么要学习对象的⽣命周期？</p><ul><li>由 Spring 负责对象的 <strong>创建、存活、销毁</strong>，了解⽣命周期，有利于我们使用好 Spring 为我们创建的对象。</li></ul><p>⽣命周期的 3 个阶段：</p><ul><li>创建阶段 —&gt; 初始化阶段 —&gt; 销毁阶段</li></ul><h2 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h2><p>Spring 工厂何时创建对象？</p><ul><li><p><strong><code>scope=&quot;prototype&quot;</code></strong>：Spring 工厂会在获取对象 <strong><code>ctx.getBean(&quot;xxx&quot;)</code></strong> 的同时，创建对象。</p></li><li><p><strong><code>scope=&quot;singleton&quot;</code></strong>：Spring 工厂创建的同时，创建对象。</p><p>通过配置 <strong><code>&lt;bean lazy-init=&quot;true&quot;/&gt;</code>(懒加载)</strong> 也可以实现工厂在获取对象 <strong><code>ctx.getBean(&quot;xxx&quot;)</code></strong> 的同时，创建对象。(相当于单例<strong><code>prototype</code></strong>)</p></li></ul><h2 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h2><p>什么时候？Spring 工厂在创建完对象后，调用对象的初始化方法，完成对应的初始化操作。</p><ol><li><p>初始化方法提供：程序员根据需求，提供初始化方法，最终完成初始化操作。</p></li><li><p>初始化方法调用：Spring 工厂进行调用。</p></li></ol><p><strong>提供初始化方法的两种方式：</strong></p><ul><li><strong><code>InitializingBean</code></strong> 接口 <strong><code>afterPropertiesSet()</code></strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"><span class="comment">//程序员根据需求实现的方法, 完成初始化操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Product.afterPropertiesSet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对象中提供一个普通的初始化方法，配置文件种配置 <strong><code>init-method</code></strong>：(遗留系统的解决方案)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Product.myInit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"product"</span> <span class="attr">class</span>=<span class="string">"com.Cro.life.Product"</span> <span class="attr">init-method</span>=<span class="string">"myInit"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>初始化操作的细节分析：</strong></p><ol><li><p>如果⼀个对象既实现 <strong><code>InitializingBean</code></strong> 同时⼜提供的 <strong>普通的初始化方法</strong>，执行顺序?</p><p>先执行 <strong><code>InitializingBean</code></strong>，再执行 普通初始化方法。</p></li><li><p>注入⼀定发生在初始化操作的前面。</p></li><li><p>初始化操作到底是什么？</p><p>资源的初始化：数据库、IO、网络、…</p></li></ol><h2 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h2><p>Spring 销毁对象前，会调用对象的销毁方法，完成销毁操作。</p><p>Spring 什么时候销毁所创建的对象？<strong><code>ctx.close();</code></strong></p><p>销毁方法提供：程序员根据业务需求，定义销毁方法，完成销毁操作</p><p>销毁方法调用：Spring 工厂进行调用。</p><p>开发流程与初始化操作一样，提供销毁方法的两种方式：</p><ul><li><strong><code>DisposableBean</code></strong> 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 程序员根据⾃⼰的需求, 定义销毁方法, 完成销毁操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Product.destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对象中提供一个普通的销毁方法，配置文件种配置 <strong><code>destroy-method</code>：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 程序员根据⾃⼰的需求, 定义销毁方法, 完成销毁操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myDestory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Product.myDestory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"product"</span> <span class="attr">class</span>=<span class="string">"com.Cro.life.Product"</span> <span class="attr">destroy-method</span>=<span class="string">"myDestory"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>销毁阶段细节分析</strong>：</p><ol><li><p>销毁方法的操作只适用于 <strong><code>scope=&quot;singleton&quot;</code></strong>，初始化操作没有这个要求。</p></li><li><p>销毁操作到底是什么？</p><p>资源的释放：<strong><code>io.close()</code>、<code>connection.close()</code>、…</strong></p></li></ol><h2 id="对象的生命周期总结"><a href="#对象的生命周期总结" class="headerlink" title="对象的生命周期总结"></a>对象的生命周期总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Product.setName"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Product() &#123; <span class="comment">// 创建</span></span><br><span class="line">        System.out.println(<span class="string">"Product.Product"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序员根据需求实现的方法, 完成初始化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Product.myInit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序员根据需求实现的方法, 完成初始化操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Product.afterPropertiesSet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myDestory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Product.myDestory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序员根据⾃⼰的需求, 定义销毁方法, 完成销毁操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Product.destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"product"</span> <span class="attr">class</span>=<span class="string">"com.Cro.life.Product"</span> <span class="attr">init-method</span>=<span class="string">"myInit"</span> <span class="attr">destroy-method</span>=<span class="string">"myDestory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"xiaoxiao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/05/Spring-对象的生命周期/1.png" alt></p><h1 id="配置文件参数化"><a href="#配置文件参数化" class="headerlink" title="配置文件参数化"></a>配置文件参数化</h1><p><strong>配置文件参数化</strong>：把 Spring 配置文件中需要经常修改的字符串信息，转移到⼀个更小的配置文件中。</p><ol><li><p>Spring 的配置文件中是否存在需要经常修改的字符串？</p><p>存在：以数据库连接相关的参数…</p></li><li><p>经常变化字符串，在 Spring 的配置文件中，直接修改不利于项目维护（修改）</p></li><li><p><strong>转移到⼀个小的配置文件（.properties）利于维护（修改）</strong></p></li></ol><p>优点：利于 Spring 配置文件的维护（修改）</p><h2 id="配置文件参数的开发步骤"><a href="#配置文件参数的开发步骤" class="headerlink" title="配置文件参数的开发步骤"></a>配置文件参数的开发步骤</h2><ul><li><p><strong>提供⼀个小的配置文件（.properities）</strong></p><p>名字：没有要求</p><p>放置位置：没有要求</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName = com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url = jdbc:mysql://localhost:3306/spring?useSSL=false</span><br><span class="line">jdbc.username = root</span><br><span class="line">jdbc.password = 1234</span><br></pre></td></tr></table></figure><ul><li>Spring 的配置文件与小配置文件进行整合：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring的配置文件与⼩配置文件进行整合--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resources 下的文件在整个程序编译完后会被放到 classpath 目录下，src.main.java中的文件也是--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:/db.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 Spring 配置文件中通过 <strong><code>${key}</code></strong> 获取小配置文件中对应的值：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"com.Cro.factorybean.ConnectionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/05/Spring-对象的生命周期/2.png" alt></p><h1 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h1><h2 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h2><p>作用：Spring 通过 <strong>类型转换器</strong> 把 <strong>配置文件</strong> 中 <strong>字符串</strong> 类型的数据，<strong>转换成了对象中成员变量对应类型的数据</strong>，进而完成了注入。</p><p><img src="/2020/08/05/Spring-对象的生命周期/3.png" alt></p><h2 id="自定义类型转换器-1"><a href="#自定义类型转换器-1" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h2><p>产生原因：当 Spring 内部没有提供特定类型转换器时，而程序员在应用的过程中还需要使用，那么就需要程序员⾃⼰定义类型转换器。<strong>(如:Spring 没有提供 Date 日期转换器)</strong></p><p><strong>[开发步骤]</strong>：</p><ul><li>类 implements Converter 接口<strong>（核心：接口回调）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     convert方法作用: String ---&gt; Date</span></span><br><span class="line"><span class="comment">     SimpleDateFormat sdf = new SimpleDateFormat();</span></span><br><span class="line"><span class="comment">     sdf.parset(String) ---&gt; Date</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     参数:</span></span><br><span class="line"><span class="comment">     source : 代表的是配置文件中, 日期字符串 &lt;value&gt;2020-10-11&lt;/value&gt;</span></span><br><span class="line"><span class="comment">     return : 当把转换好的 Date 作为 convert 方法的返回值后,Spring ⾃动的为birthday属性进行注入（赋值）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">            date = sdf.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在 Spring 的配置文件中进行配置；</p><p>先创建 <code>MyDateConverter</code> 对象，再注册类型转换器；</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring 创建 MyDateConverter 对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDateConverter"</span> <span class="attr">class</span>=<span class="string">"com.Cro.converter.MyDateConverter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--目的：告知Spring框架，我们所创建的MyDateConverter是一个类型转换器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring 为我们提供用于注册类型转换器的类 ConversionServiceFactoryBean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        // set注入</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myDateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.Cro.converter.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"xiaoxiao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"2020-11-11"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义类型转换器细节"><a href="#自定义类型转换器细节" class="headerlink" title="自定义类型转换器细节"></a>自定义类型转换器细节</h2><ul><li><code>MyDateConverter</code> 中的<strong>日期的格式</strong>，通过 <strong>依赖注入</strong> 的方式，由配置文件完成赋值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">            date = sdf.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPattern</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pattern = pattern;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件完成对日期格式的赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDateConverter"</span> <span class="attr">class</span>=<span class="string">"com.Cro.converter.MyDateConverter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>ConversionSeviceFactoryBean</code> </strong>定义 id 属性，值必须是 <strong><code>conversionService</code>；</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myDateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Spring 框架其实内置了日期类型的转换器：日期格式必须是 <code>2020/05/01</code>。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.Cro.converter.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"xiaoxiao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"2020/11/11"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对象的生命周期&quot;&gt;&lt;a href=&quot;#对象的生命周期&quot; class=&quot;headerlink&quot; title=&quot;对象的生命周期&quot;&gt;&lt;/a&gt;对象的生命周期&lt;/h1&gt;&lt;p&gt;什么是对象的⽣命周期？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⼀个对象 &lt;strong&gt;创建、存活、消亡&lt;/st
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring5.X" scheme="http://yoursite.com/tags/Spring5-X/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-IOC</title>
    <link href="http://yoursite.com/2020/08/05/Spring-IOC/"/>
    <id>http://yoursite.com/2020/08/05/Spring-IOC/</id>
    <published>2020-08-05T09:56:01.000Z</published>
    <updated>2020-08-09T05:57:33.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转控制-与-依赖注入"><a href="#反转控制-与-依赖注入" class="headerlink" title="反转控制 与 依赖注入"></a>反转控制 与 依赖注入</h1><h2 id="反转控制（IOC-Inverse-of-Control）"><a href="#反转控制（IOC-Inverse-of-Control）" class="headerlink" title="反转控制（IOC Inverse of Control）"></a>反转控制（IOC Inverse of Control）</h2><p><strong>反转控制</strong>（IOC Inverse of Control)，也称为 <strong>转移控制</strong>。</p><ul><li>控制：对于成员变量赋值的控制权；</li><li>反转控制：<strong>把对于成员变量赋值的控制权，从代码中转移（反转）到 Spring ⼯⼚和配置⽂件中完成。</strong></li><li>好处：解耦合；</li><li>底层实现：工厂设计模式；</li></ul><p><img src="/2020/08/05/Spring-IOC/1.png" alt></p><h2 id="依赖注入-Dependency-Injection-DI"><a href="#依赖注入-Dependency-Injection-DI" class="headerlink" title="依赖注入 (Dependency Injection - DI)"></a>依赖注入 (Dependency Injection - DI)</h2><ul><li>注⼊：<strong>通过 Spring 的⼯⼚及配置⽂件，为对象（bean，组件）的成员变量赋值；</strong></li><li>依赖注⼊：当⼀个类需要另⼀个类时，就意味着依赖，⼀旦出现依赖，就可以把另⼀个类作为本类的成员变量，最终通过 Spring 配置⽂件进⾏注⼊（赋值）。</li><li>好处：解耦合；</li></ul><p><img src="/2020/08/05/Spring-IOC/2.png" alt></p><h2 id="分享Bromon的blog上对IoC与DI浅显易懂的讲解"><a href="#分享Bromon的blog上对IoC与DI浅显易懂的讲解" class="headerlink" title="分享Bromon的blog上对IoC与DI浅显易懂的讲解"></a>分享Bromon的blog上对IoC与DI浅显易懂的讲解</h2><h3 id="IoC-控制反转"><a href="#IoC-控制反转" class="headerlink" title="IoC(控制反转)"></a>IoC(控制反转)</h3><p>　　首先想说说<strong>IoC（Inversion of Control，控制反转）</strong>。这是<strong>spring的核心</strong>，贯穿始终。<strong>所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。</strong>这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。</p><p>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。<strong>Spring所倡导的开发方式</strong>就是如此，<strong>所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</strong></p><h3 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI(依赖注入)"></a>DI(依赖注入)</h3><p>　　<strong>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的</strong>。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p><h1 id="Spring工厂创建复杂对象（3种方式）"><a href="#Spring工厂创建复杂对象（3种方式）" class="headerlink" title="Spring工厂创建复杂对象（3种方式）"></a>Spring工厂创建复杂对象（3种方式）</h1><h2 id="什么是复杂对象"><a href="#什么是复杂对象" class="headerlink" title="什么是复杂对象"></a>什么是复杂对象</h2><p><img src="/2020/08/05/Spring-IOC/3.png" alt></p><p><strong>简单对象</strong>：可以直接通过 new 构造方法创建的对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserService</span><br><span class="line">UserDAO</span><br><span class="line">Customer</span><br><span class="line">Person</span><br></pre></td></tr></table></figure><p><strong>复杂对象</strong>：不能直接通过 new 构造方法创建的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection</span><br><span class="line">SqlSessionFactory</span><br></pre></td></tr></table></figure><h2 id="1-FactoryBean-接口"><a href="#1-FactoryBean-接口" class="headerlink" title="1. FactoryBean 接口"></a>1. FactoryBean 接口</h2><h3 id="实现-FactoryBean-接口："><a href="#实现-FactoryBean-接口：" class="headerlink" title="实现 FactoryBean 接口："></a>实现 FactoryBean 接口：</h3><p><strong>实现 <code>getObject</code>，<code>getObjectType</code>，<code>isSingleton</code> 方法；</strong></p><ul><li><strong><code>getObject()</code>：用于书写创建复杂对象时的代码。</strong></li><li><strong><code>getObjectType()</code>：返回创建的复杂对象的类型。</strong></li><li><strong><code>isSingleton</code>：用于决定是否单例。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Connection</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 用于书写创建复杂对象时的代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/spring"</span>, <span class="string">"root"</span>, <span class="string">"1234"</span>);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回创建的复杂对象的类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;Connection&gt; <span class="title">getObjectType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Connection.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否单例</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 每一次都创建新的复杂对象</span></span><br><span class="line">        <span class="comment">// return true; // 只创建一次这种类型的复杂对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-配置文件的配置："><a href="#Spring-配置文件的配置：" class="headerlink" title="Spring 配置文件的配置："></a>Spring 配置文件的配置：</h3><p>如果 class 中指定的类型是 <strong><code>FactoryBean</code></strong> 接⼝的实现类，那么<strong>通过 id 值获得的是这个类所创建的复杂对象。</strong></p><p>比如下面 class 指定的是 <strong><code>ConnectionFactoryBean</code></strong>，获得的是 <strong><code>Connection</code></strong> 对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--class 指定了 ConnectionFactoryBean, 获得的是该类创建的复杂对象 Connection --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"com.Cro.factorybean.ConnectionFactoryBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="FactoryBean-细节"><a href="#FactoryBean-细节" class="headerlink" title="FactoryBean 细节"></a>FactoryBean 细节</h3><ul><li>如果就想获得 <strong><code>FactoryBean</code></strong>类型的对象，加个 <strong><code>&amp;</code>，<code>ctx.getBean(&quot;&amp;conn&quot;)</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactoryBean cfb = (ConnectionFactoryBean) ctx.getBean(<span class="string">"&amp;conn"</span>);</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>isSingleton</code>（是否单例）</strong> 方法返回 true 只会创建⼀个复杂对象，返回 false 每⼀次都会创建新的对象；</p><p>需要根据这个对象的特点 ，决定是返回 true（<strong><code>SqlSessionFactory</code> </strong>） 还是 false（<strong><code>Connection</code></strong>）；</p></li><li><p>mysql ⾼版本连接创建时，需要制定 SSL 证书，否则会警告；</p><p>解决方案：url = <strong><code>jdbc:mysql://localhost:3306/spring?useSSL=false</code></strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sat May <span class="number">23</span> <span class="number">23</span>:<span class="number">18</span>:<span class="number">04</span> CST <span class="number">2020</span> WARN: Establishing SSL connection without server<span class="string">'s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn'</span>t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to <span class="string">'false'</span>. You need either to explicitly disable SSL by setting useSSL=<span class="keyword">false</span>, or set useSSL=<span class="keyword">true</span> and provide truststore <span class="keyword">for</span> server certificate verification.</span><br></pre></td></tr></table></figure><ul><li>依赖注入（DI）：把 <strong><code>ConnectionFactoryBean</code></strong> 中依赖的 4 个字符串信息 ，通过配置⽂件进行注⼊。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span><span class="meta">@Setter</span> <span class="comment">// 提供 get set 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Connection</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 将依赖的字符串信息变为成员变量, 利用配置文件进行注入。</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(driverClassName);</span><br><span class="line">        Connection conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;Connection&gt; <span class="title">getObjectType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Connection.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--体会依赖注入, 好处: 解耦合, 今后要修改连接数据库的信息只需要修改配置文件, 无需改动代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"com.Cro.factorybean.ConnectionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring?useSSL=false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="FactoryBean-实现原理-简易版"><a href="#FactoryBean-实现原理-简易版" class="headerlink" title="FactoryBean 实现原理[简易版]"></a>FactoryBean 实现原理[简易版]</h3><p>原理：<strong>接口回调</strong>。</p><p>问题：</p><ol><li>为什么 Spring 规定 <strong><code>FactoryBean</code></strong> 接口实现 <strong><code>getObject()</code></strong></li><li>为什么 <strong><code>ctx.getBean(&quot;conn&quot;)</code></strong> 获得的是复杂对象 <strong><code>Connection</code></strong> 而非 <strong><code>ConnectionFactoryBean</code></strong></li></ol><p>Spring 内部运行流程：</p><ol><li>配置文件中通过 id <strong><code>conn</code></strong> 获得 <strong><code>ConnectionFactoryBean</code></strong> 类的对象 ，进而通过 <strong><code>instanceof</code></strong> 判断出是 <strong><code>FactoryBean</code></strong> 接⼝的实现类；</li><li>Spring 按照规定 <strong><code>getObject()</code> —-&gt; <code>Connection</code>；</strong></li><li>返回 <strong><code>Connection</code>；</strong></li></ol><p><img src="/2020/08/05/Spring-IOC/4.png" alt></p><h3 id="FactoryBean-总结"><a href="#FactoryBean-总结" class="headerlink" title="FactoryBean 总结"></a>FactoryBean 总结</h3><p>Spring 中用于创建复杂对象的⼀种方式，也是 Spring <strong>原生提供的</strong>，后续 Spring 整合其他框架时会⼤量应⽤ FactoryBean 方式。</p><h2 id="2-实例工厂"><a href="#2-实例工厂" class="headerlink" title="2. 实例工厂"></a>2. 实例工厂</h2><ol><li><strong>避免 Spring 框架的侵⼊；</strong></li><li><strong>整合遗留系统；</strong></li></ol><p>[开发步骤]：</p><ul><li>ConnectionFactory 类（遗留系统）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/spring?useSSL=false"</span>, <span class="string">"root"</span>, <span class="string">"1234"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实例工厂--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 先创建出工厂实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connFactory"</span> <span class="attr">class</span>=<span class="string">"com.Cro.factorybean.ConnectionFactory"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 通过工厂实例里的方法创建复杂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">factory-bean</span>=<span class="string">"connFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getConnection"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-静态工厂"><a href="#3-静态工厂" class="headerlink" title="3. 静态工厂"></a>3. 静态工厂</h2><ol><li><strong>避免 Spring 框架的侵⼊；</strong></li><li><strong>整合遗留系统；</strong></li></ol><p>[开发步骤]：</p><ul><li>StaticConnectionFactory 类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/spring?useSSL=false"</span>, <span class="string">"root"</span>, <span class="string">"1234"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"com.yusael.Cro.StaticFactoryBean"</span> <span class="attr">factory-method</span>=<span class="string">"getConnection"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring工厂创建对象的总结"><a href="#Spring工厂创建对象的总结" class="headerlink" title="Spring工厂创建对象的总结"></a>Spring工厂创建对象的总结</h2><p><img src="/2020/08/05/Spring-IOC/5.png" alt></p><p><img src="/2020/08/05/Spring-IOC/6.png" alt></p><h1 id="控制-Spring-工厂创建对象的次数"><a href="#控制-Spring-工厂创建对象的次数" class="headerlink" title="控制 Spring 工厂创建对象的次数"></a>控制 Spring 工厂创建对象的次数</h1><h3 id="1-控制简单对象的创建次数"><a href="#1-控制简单对象的创建次数" class="headerlink" title="1. 控制简单对象的创建次数"></a>1. 控制简单对象的创建次数</h3><p>配置文件中进行配置：</p><p><strong><code>sigleton</code></strong>：只会创建⼀次简单对象，默认值；</p><p><strong><code>prototype</code></strong>：每⼀次都会创建新的对象；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--控制简单对象创建次数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scope"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span> <span class="attr">class</span>=<span class="string">"com.Cro.scope.Scope"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--每⼀次都会创建新的对象；</span></span><br><span class="line"><span class="comment">&lt;bean id="scope" scope="prototype" class="com.Cro.scope.Scope"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-控制复杂对象的创建次数"><a href="#2-控制复杂对象的创建次数" class="headerlink" title="2. 控制复杂对象的创建次数"></a>2. 控制复杂对象的创建次数</h3><p>如果是 <strong><code>FactoryBean</code></strong> 方式创建的复杂对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxxFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 只会创建⼀次</span></span><br><span class="line"><span class="comment">// return false; // 每⼀次都会创建新的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略其余实现方法......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是实例工厂或者静态工厂，没有 <strong><code>isSingleton</code></strong> ⽅法，与简单对象一样通过 <strong><code>scope</code></strong> 控制。</p><h3 id="为什么要控制对象的创建次数？"><a href="#为什么要控制对象的创建次数？" class="headerlink" title="为什么要控制对象的创建次数？"></a>为什么要控制对象的创建次数？</h3><p>好处：节省不必要的内存浪费。</p><p>什么样的对象只创建⼀次？</p><ul><li>重量级的、可以被共用的、线程安全的…</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory</span><br><span class="line">DAO</span><br><span class="line">Service</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>什么样的对象每⼀次都要创建新的？</p><ul><li>不能被共用的，线程不安全的…</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Connection</span><br><span class="line">SqlSession | Session</span><br><span class="line">Struts2 - Action</span><br><span class="line">......</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反转控制-与-依赖注入&quot;&gt;&lt;a href=&quot;#反转控制-与-依赖注入&quot; class=&quot;headerlink&quot; title=&quot;反转控制 与 依赖注入&quot;&gt;&lt;/a&gt;反转控制 与 依赖注入&lt;/h1&gt;&lt;h2 id=&quot;反转控制（IOC-Inverse-of-Control）&quot;
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring5.X" scheme="http://yoursite.com/tags/Spring5-X/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="IOC" scheme="http://yoursite.com/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>初识Spring</title>
    <link href="http://yoursite.com/2020/08/05/Spring-%E5%B7%A5%E5%8E%82/"/>
    <id>http://yoursite.com/2020/08/05/Spring-工厂/</id>
    <published>2020-08-05T03:43:22.000Z</published>
    <updated>2020-08-09T05:57:59.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="EJB（Enterprise-Java-Bean）存在的问题："><a href="#EJB（Enterprise-Java-Bean）存在的问题：" class="headerlink" title="EJB（Enterprise Java Bean）存在的问题："></a>EJB（Enterprise Java Bean）存在的问题：</h2><p><strong>EJB 是重量级的框架</strong>。</p><ol><li>运行环境苛刻</li><li>代码移植性差</li></ol><h1 id="什么是-Spring"><a href="#什么是-Spring" class="headerlink" title="什么是 Spring?"></a>什么是 Spring?</h1><p>Spring是⼀个<strong>轻量级</strong>的 JavaEE 解决⽅案，整合众多优秀的设计模式。</p><p><strong>什么是轻量级?</strong></p><ol><li>对于运⾏环境是没有额外要求的；<br>开源：tomcat、resion、jetty<br>收费：weblogic、websphere</li><li>代码移植性⾼：不需要实现额外接⼝。</li></ol><p><strong>JavaEE 的解决方案</strong>：</p><p><img src="/2020/08/05/Spring-工厂/1.png" alt></p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><ul><li>⼴义概念：⾯向对象设计中，解决特定问题的经典代码。</li><li>狭义概念：GOF4⼈帮定义的<strong>23种设计模式</strong>：⼯⼚、适配器、装饰器、⻔⾯、代理、模板…</li></ul><h2 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h2><ol><li>概念：通过⼯⼚类，创建对象；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">UserDAO userDAO = <span class="keyword">new</span> UserDAOImpl();</span><br></pre></td></tr></table></figure><ol><li><p>好处：<strong>解耦合</strong>。</p><p>耦合：指定是代码间的强关联关系，⼀⽅的改变会影响到另⼀⽅；<br>问题：不利于代码维护；<br>简单：把接⼝的实现类，硬编码在程序中；</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br></pre></td></tr></table></figure><h2 id="简单工厂的设计-反射-配置文件"><a href="#简单工厂的设计-反射-配置文件" class="headerlink" title="简单工厂的设计 (反射+配置文件)"></a>简单工厂的设计 (反射+配置文件)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties env = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//第一步 获得IO输入流</span></span><br><span class="line">            InputStream inputStream = BeanFactory.class.getResourceAsStream(<span class="string">"/applicationContext.properties"</span>);</span><br><span class="line">            <span class="comment">//第二步 文件内容 封装 Properties集合中 key = userService value = com.baizhixx.UserServiceImpl</span></span><br><span class="line">            env.load(inputStream);</span><br><span class="line"></span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   对象的创建方式：</span></span><br><span class="line"><span class="comment">       1. 直接调用构造方法 创建对象  UserService userService = new UserServiceImpl();</span></span><br><span class="line"><span class="comment">       2. 通过反射的形式 创建对象 解耦合</span></span><br><span class="line"><span class="comment">       Class clazz = Class.forName("com.Cro.basic.UserServiceImpl");</span></span><br><span class="line"><span class="comment">       UserService userService = (UserService)clazz.newInstance();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title">getUserService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//com.Cro.basic.UserServiceImpl</span></span><br><span class="line">            Class clazz = Class.forName(env.getProperty(<span class="string">"userService"</span>));</span><br><span class="line">            userService = (UserService) clazz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDAO <span class="title">getUserDAO</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserDAO userDAO = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(env.getProperty(<span class="string">"userDAO"</span>));</span><br><span class="line">            userDAO = (UserDAO) clazz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userDAO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件 applicationContext.properties：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Properties 集合 存储 Properties文件的内容</span><br><span class="line"># 特殊Map key=String value=String</span><br><span class="line"># Properties [userService = com.Cro.xxx.UserServiceImpl]</span><br><span class="line"># Properties.getProperty(&quot;userService&quot;)</span><br><span class="line"></span><br><span class="line">userService = com.Cro.basic.UserServiceImpl</span><br><span class="line">userDAO = com.Cro.basic.UserDAOImpl</span><br></pre></td></tr></table></figure><h2 id="通用工厂的设计"><a href="#通用工厂的设计" class="headerlink" title="通用工厂的设计"></a>通用工厂的设计</h2><p>问题：<strong>简单工厂会存在⼤量的代码冗余。</strong></p><p><img src="/2020/08/05/Spring-工厂/2.png" alt></p><p><strong>通用工厂的代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties env = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//第一步 获得IO输入流</span></span><br><span class="line">            InputStream inputStream = BeanFactory.class.getResourceAsStream(<span class="string">"/applicationContext.properties"</span>);</span><br><span class="line">            <span class="comment">//第二步 文件内容 封装 Properties集合中 key = value</span></span><br><span class="line">            env.load(inputStream);</span><br><span class="line"></span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      key 小配置文件中的key [userDAO,userService]</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        Object ret = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(env.getProperty(key));</span><br><span class="line">            ret = clazz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通用工厂的使用方式"><a href="#通用工厂的使用方式" class="headerlink" title="通用工厂的使用方式"></a>通用工厂的使用方式</h2><ol><li>定义类型 (类)</li><li>通过配置⽂件的配置告知⼯⼚<br><strong><code>applicationContext.properties</code> 中 <code>key = value</code>；</strong></li><li>通过⼯⼚获得类的对象<br><strong><code>Object ret = BeanFactory.getBean(&quot;key&quot;);</code></strong></li></ol><p><strong>总结</strong>：<br><strong>Spring本质</strong>：工厂 <strong><code>ApplicationContext (applicationContext.xml)</code></strong></p><h1 id="第一个-Spring-程序"><a href="#第一个-Spring-程序" class="headerlink" title="第一个 Spring 程序"></a>第一个 Spring 程序</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>依赖查询网站：<a href="https://mvnrepository.com/；" target="_blank" rel="noopener">https://mvnrepository.com/；</a></p><p><strong>配置 Spring 的 jar 包：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Spring 的配置文件：</strong></p><ol><li>配置⽂件的放置位置：任意位置，没有硬性要求；</li><li>配置⽂件的命名 ：没有硬性要求，建议：<strong><code>applicationContext.xml</code>；</strong></li></ol><h2 id="Spring-的核心API"><a href="#Spring-的核心API" class="headerlink" title="Spring 的核心API"></a>Spring 的核心API</h2><p><strong><code>ApplicationContext</code></strong></p><ul><li><p>作用：Spring 提供的 <strong><code>ApplicationContext</code></strong> 这个工厂，用于对象的创建；</p><p>好处：解耦合</p></li><li><p><strong><code>ApplicationContext</code></strong> 是<strong>接口</strong>类型；</p><p>接口：屏蔽实现的差异</p><p>非web环境 ：<strong><code>ClassPathXmlApplicationContext</code></strong> (main junit) </p><p>web环境 ：<strong><code>XmlWebApplicationContext</code></strong></p></li></ul><p><img src="/2020/08/05/Spring-工厂/3.png" alt></p><ul><li><p>重量级资源：</p><p><strong><code>ApplicationContext</code></strong> 工厂的对象占⽤⼤量内存。</p><p>不会频繁的创建对象 ，<strong>⼀个应用只会创建⼀个工厂对象</strong>。</p><p><strong><code>ApplicationContext</code></strong> 工厂：<strong>⼀定是线程安全的(多线程并发访问)。</strong></p></li></ul><h2 id="程序开发"><a href="#程序开发" class="headerlink" title="程序开发"></a>程序开发</h2><ul><li><strong>创建类型：Person.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>配置文件的配置：</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- id属性 名字（唯一); class属性 配置全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.Cro.basic.Person"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>通过工厂类，获得对象</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于测试Spring的第一个程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取spring的工厂</span></span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">// 2、通过工厂类获得对象</span></span><br><span class="line">    Person person = (Person)ctx.getBean(<span class="string">"person"</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="细节分析"><a href="#细节分析" class="headerlink" title="细节分析"></a>细节分析</h2><p>名词解释：Spring 工厂创建的对象，叫做 <strong>bean 或者 组件(componet)；</strong></p><h2 id="Spring-工厂的相关的方法"><a href="#Spring-工厂的相关的方法" class="headerlink" title="Spring 工厂的相关的方法"></a>Spring 工厂的相关的方法</h2><p><strong><code>getBean</code></strong>：传入 id 值 和 类名 获取对象，<strong>不需要强制类型转换</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过这种⽅式获得对象，就不需要强制类型转换</span></span><br><span class="line">Person person = ctx.getBean(<span class="string">"person"</span>, Person.class);</span><br><span class="line">System.out.println(<span class="string">"person = "</span> + person);</span><br></pre></td></tr></table></figure><p><strong><code>getBean</code></strong>：只指定类名，Spring 的配置文件中只能有一个 bean 是这个类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用这种方式的话, 当前Spring的配置文件中 只能有一个bean class是Person类型</span></span><br><span class="line">Person person = ctx.getBean(Person.class);</span><br><span class="line">System.out.println(<span class="string">"person = "</span> + person);</span><br></pre></td></tr></table></figure><p><strong><code>getBeanDefinitionNames</code></strong>：获取 Spring 配置文件中所有的 bean 标签的 id 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取的是Spring工厂配置文件中所有bean标签的id值 person</span></span><br><span class="line">String[] beanDefinitionNames = ctx.getBeanDefinitionNames();</span><br><span class="line"><span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">    System.out.println(<span class="string">"beanDefinitionName = "</span> + beanDefinitionName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>getBeanNamesForType</code></strong>：根据 <strong>类型</strong> 获得 Spring 配置文件中对应的 id 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据类型获得Spring配置文件中对应的id值</span></span><br><span class="line">String[] beanNamesForType = ctx.getBeanNamesForType(Person.class);</span><br><span class="line"><span class="keyword">for</span> (String id : beanNamesForType) &#123;</span><br><span class="line">    System.out.println(<span class="string">"id = "</span> + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>containsBeanDefinition</code></strong>：用于判断是否存在指定 id 值的 bean，<strong>不能判断 name 值</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于判断是否存在指定id值的bean,不能判断name值</span></span><br><span class="line"><span class="keyword">if</span> (ctx.containsBeanDefinition(<span class="string">"person"</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>containsBean</code></strong>：用于判断是否存在指定 id 值的 bean，<strong>也可以判断 name 值</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于判断是否存在指定id值的bean,也可以判断name值</span></span><br><span class="line"><span class="keyword">if</span> (ctx.containsBean(<span class="string">"p"</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件中的细节"><a href="#配置文件中的细节" class="headerlink" title="配置文件中的细节"></a>配置文件中的细节</h3><h4 id="如果-bean-只配置-class-属性："><a href="#如果-bean-只配置-class-属性：" class="headerlink" title="如果 bean 只配置 class 属性："></a>如果 bean 只配置 class 属性：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.Cro.basic.Person"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>会自动生成一个 id，<strong><code>com.Cro.basic.Person#1</code></strong></p><p>可以使用 <strong><code>getBeanNamesForType</code></strong> 验证。</p></li><li><p>应⽤场景：</p><p>如果这个 bean <strong>只需要使⽤⼀次</strong>，那么就可以省略 id 值；</p><p>如果这个 bean 会使⽤多次，或者被其他 bean 引⽤则需要设置 id 值；</p></li></ul><h4 id="name-属性："><a href="#name-属性：" class="headerlink" title="name 属性："></a>name 属性：</h4><ul><li>作⽤：⽤于在 Spring 的配置⽂件中，为 bean 对象定义别名（小名）</li><li>name 与 id 的相同点：<ul><li><strong><code>ctx.getBean(&quot;id&quot;)</code></strong> 或 <strong><code>ctx.getBean(&quot;name&quot;)</code></strong> 都可以创建对象；</li><li><strong><code>&lt;bean id=&quot;person&quot; class=&quot;Person&quot;/&gt;</code></strong> 与 <strong><code>&lt;bean name=&quot;person&quot; class=&quot;Person&quot;/&gt;</code></strong>等效；</li></ul></li><li>name 与 id 的区别：<ul><li>别名可以定义多个,但是 id 属性只能有⼀个值；</li><li>XML 的 id 属性的值，命名要求：必须以字⺟开头，可以包含 字⺟、数字、下划线、连字符；不能以特殊字符开头 <strong><code>/person</code></strong>；<br>XML 的 name 属性的值，命名没有要求，<strong><code>/person</code></strong> 可以。<br>但其实 XML 发展到了今天：ID属性的限制已经不存在，<strong><code>/person</code></strong>也可以。</li></ul></li></ul><h3 id="Spring工厂的底层实现原理-简易版"><a href="#Spring工厂的底层实现原理-简易版" class="headerlink" title="Spring工厂的底层实现原理(简易版)"></a>Spring工厂的底层实现原理(简易版)</h3><p><strong>Spring工厂是可以调用对象私有的构造方法创建对象的(反射)</strong></p><p><img src="/2020/08/05/Spring-工厂/4.png" alt></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>问题：未来在开发过程中，是不是所有的对象，都会交给 Spring ⼯⼚来创建呢？</p><p>回答：理论上是的，但是有特例 ：<strong>实体对象(entity)</strong> 是不会交给Spring创建，它由持久层框架进⾏创建。</p><h2 id="Spring5-x-与-日志框架-的整合"><a href="#Spring5-x-与-日志框架-的整合" class="headerlink" title="Spring5.x 与 日志框架 的整合"></a>Spring5.x 与 日志框架 的整合</h2><p>Spring 与⽇志框架进⾏整合，⽇志框架就可以在控制台中，输出Spring框架运⾏过程中的⼀些重要的信息。</p><p>好处：<strong>便于了解Spring框架的运⾏过程，利于程序的调试。</strong></p><p>默认日志框架</p><ul><li><p>Spring 1.x、2.x、3.x 早期都是基于commonslogging.jar</p></li><li><p>Spring 5.x 默认整合的⽇志框架 logback、log4j2</p></li></ul><p>Spring 如何整合⽇志框架？</p><p>Spring5.x 整合 log4j：</p><ol><li>引⼊ <strong><code>log4j.jar</code></strong> 包；</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>引⼊<strong><code>log4.properties</code></strong> 配置⽂件；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># resources文件夹根目录下</span><br><span class="line">### 配置根</span><br><span class="line">log4j.rootLogger = debug,console</span><br><span class="line"></span><br><span class="line">### 日志输出到控制台显示</span><br><span class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target=System.out</span><br><span class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n</span><br></pre></td></tr></table></figure><h1 id="注入-Injection"><a href="#注入-Injection" class="headerlink" title="注入(Injection)"></a>注入(Injection)</h1><h2 id="什么是注入？"><a href="#什么是注入？" class="headerlink" title="什么是注入？"></a>什么是注入？</h2><p>注入：通过 Spring 工厂及配置⽂件，为所创建对象的成员变量赋值。</p><h3 id="为什么要注入？"><a href="#为什么要注入？" class="headerlink" title="为什么要注入？"></a>为什么要注入？</h3><ul><li>通过编码的⽅式，为成员变量进⾏赋值，存在耦合。</li><li>注入的好处：<strong>解耦合</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/applicationContext.xml"</span>);</span><br><span class="line">    Person person = (Person) ctx.getBean(<span class="string">"person"</span>);</span><br><span class="line">    <span class="comment">// 通过代码为变量赋值, 存在耦合, 如果我们以后想修改变量的值, 需要修改代码, 重新编译</span></span><br><span class="line">    person.setId(<span class="number">1</span>);</span><br><span class="line">    person.setName(<span class="string">"suns"</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何进行注入-开发步骤"><a href="#如何进行注入-开发步骤" class="headerlink" title="如何进行注入[开发步骤]"></a>如何进行注入[开发步骤]</h3><ul><li>为类的成员变量提供 set get ⽅法</li><li>配置 spring 的配置⽂件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">name</span>=<span class="string">"p"</span> <span class="attr">class</span>=<span class="string">"com.Cro.basic.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>newsuns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring注入的原理分析-简易版"><a href="#Spring注入的原理分析-简易版" class="headerlink" title="Spring注入的原理分析(简易版)"></a>Spring注入的原理分析(简易版)</h3><p>Spring 底层通过<strong>调用对象属性对应的 set 方法</strong>，完成成员变量的赋值，这种⽅式也称为 <strong>Set注入</strong>。</p><p><img src="/2020/08/05/Spring-工厂/5.png" alt></p><h2 id="Set注入详解"><a href="#Set注入详解" class="headerlink" title="Set注入详解"></a>Set注入详解</h2><p>Set注入的变量类型：</p><ul><li><p><strong>JDK内置类型</strong></p><p>8种基本类型 + String、数组类型、set集合、list集合、Map计划和、Properties集合。</p></li><li><p><strong>用户自定义类型</strong></p></li></ul><p>针对于不同类型的成员变量，在<strong><code>property</code></strong>标签中，需要嵌套其他标签:</p><p><img src="/2020/08/05/Spring-工厂/6.png" alt></p><h3 id="JDK内置类型"><a href="#JDK内置类型" class="headerlink" title="JDK内置类型"></a>JDK内置类型</h3><h4 id="String-8种基本类型"><a href="#String-8种基本类型" class="headerlink" title="String+8种基本类型"></a>String+8种基本类型</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yusael<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>数组</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"emails"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>abc@qq.com<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>123@qq.com<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hello@qq.com<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Set集合</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tels"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>13811111111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>13911111111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>13811111111<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="comment">&lt;!--set会自动去重--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>List集合</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addresses"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>zpark<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Earth<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hell<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Map集合</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"qqs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>12312312312<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>world<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>21314214214<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Properites(特殊的Map key = String,value = String)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"key1"</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"key2"</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"key3"</span>&gt;</span>value3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>复杂JDK类型（Date、…）</strong></p><p>需要程序员⾃定义类型转换器，处理。</p><h3 id="用户自定义类型"><a href="#用户自定义类型" class="headerlink" title="用户自定义类型"></a>用户自定义类型</h3><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>[开发步骤]：</p><ul><li><strong>为成员变量提供 set get ⽅法</strong></li><li>配置⽂件中进⾏注入（赋值）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.Cro.dao.UserDAOImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p><strong>第⼀种赋值⽅式存在的问题：</strong></p><ol><li>配置⽂件代码冗余；</li><li>被注入的对象 （UserDAO）多次创建，浪费(JVM)内存资源。</li></ol><p>[开发步骤]：</p><ul><li>为成员变量提供 set get ⽅法；</li><li>配置⽂件中进⾏配置；</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"com.Cro.service.UserDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.dao.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userDAO"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring4.x 废除了 <strong><code>&lt;ref local=&quot;&quot;/&gt;</code></strong> 基本等效 <strong><code>&lt;ref bean=&quot;&quot;/&gt;</code></strong>；</p><h3 id="Set注入的简化"><a href="#Set注入的简化" class="headerlink" title="Set注入的简化"></a>Set注入的简化</h3><h4 id="基于属性的简化"><a href="#基于属性的简化" class="headerlink" title="基于属性的简化"></a>基于属性的简化</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JDK 类型注入</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDK类型注入简化：value 属性只能简化 8种基本类型 + String 注入标签；</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">用户自定义类型注入</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"com.Cro.dao.UserDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userDAO"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用户自定义类型注入简化</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"com.Cro.dao.UserDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span> <span class="attr">ref</span>=<span class="string">"userDAO"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于p命名空间的简化"><a href="#基于p命名空间的简化" class="headerlink" title="基于p命名空间的简化"></a>基于p命名空间的简化</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">JDK 类型注入</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">name</span>=<span class="string">"p"</span> <span class="attr">class</span>=<span class="string">"com.Cro.basic.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaojr<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDK 类型注入 - 基于p命名空间的简化</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">name</span>=<span class="string">"p"</span> <span class="attr">class</span>=<span class="string">"com.Cro.basic.Person"</span> <span class="attr">p:name</span>=<span class="string">"xiaojr"</span> <span class="attr">p:id</span>=<span class="string">"100"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">用户自定义类型注入</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"com.Cro.dao.UserDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userDAO"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用户自定义类型注入 - 基于p命名空间的简化。</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"com.Cro.dao.UserDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Cro.service.UserServiceImpl"</span> <span class="attr">p:userDAO-ref</span>=<span class="string">"userDAO"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h2><ul><li><strong>注入</strong>：通过 Spring 的配置⽂件，为成员变量赋值；</li><li><strong>Set注入</strong>：Spring 调用 <strong>Set 方法</strong> 通过 配置⽂件 为成员变量赋值；</li><li><strong>构造注入</strong>：Spring 调用 <strong>构造方法</strong> 通过 配置⽂件 为成员变量赋值；</li></ul><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ul><li><strong>提供有参构造⽅法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.Cro.constructor.Customer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaoxiao<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>21<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="构造方法重载"><a href="#构造方法重载" class="headerlink" title="构造方法重载"></a>构造方法重载</h3><p><strong>参数个数不同</strong></p><p>参数个数不同时，通过控制 <strong><code>&lt;constructor-arg&gt;</code></strong> 标签的数量进⾏区分；</p><p>如果只有一个参数的话，只需要一对 <strong><code>&lt;constructor-arg&gt;</code></strong> 标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.Cro.constructor.Customer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaobai<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>构造参数个数相同时</strong>，</p><p>通过在标签引入 <code>type</code> 属性 进⾏类型的区分 <strong><code>&lt;constructor-arg type=&quot;&quot;&gt;</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.Cro.constructor.Customer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注入总结"><a href="#注入总结" class="headerlink" title="注入总结"></a>注入总结</h2><p>未来的实战中，应用 <strong>set注入</strong> 还是 <strong>构造注入</strong>？</p><p>答：set 注入更多。</p><ol><li>构造注入麻烦（重载）</li><li>Spring 框架底层⼤量应用了 set注入。</li></ol><p><img src="/2020/08/05/Spring-工厂/7.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;h2 id=&quot;EJB（Enterprise-Java-Bean）存在的问题：&quot;&gt;&lt;a href=&quot;#EJB（Enterprise-Java-Be
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring5.X" scheme="http://yoursite.com/tags/Spring5-X/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode</title>
    <link href="http://yoursite.com/2020/07/29/Leetcode/"/>
    <id>http://yoursite.com/2020/07/29/Leetcode/</id>
    <published>2020-07-29T07:55:47.000Z</published>
    <updated>2020-07-30T09:05:54.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-移动零"><a href="#LeetCode-移动零" class="headerlink" title="LeetCode_移动零"></a><a href="https://leetcode-cn.com/problems/move-zeroes/" target="_blank" rel="noopener">LeetCode_移动零</a></h2><p><img src="/2020/07/29/Leetcode/1.png" alt></p><p><strong>遇到 $0$ 跳过，遇到非 $0$ ，跟 $cur$ 位置交换，$cur++$</strong></p><p><img src="/2020/07/29/Leetcode/2.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, cur = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur != i) &#123;</span><br><span class="line">                nums[cur] = nums[i];</span><br><span class="line">                nums[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-两数之和"><a href="#LeetCode-两数之和" class="headerlink" title="LeetCode_两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">LeetCode_两数之和</a></h2><p><img src="/2020/07/29/Leetcode/3.png" alt></p><p><strong>利用 $hashmap$ 来存放之前扫描过的元素</strong></p><p><img src="/2020/07/29/Leetcode/4.png" alt></p><p><strong>时间复杂度 $O(n)$</strong></p><p><strong>空间复杂度 $O(n)$</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 用来存放之前扫描过的元素</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            Integer idx = map.get(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (idx != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;idx, i&#125;;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-三数之和"><a href="#LeetCode-三数之和" class="headerlink" title="LeetCode_三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">LeetCode_三数之和</a></h2><p><img src="/2020/07/29/Leetcode/5.png" alt></p><p><strong>排序 + 双指针</strong></p><p>时间复杂度 $O(n^2)$</p><p>空间复杂度 $O(1)$</p><p><img src="/2020/07/29/Leetcode/6.png" alt></p><p><img src="/2020/07/29/Leetcode/7.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// i用来扫描三元组的第一个元素</span></span><br><span class="line">        <span class="keyword">int</span> lastIdx = nums.length - <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> lastR = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lastIdx; i++) &#123;</span><br><span class="line">            <span class="comment">// 去重</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> l = i + <span class="number">1</span>, r = lastR, remain = -nums[i];</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">int</span> sumLr = nums[l] + nums[r];</span><br><span class="line">                <span class="keyword">if</span> (sumLr == remain) &#123; <span class="comment">// 找到了符合条件的三元组</span></span><br><span class="line">                    res.add(Arrays.asList(nums[i], nums[l], nums[r]));</span><br><span class="line">                    <span class="comment">// 跳过相同的值（去重）</span></span><br><span class="line">                    <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]) l++;</span><br><span class="line">                    <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) r--;</span><br><span class="line">                    <span class="comment">// 往中间逼近</span></span><br><span class="line">                    l++;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sumLr &lt; remain) &#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// sumLr &gt; remain</span></span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-Pow-x-n"><a href="#LeetCode-Pow-x-n" class="headerlink" title="LeetCode_Pow(x,n)"></a><a href="https://leetcode-cn.com/problems/powx-n/" target="_blank" rel="noopener">LeetCode_Pow(x,n)</a></h2><p><img src="/2020/07/29/Leetcode/8.png" alt></p><p><strong>最简单的做法</strong></p><ul><li><p>将 $n$ 个 $x$ 进行相乘</p></li><li><p>时间复杂度：$O(n)$</p></li><li><p>空间复杂度：$O(1)$</p></li></ul><p><strong>快速幂（分治）</strong></p><ul><li><p>时间复杂度：$O(logn)$</p></li><li><p>非递归空间复杂度：$O(1)$</p></li><li><p>递归空间复杂度：$O(logn)$</p></li></ul><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>$3^{20} = 3^{10} * 3^{10}$</p><p>$ 3^{21} = 3^{10} \ast 3^{10} \ast 3$</p><p>$ 3^{-20} = 3^{-10} * 3^{-10}$</p><p>$ 3^{-21} = 3^{-10} \ast 3^{-10} \ast 3^{-1}$</p><p>$ 3^{-21} = 3^{-11} \ast 3^{-11} \ast 3$ <strong>（当 $n$ 为负数是，$n &gt;&gt; 1$ 会向上取整）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == -<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span> / x;</span><br><span class="line">        <span class="keyword">double</span> half = myPow(x, n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        half *= half;</span><br><span class="line">        <span class="comment">// 是否为奇数</span></span><br><span class="line">        <span class="keyword">return</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) ? (half * x) : half;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h3><p>$3^{21}$</p><p>$21 = (10101)_2$</p><p>$21 = (1 \ast 2^4) + (0 \ast 2^3) + (1 \ast 2^2) + (0 \ast 2^1) + (1 \ast 2^0)$</p><p>$3^{21} = 3^{(1 \ast 2^4) + (0 \ast 2^3) + (1 \ast 2^2) + (0 \ast 2^1) + (1 \ast 2^0)}$</p><p>$3^{21} = 3^{1 \ast 2^4} \ast 3^{0 \ast 2^3} \ast 3^{1 \ast 2^2} \ast 3^{0 \ast 2^1} \ast 3^{1 \ast 2^0}$</p><p>$3^{2^1} = 3^{2^0} \ast 3^{2^0} = 3 ^ 1 \ast 3^1 = 3^2$</p><p>$3^{2^2} = 3^{2^1} \ast 3^{2^1} = 3^2 \ast 3^2 = 3^4$</p><p>$3^{2^3} = 3^{2^2} \ast 3^{2^2} = 3^4 \ast 3^4 = 3^8$</p><p>$3^{2^4} = 3^{2^3} \ast 3^{2^3} = 3^8 \ast 3^8 = 3^{16}$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> y = (n &lt; <span class="number">0</span>) ? -((<span class="keyword">long</span>) n) : n;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span> (y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((y &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果最后一个二进制位是1，就累乘上x</span></span><br><span class="line">                res *= x;</span><br><span class="line">            &#125;</span><br><span class="line">            x *= x;</span><br><span class="line">            <span class="comment">// 舍弃掉最后一个二进制位</span></span><br><span class="line">            y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? (<span class="number">1</span> / res) : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂补充"><a href="#快速幂补充" class="headerlink" title="快速幂补充"></a>快速幂补充</h3><p>请设计一个算法求 $x$ 的 $y$ 次幂模 $z$ 的结果：$x^y\%z$</p><p>假设 $x、y$ 都可能是很大的整数</p><p>$y \geq 0,z \neq 0$</p><p><strong>公式须知</strong></p><p>$(a \ast b) \% p == ((a \% p) \ast (b \% p)) \% p$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">powMod</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &lt; <span class="number">0</span> || z == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span> % z;</span><br><span class="line">    x %= z;</span><br><span class="line">    <span class="keyword">while</span> (y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((y &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果最后一个二进制位是1，就累乘上x</span></span><br><span class="line">            res = (res * x) % z;</span><br><span class="line">        &#125;</span><br><span class="line">        x = (x * x) % z;</span><br><span class="line">        <span class="comment">// 舍弃掉最后一个二进制位</span></span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="comment">// 2^100 % 6  = (2^50 * 2^50) % 6 = ((2^50 % 6) * (2^50 % 6)) % 6</span></span><br><span class="line"><span class="comment">// 2^101 % 6  = (2^50 * 2^50 * 2) % 6 = ((2^50 % 6) * (2^50 % 6) * (2 % 6)) % 6</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">powMod</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &lt; <span class="number">0</span> || z == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % z;</span><br><span class="line">    <span class="keyword">int</span> half = powMod(x, y &gt;&gt; <span class="number">1</span>, z);</span><br><span class="line">    half *= half;</span><br><span class="line">    <span class="keyword">if</span> ((y &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123; <span class="comment">// 偶数</span></span><br><span class="line">        <span class="keyword">return</span> half % z;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 奇数</span></span><br><span class="line">        <span class="keyword">return</span> (half * (x % z)) % z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-圆圈中最后剩下的数字"><a href="#LeetCode-圆圈中最后剩下的数字" class="headerlink" title="LeetCode_圆圈中最后剩下的数字"></a><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" target="_blank" rel="noopener">LeetCode_圆圈中最后剩下的数字</a></h2><p><img src="/2020/07/29/Leetcode/9.png" alt></p><p><strong>计算公式：</strong>$f(n,m) = (f(n-1,m) + m) \% n$</p><p><strong>这其实就是著名的约瑟夫环问题</strong></p><p>有 $n$ 个人，编号分别为 $0、1、…、n-1$ ，每当报数到第 $m$ 个人时，就杀掉他，求最后胜利者编号</p><p><strong>公式推导</strong></p><p>$f(11,3) == 6$</p><p>从 $A$ 开始报数，最后能活下来的是 $G$</p><p><img src="/2020/07/29/Leetcode/10.png" alt></p><p>从 $A$ 开始报数，杀掉 $C$ 之后，剩下 $10$ 个人，接下来从 $D$ 开始报数，最后能活下来的依然是 $G$</p><p><img src="/2020/07/29/Leetcode/11.png" alt></p><p>从 $11$ 人变为 $10$ 人，胜利者的编号由 $6$ 变为 $3$，所以 $f(10,3) = f(11,3) -3$</p><p>也就是说 $f(11,3) = f(10,3) + 3$</p><p><strong>通用结论：$f(n,m) = (f(n-1,m) + m) \% n$</strong></p><p><strong>最后的 $\%n$ 是为了防止索引越界</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastRemaining</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            res = (res + m) % i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-螺旋矩阵"><a href="#LeetCode-螺旋矩阵" class="headerlink" title="LeetCode_螺旋矩阵"></a><a href="https://leetcode-cn.com/problems/spiral-matrix/" target="_blank" rel="noopener">LeetCode_螺旋矩阵</a></h2><p><img src="/2020/07/29/Leetcode/12.png" alt></p><p><img src="/2020/07/29/Leetcode/13.png" alt></p><p><strong>遍历顺序：黄蓝绿紫（一圈一圈遍历）</strong></p><p><strong>当 $top &gt; bottom || left &gt; right$ 退出循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bottom = matrix.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (top &lt;= bottom &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// left top -&gt; right top</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">                res.add(matrix[top][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            top++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// right top -&gt; right bottom</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = top; i &lt;= bottom; i++) &#123;</span><br><span class="line">                res.add(matrix[i][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            right--;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 奇数行、偶数列的时候有问题</span></span><br><span class="line">            <span class="keyword">if</span> (top &gt; bottom || left &gt; right) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// right bottom -&gt; left bottom</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = right; i &gt;= left; i--) &#123;</span><br><span class="line">                res.add(matrix[bottom][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            bottom--;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// left bottom -&gt; left top</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = bottom; i &gt;= top; i--) &#123;</span><br><span class="line">                res.add(matrix[i][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-LRU缓存机制"><a href="#LeetCode-LRU缓存机制" class="headerlink" title="LeetCode_LRU缓存机制"></a><a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">LeetCode_LRU缓存机制</a></h2><p><strong>$LRU（Least Recently Used）$：最近最少使用、最近最久未使用</strong></p><p><strong>是操作系统常用的一种页面置换算法，选择最近最久未使用的页面予以淘汰</strong></p><p><img src="/2020/07/29/Leetcode/14.png" alt></p><p><strong>$LRUCache$ 的常见实现方式是：哈希表 + 双向链表</strong></p><p><img src="/2020/07/29/Leetcode/15.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="comment">// 虚拟头结点</span></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="comment">// 虚拟尾结点</span></span><br><span class="line">    <span class="keyword">private</span> Node last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        first = <span class="keyword">new</span> Node();</span><br><span class="line">        last = <span class="keyword">new</span> Node();</span><br><span class="line">        first.next = last;</span><br><span class="line">        last.prev = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        Node node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        removeNode(node);</span><br><span class="line">        addAfterFirst(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 将node节点插入到first节点的后面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAfterFirst</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// node与first.next</span></span><br><span class="line">        node.next = first.next;</span><br><span class="line">        first.next.prev = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// node与first</span></span><br><span class="line">        first.next = node;</span><br><span class="line">        node.prev = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 从双向链表中删除node节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            removeNode(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 添加一对新的key-value</span></span><br><span class="line">            <span class="keyword">if</span> (map.size() == capacity) &#123;</span><br><span class="line">                <span class="comment">// 淘汰最近最少使用的node\</span></span><br><span class="line">                removeNode(map.remove(last.prev.key));</span><br><span class="line"><span class="comment">//                map.remove(last.prev.key);</span></span><br><span class="line"><span class="comment">//                removeNode(last.prev);</span></span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key, node = <span class="keyword">new</span> Node(key, value));</span><br><span class="line">        &#125;</span><br><span class="line">        addAfterFirst(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">        <span class="keyword">public</span> Node prev;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-整数反转"><a href="#LeetCode-整数反转" class="headerlink" title="LeetCode_整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">LeetCode_整数反转</a></h2><p><img src="/2020/07/29/Leetcode/16.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> prevRes = res;</span><br><span class="line">            <span class="keyword">int</span> mod = x % <span class="number">10</span>;</span><br><span class="line">            res = prevRes * <span class="number">10</span> + mod;</span><br><span class="line">            <span class="keyword">if</span> ((res - mod) / <span class="number">10</span> != prevRes) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-会议室"><a href="#LeetCode-会议室" class="headerlink" title="LeetCode_会议室"></a><a href="https://leetcode-cn.com/problems/meeting-rooms/" target="_blank" rel="noopener">LeetCode_会议室</a></h2><p><img src="/2020/07/29/Leetcode/17.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canAttendMeetings</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照会议的开始时间，从小到大排序</span></span><br><span class="line">        Arrays.sort(intervals, (m1, m2) -&gt; m1[<span class="number">0</span>] - m2[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历每一个会议</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &lt; intervals[i - <span class="number">1</span>][<span class="number">1</span>]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-会议室-ll"><a href="#LeetCode-会议室-ll" class="headerlink" title="LeetCode_会议室 ll"></a><a href="https://leetcode-cn.com/problems/meeting-rooms-ii/" target="_blank" rel="noopener">LeetCode_会议室 ll</a></h2><p><img src="/2020/07/29/Leetcode/18.png" alt></p><h3 id="最小堆"><a href="#最小堆" class="headerlink" title="最小堆"></a>最小堆</h3><p><strong>最小堆（存放每一个会议的结束时间）</strong></p><p><img src="/2020/07/29/Leetcode/19.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMeetingRooms</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照会议的开始时间，从小到大排序  nlogn</span></span><br><span class="line">        Arrays.sort(intervals, (m1, m2) -&gt; m1[<span class="number">0</span>] - m2[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个最小堆（存放每一个会议的结束时间）</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加0号会议的结束时间</span></span><br><span class="line">        heap.add(intervals[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 堆顶的含义：目前占用的会议室中最早结束的时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length; i++) &#123; <span class="comment">// nlogn</span></span><br><span class="line">            <span class="comment">// i号会议的开始时间 &gt;= 堆顶</span></span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= heap.peek()) &#123;</span><br><span class="line">                heap.remove();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将i号会议的结束时间加入堆中</span></span><br><span class="line">            heap.add(intervals[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> heap.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分开排序"><a href="#分开排序" class="headerlink" title="分开排序"></a>分开排序</h3><p><img src="/2020/07/29/Leetcode/20.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMeetingRooms</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 存放所有会议的开始时间</span></span><br><span class="line">        <span class="keyword">int</span>[] begins = <span class="keyword">new</span> <span class="keyword">int</span>[intervals.length];</span><br><span class="line">        <span class="comment">// 存放所有会议的结束时间</span></span><br><span class="line">        <span class="keyword">int</span>[] ends = <span class="keyword">new</span> <span class="keyword">int</span>[intervals.length];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">            begins[i] = intervals[i][<span class="number">0</span>];</span><br><span class="line">            ends[i] = intervals[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(begins);</span><br><span class="line">        Arrays.sort(ends);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> room = <span class="number">0</span>, endIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> begin : begins) &#123;</span><br><span class="line">            <span class="keyword">if</span> (begin &gt;= ends[endIdx]) &#123; <span class="comment">// 能重复利用会议室</span></span><br><span class="line">                endIdx++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 需要新开一个会议室</span></span><br><span class="line">                room++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> room;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-盛最多水的容器"><a href="#LeetCode-盛最多水的容器" class="headerlink" title="LeetCode_盛最多水的容器"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">LeetCode_盛最多水的容器</a></h2><p><img src="/2020/07/29/Leetcode/21.png" alt></p><p><strong>双指针，$l,r$ 向中间逼近</strong></p><p>$height[l] &lt;= height[r]$ 时，$l++$</p><p>$height[l] &gt; height[r]$ 时，$r—$</p><p><img src="/2020/07/29/Leetcode/22.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = height.length - <span class="number">1</span>, water = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[l] &lt;= height[r]) &#123;</span><br><span class="line">                <span class="keyword">int</span> minH = height[l];</span><br><span class="line">                water = Math.max(water, (r - l) * minH);</span><br><span class="line">                <span class="comment">// 跳过比当前左右最小高度还小的</span></span><br><span class="line">                <span class="keyword">while</span> (l &lt; r &amp;&amp; height[l] &lt;= minH) l++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> minH = height[r];</span><br><span class="line">                water = Math.max(water, (r - l) * minH);</span><br><span class="line">                <span class="keyword">while</span> (l &lt; r &amp;&amp; height[r] &lt;= minH) r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> water;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-接雨水"><a href="#LeetCode-接雨水" class="headerlink" title="LeetCode_接雨水"></a><a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener">LeetCode_接雨水</a></h2><p><img src="/2020/07/29/Leetcode/23.png" alt></p><h3 id="二维数组-O-n-O-n"><a href="#二维数组-O-n-O-n" class="headerlink" title="二维数组 $(O(n) O(n))$"></a>二维数组 $(O(n) O(n))$</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastIdx = height.length - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[] leftMaxes = <span class="keyword">new</span> <span class="keyword">int</span>[height.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lastIdx; i++) &#123;</span><br><span class="line">            leftMaxes[i] = Math.max(leftMaxes[i - <span class="number">1</span>], height[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] rightMaxes = <span class="keyword">new</span> <span class="keyword">int</span>[height.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lastIdx; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            rightMaxes[i] = Math.max(rightMaxes[i + <span class="number">1</span>], height[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历每一根柱子，看看每一根柱子上能放多少水</span></span><br><span class="line">        <span class="keyword">int</span> water = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lastIdx; i++) &#123;</span><br><span class="line">            <span class="comment">// 求出左边最大、右边最大中的较小者</span></span><br><span class="line">            <span class="keyword">int</span> min = Math.min(leftMaxes[i], rightMaxes[i]);</span><br><span class="line">            <span class="comment">// 说明这根柱子不能放水</span></span><br><span class="line">            <span class="keyword">if</span> (min &lt;= height[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 说明这根柱子能放水</span></span><br><span class="line">            water += min - height[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> water;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组-O-n-O-n"><a href="#一维数组-O-n-O-n" class="headerlink" title="一维数组 $(O(n) O(n))$"></a>一维数组 $(O(n) O(n))$</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastIdx = height.length - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态优化 计算出每根柱子右边的最大值</span></span><br><span class="line">        <span class="keyword">int</span>[] rightMaxes = <span class="keyword">new</span> <span class="keyword">int</span>[height.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lastIdx; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            rightMaxes[i] = Math.max(rightMaxes[i + <span class="number">1</span>], height[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历每一根柱子，看看每一根柱子上能放多少水</span></span><br><span class="line">        <span class="keyword">int</span> water = <span class="number">0</span>, leftMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lastIdx; i++) &#123;</span><br><span class="line">            leftMax = Math.max(leftMax, height[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 求出左边最大、右边最大中的较小者</span></span><br><span class="line">            <span class="keyword">int</span> min = Math.min(leftMax, rightMaxes[i]);</span><br><span class="line">            <span class="comment">// 说明这根柱子不能放水</span></span><br><span class="line">            <span class="keyword">if</span> (min &lt;= height[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 说明这根柱子能放水</span></span><br><span class="line">            water += min - height[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> water;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最优实现-O-n-O-1"><a href="#最优实现-O-n-O-1" class="headerlink" title="最优实现 $(O(n) O(1))$"></a>最优实现 $(O(n) O(1))$</h3><p><img src="/2020/07/29/Leetcode/24.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>,r = height.length - <span class="number">1</span>,lowerMax = <span class="number">0</span>,water = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="comment">// height[l]、height[r] 中较小的那个</span></span><br><span class="line">            <span class="comment">// 如果 l++ 右边高度有比左边大或等于</span></span><br><span class="line">            <span class="keyword">int</span> lower = height[height[l] &lt;= height[r] ? l++ : r--];</span><br><span class="line">            <span class="comment">// 目前为止遇到的最大的 lower</span></span><br><span class="line">            lowerMax = Math.max(lowerMax,lower);</span><br><span class="line">            water += lowerMax - lower;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> water;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode-移动零&quot;&gt;&lt;a href=&quot;#LeetCode-移动零&quot; class=&quot;headerlink&quot; title=&quot;LeetCode_移动零&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/move-zer
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode_DFS</title>
    <link href="http://yoursite.com/2020/07/29/Leetcode-DFS/"/>
    <id>http://yoursite.com/2020/07/29/Leetcode-DFS/</id>
    <published>2020-07-29T05:12:51.000Z</published>
    <updated>2020-07-29T05:30:37.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-电话号码的字母组合"><a href="#LeetCode-电话号码的字母组合" class="headerlink" title="LeetCode_电话号码的字母组合"></a><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">LeetCode_电话号码的字母组合</a></h2><p><img src="/2020/07/29/Leetcode-DFS/1.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[][] lettersArray = &#123;</span><br><span class="line">        &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;, &#123;<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>&#125;, &#123;<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>&#125;, &#123;<span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>&#125;, &#123;<span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>&#125;, &#123;<span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = digits.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (chars.length == <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">        <span class="keyword">char</span>[] string = <span class="keyword">new</span> <span class="keyword">char</span>[chars.length];</span><br><span class="line">        dfs(<span class="number">0</span>, chars, string, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idx 正在搜索第idx层</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">char</span>[] chars, <span class="keyword">char</span>[] string, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 已经进入到最后一层了，不能再往下搜索</span></span><br><span class="line">        <span class="keyword">if</span> (idx == chars.length) &#123;</span><br><span class="line">            <span class="comment">// 得到了一个正确的解</span></span><br><span class="line">            list.add(<span class="keyword">new</span> String(string));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先枚举这一层可以做的所有选择</span></span><br><span class="line">        <span class="keyword">char</span>[] letters = lettersArray[chars[idx] - <span class="string">'2'</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> letter : letters) &#123;</span><br><span class="line">            string[idx] = letter;</span><br><span class="line">            dfs(idx + <span class="number">1</span>, chars, string, list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-全排列"><a href="#LeetCode-全排列" class="headerlink" title="LeetCode_全排列"></a><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">LeetCode_全排列</a></h2><p><img src="/2020/07/29/Leetcode-DFS/2.png" alt></p><p><img src="/2020/07/29/Leetcode-DFS/3.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">        dfs(<span class="number">0</span>, nums, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idx 正在搜索第idx层</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不能再往下搜索</span></span><br><span class="line">        <span class="keyword">if</span> (idx == nums.length) &#123;</span><br><span class="line">            List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> value : nums) &#123;</span><br><span class="line">                result.add(value);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(result);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举这一层所有可以做出的选择</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt; nums.length; i++) &#123;</span><br><span class="line">            swap(nums, idx, i);</span><br><span class="line">            dfs(idx + <span class="number">1</span>, nums, list);</span><br><span class="line">            <span class="comment">// 恢复现场</span></span><br><span class="line">            swap(nums, idx, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-全排列-II"><a href="#LeetCode-全排列-II" class="headerlink" title="LeetCode_全排列 II"></a><a href="https://leetcode-cn.com/problems/permutations-ii/" target="_blank" rel="noopener">LeetCode_全排列 II</a></h2><p><strong>保证一个数字在 $idx$ 位置只会出现一次</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">        dfs(<span class="number">0</span>, nums, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idx 正在搜索第idx层</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不能再往下搜索</span></span><br><span class="line">        <span class="keyword">if</span> (idx == nums.length) &#123;</span><br><span class="line">            List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> value : nums) &#123;</span><br><span class="line">                result.add(value);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(result);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举这一层所有可以做出的选择</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 要保证一个数字在idx位置只会出现一次</span></span><br><span class="line">            <span class="keyword">if</span> (isRepeat(nums, idx, i)) <span class="keyword">continue</span>;</span><br><span class="line">            swap(nums, idx, i);</span><br><span class="line">            dfs(idx + <span class="number">1</span>, nums, list);</span><br><span class="line">            swap(nums, idx, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRepeat</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> idx, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = idx; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] == nums[i]) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-括号生成"><a href="#LeetCode-括号生成" class="headerlink" title="LeetCode_括号生成"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">LeetCode_括号生成</a></h2><p><img src="/2020/07/29/Leetcode-DFS/4.png" alt></p><p><strong>左右括号的选择情况</strong></p><ul><li><p><strong>左括号的数量 $&gt; 0$</strong></p></li><li><p><strong>当左括号、右括号的数量一样时，只能选择左括号</strong></p></li><li><p><strong>(右括号的数量 $&gt;0$ ) &amp;&amp; (右括号的数量  $!=$  左括号的数量) ，才能选右括号</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">        dfs(<span class="number">0</span>, n, n, <span class="keyword">new</span> <span class="keyword">char</span>[n &lt;&lt; <span class="number">1</span>], list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idx 搜索的层号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leftRemain 左括号的剩余数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rightRemain 右括号的剩余数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 用来存放每一层的选择</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> leftRemain, <span class="keyword">int</span> rightRemain, <span class="keyword">char</span>[] string, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx == string.length) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> String(string));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举这一层所有可能的选择</span></span><br><span class="line">        <span class="comment">// 选择一种可能之后，进入下一层搜索</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 什么情况可以选择左括号？左括号的数量 &gt; 0</span></span><br><span class="line">        <span class="comment">// 选择左括号，然后进入下一层搜索</span></span><br><span class="line">        <span class="keyword">if</span> (leftRemain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            string[idx] = <span class="string">'('</span>;</span><br><span class="line">            dfs(idx + <span class="number">1</span>, leftRemain - <span class="number">1</span>, rightRemain, string, list);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当左括号、右括号的数量一样时，只能选择左括号</span></span><br><span class="line">        <span class="comment">// 什么情况可以选择右括号？(右括号的数量 &gt; 0) &amp;&amp; (右括号的数量 != 左括号的数量)</span></span><br><span class="line">        <span class="comment">// 选择右括号，然后进入下一层搜索</span></span><br><span class="line">        <span class="keyword">if</span> (rightRemain &gt; <span class="number">0</span> &amp;&amp; leftRemain != rightRemain) &#123;</span><br><span class="line">            string[idx] = <span class="string">')'</span>;</span><br><span class="line">            dfs(idx + <span class="number">1</span>, leftRemain, rightRemain - <span class="number">1</span>, string, list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode-电话号码的字母组合&quot;&gt;&lt;a href=&quot;#LeetCode-电话号码的字母组合&quot; class=&quot;headerlink&quot; title=&quot;LeetCode_电话号码的字母组合&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-树</title>
    <link href="http://yoursite.com/2020/07/28/Leetcode-%E6%A0%91/"/>
    <id>http://yoursite.com/2020/07/28/Leetcode-树/</id>
    <published>2020-07-28T08:18:30.000Z</published>
    <updated>2020-07-28T09:13:16.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-二叉树的最近公共祖先"><a href="#LeetCode-二叉树的最近公共祖先" class="headerlink" title="LeetCode_二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">LeetCode_二叉树的最近公共祖先</a></h2><p><img src="/2020/07/28/Leetcode-树/1.png" alt></p><p><strong>去以 $root$ 为根节点的二叉树中查找 $p、q$ 的最近公共祖先</strong></p><p>① 如果 $p、q$ 同时存在于这棵二叉树中，就能成功返回它们的最近公共祖先</p><p>② 如果 $p、q$ 都不存在于这棵二叉树中，返回 $null$</p><p>③ 如果只有 $p$ 存在于这棵二叉树中，返回 $p$</p><p>④ 如果只有 $q$ 存在于这棵二叉树中，返回 $q$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// 去以root.left为根节点的二叉树中查找p、q的最近公共祖先</span></span><br><span class="line">        TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="comment">// 去以root.right为根节点的二叉树中查找p、q的最近公共祖先</span></span><br><span class="line">        TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">return</span> (left != <span class="keyword">null</span>) ? left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-恢复二叉搜索树"><a href="#LeetCode-恢复二叉搜索树" class="headerlink" title="LeetCode_恢复二叉搜索树"></a><a href="https://leetcode-cn.com/problems/recover-binary-search-tree/" target="_blank" rel="noopener">LeetCode_恢复二叉搜索树</a></h2><p><img src="/2020/07/28/Leetcode-树/2.png" alt></p><p><img src="/2020/07/28/Leetcode-树/3.png" alt></p><p><strong>中序遍历的结果分别为</strong></p><ul><li>$11、17、18、$<font color="red">$28、22$</font>$、37、42、44、62$</li><li>$11、17、$<font color="red">$44$</font>$、22、28、37、42、$<font color="red">$18$</font>$、62$</li></ul><p><strong>第 $1$ 个错误节点：第 $1$ 个逆序对中的较大节点</strong></p><p><strong>第 $2$ 个错误节点：最后 $1$ 个逆序对中的较小节点</strong></p><h3 id="递归实现-（O-n-、O-n-）"><a href="#递归实现-（O-n-、O-n-）" class="headerlink" title="递归实现$（O(n)、O(n)）$"></a>递归实现$（O(n)、O(n)）$</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 上一次中序遍历过的节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode prev;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 第一个错误节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode first;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 第二个错误节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode second;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 出现了逆序对</span></span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span> &amp;&amp; prev.val &gt; node.val) &#123;</span><br><span class="line">            <span class="comment">// 第2个错误节点：最后一个逆序对中较小的那个节点</span></span><br><span class="line">            second = node;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第1个错误节点：第一个逆序对中较大的那个节点</span></span><br><span class="line">            <span class="keyword">if</span> (first != <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            first = prev;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        findWrongNodes(root);</span><br><span class="line">        <span class="comment">// 交换2个错误节点的值</span></span><br><span class="line">        <span class="keyword">int</span> tmp = first.val;</span><br><span class="line">        first.val = second.val;</span><br><span class="line">        second.val = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findWrongNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        findWrongNodes(root.left);</span><br><span class="line">        find(root);</span><br><span class="line">        findWrongNodes(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Morris-实现中序遍历-（O-n-、O-1-）"><a href="#Morris-实现中序遍历-（O-n-、O-1-）" class="headerlink" title="$Morris$ 实现中序遍历$（O(n)、O(1)）$"></a>$Morris$ 实现中序遍历$（O(n)、O(1)）$</h3><p>使用 $Morris$ 方法遍历二叉树，可以实现时间复杂度 $O(n)$ 、空间复杂度 $O(1)$</p><p><img src="/2020/07/28/Leetcode-树/4.png" alt></p><p>执行步骤（假设遍历到当前节点是 $N$）</p><p>① 如果 $N.left != NULL$，找到 $N$ 的前驱节点 $P$</p><ul><li><p>如果 $P.right == NULL$</p><p><strong><font color="red">$P.right = N$</font> （添加图中红线）</strong></p><p>$N = N.left$</p><p>回到 ①</p></li><li><p>如果 $P.right == N$</p><p><strong><font color="red">$P.right = NULL $</font> （删除图中红线）</strong></p><p>打印 $N$ （找到该值，执行你所需要的操作）</p><p>$N = N.right$</p><p>回到 ①</p></li></ul><p>② 如果 $N.left == NULL$</p><p>​    打印 $N$</p><p>​    $N = N.right$</p><p>​    回到 ①</p><p>③ 重复①、②直到 $N == NULL$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 中序遍历：时间复杂度O(n)、空间复杂度O(1)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一次中序遍历过的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode prev;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个错误节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode first;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二个错误节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode second;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 出现了逆序对</span></span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span> &amp;&amp; prev.val &gt; node.val) &#123;</span><br><span class="line">            <span class="comment">// 第2个错误节点：最后一个逆序对中较小的那个节点</span></span><br><span class="line">            second = node;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第1个错误节点：第一个逆序对中较大的那个节点</span></span><br><span class="line">            <span class="keyword">if</span> (first != <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            first = prev;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        TreeNode node = root;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 找到前驱节点(predecessor)、后继节点(successor)</span></span><br><span class="line">                TreeNode pred = node.left;</span><br><span class="line">                <span class="keyword">while</span> (pred.right != <span class="keyword">null</span> &amp;&amp; pred.right != node) &#123;</span><br><span class="line">                    pred = pred.right;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pred.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    pred.right = node;</span><br><span class="line">                    node = node.left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// pred.right == node</span></span><br><span class="line">                    find(node);</span><br><span class="line">                    pred.right = <span class="keyword">null</span>;</span><br><span class="line">                    node = node.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                find(node);</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交换2个错误节点的值</span></span><br><span class="line">        <span class="keyword">int</span> tmp = first.val;</span><br><span class="line">        first.val = second.val;</span><br><span class="line">        second.val = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-最大BST子树"><a href="#LeetCode-最大BST子树" class="headerlink" title="LeetCode_最大BST子树"></a><a href="https://leetcode-cn.com/problems/largest-bst-subtree/" target="_blank" rel="noopener">LeetCode_最大BST子树</a></h2><p><img src="/2020/07/28/Leetcode-树/5.png" alt></p><h3 id="自顶向下"><a href="#自顶向下" class="headerlink" title="自顶向下"></a>自顶向下</h3><p><img src="/2020/07/28/Leetcode-树/6.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestBSTSubtree</span><span class="params">(TreeNode root)</span></span>;</span><br></pre></td></tr></table></figure><p>$largestBSTSubtree$ 的作用：返回以 $root$ 为根节点的二叉树的最大 $BST$ 子树的节点数量</p><p>$largestBSTSubtree$ 的实现：</p><ul><li><p>如果以 $root$ 为根节点的二叉树 $S$ 是 $BST$ ,就返回 $S$ 的节点数量</p></li><li><p>否则，就返回 $largestBSTSubtree(root.left)、largestBSTSubtree(root.right)$ 中的最大值</p></li></ul><p>时间复杂度分析</p><ul><li><p>$largestBSTSubtree$ 使用了前序遍历，时间复杂度是 $O(n)$</p></li><li><p>判断一棵树是否为 $BST$，时间复杂度是 $O(n)$</p></li><li>所以，总体时间复杂度是 $O(n^2)$</li></ul><p>如何优化？</p><ul><li><p>由于是自顶向下的遍历方式，所以在判断一棵树是否为 $BST$ 方面，存在重复的遍历判断</p></li><li><p>可以考虑改为自底向上的遍历方式：<strong>后序遍历</strong></p></li></ul><h3 id="自底向上"><a href="#自底向上" class="headerlink" title="自底向上"></a>自底向上</h3><p><img src="/2020/07/28/Leetcode-树/7.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInfo</span><span class="params">(TreeNode root)</span></span>;</span><br></pre></td></tr></table></figure><p>$getInfo$ 的作用：返回以 $root$ 为根节点的二叉树的最大 $BST$ 子树的信息</p><p>$getInfo$ 的实现：</p><ul><li><p>计算 $li = getInfo(root.left),ri = getInfo(root.right)$</p></li><li><p>如果下面的条件成立，说明以 $root$ 为根节点的二叉树就是最大 $BST$ 子树</p><p>$li == null || (li.root == root.left$  $\&amp;$ $\&amp;$  $li.max &lt; root.val)$</p><p>$ri == null || (ri.root == root.right$  $\&amp;$ $\&amp;$ $li.max &gt; root.val$</p></li><li><p>如果 $li != null$ $\&amp;$ $\&amp;$ $ri != null$</p><p>如果 $li.size &gt; ri.size$ ，返回 $li$ ；否则返回 $ri$</p></li><li><p>如果 $li != null$ ，返回 $li$ ；否则返回 $ri$</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestBSTSubtree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (root == <span class="keyword">null</span>) ? <span class="number">0</span> : getInfo(root).size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以root为根节点的二叉树的最大BST子树信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Info <span class="title">getInfo</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// li(left info)：左子树的最大BST子树信息</span></span><br><span class="line">        Info li = getInfo(root.left);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ri(right info)：右子树的最大BST子树信息</span></span><br><span class="line">        Info ri = getInfo(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        有4种情况，以root为根节点的二叉树就是一棵BST，最大BST子树就是其本身</span></span><br><span class="line"><span class="comment">        ① li != null &amp;&amp; ri != null</span></span><br><span class="line"><span class="comment">        &amp;&amp; li.root == root.left &amp;&amp; root.val &gt; li.max</span></span><br><span class="line"><span class="comment">        &amp;&amp; ri.root == root.right &amp;&amp; root.val &lt; ri.min</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ② li != null &amp;&amp; ri == null</span></span><br><span class="line"><span class="comment">        &amp;&amp; li.root == root.left &amp;&amp; root.val &gt; li.max</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ③ li == null &amp;&amp; ri != null</span></span><br><span class="line"><span class="comment">        &amp;&amp; ri.root == root.right &amp;&amp; root.val &lt; ri.min</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ④ li == null &amp;&amp; ri == null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> leftBstSize = -<span class="number">1</span>, rightBstSize = -<span class="number">1</span>, max = root.val, min = root.val;</span><br><span class="line">        <span class="keyword">if</span> (li == <span class="keyword">null</span>) &#123;</span><br><span class="line">            leftBstSize = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (li.root == root.left &amp;&amp; root.val &gt; li.max) &#123;</span><br><span class="line">            leftBstSize = li.size;</span><br><span class="line">            min = li.min;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ri == <span class="keyword">null</span>) &#123;</span><br><span class="line">            rightBstSize = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ri.root == root.right &amp;&amp; root.val &lt; ri.min) &#123;</span><br><span class="line">            rightBstSize = ri.size;</span><br><span class="line">            max = ri.max;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftBstSize &gt;= <span class="number">0</span> &amp;&amp; rightBstSize &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Info(root, <span class="number">1</span> + leftBstSize + rightBstSize, max, min);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以root为根节点的二叉树并不是BST</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回最大BST子树的节点数量较多的那个Info</span></span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; ri != <span class="keyword">null</span>) <span class="keyword">return</span> (li.size &gt; ri.size) ? li : ri;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回li、ri中不为null的那个Info</span></span><br><span class="line">        <span class="keyword">return</span> (li != <span class="keyword">null</span>) ? li : ri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大BST子树的信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** 根节点 */</span></span><br><span class="line">        <span class="keyword">public</span> TreeNode root;</span><br><span class="line">        <span class="comment">/** 节点总数 */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> size;</span><br><span class="line">        <span class="comment">/** 最大值 */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> max;</span><br><span class="line">        <span class="comment">/** 最小值 */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> min;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(TreeNode root, <span class="keyword">int</span> size, <span class="keyword">int</span> max, <span class="keyword">int</span> min)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = root;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">            <span class="keyword">this</span>.max = max;</span><br><span class="line">            <span class="keyword">this</span>.min = min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode-二叉树的最近公共祖先&quot;&gt;&lt;a href=&quot;#LeetCode-二叉树的最近公共祖先&quot; class=&quot;headerlink&quot; title=&quot;LeetCode_二叉树的最近公共祖先&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-动态规划</title>
    <link href="http://yoursite.com/2020/07/27/Leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2020/07/27/Leetcode-动态规划/</id>
    <published>2020-07-27T05:14:57.000Z</published>
    <updated>2020-07-28T06:51:13.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-礼物的最大价值"><a href="#LeetCode-礼物的最大价值" class="headerlink" title="LeetCode_礼物的最大价值"></a><a href="https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof/" target="_blank" rel="noopener">LeetCode_礼物的最大价值</a></h2><p><img src="/2020/07/27/Leetcode-动态规划/1.png" alt></p><p><strong>假设 $dp[row][col]$ 是走到 $[row][col]$ 位置时的最大价值</strong></p><p><strong>走到 $[row][col]$ 位置有 $2$ 种可能</strong></p><ul><li><strong>从 $[row][col-1]$ 位置往右走</strong></li><li><strong>从 $[row - 1][col]$位置往下走</strong></li></ul><p><strong>所以 $dp[row][col] = max(dp[row][col-1],dp[row-1][col]) + grid[row][col]$</strong></p><p><img src="/2020/07/27/Leetcode-动态规划/2.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rows = grid.length;</span><br><span class="line">    <span class="keyword">int</span> cols = grid[<span class="number">0</span>].length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[rows][cols];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 第0行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">1</span>; col &lt; cols; col++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][col] = dp[<span class="number">0</span>][col - <span class="number">1</span>] + grid[<span class="number">0</span>][col];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 第0列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            dp[row][<span class="number">0</span>] = dp[row - <span class="number">1</span>][<span class="number">0</span>] + grid[row][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">1</span>; col &lt; cols; col++) &#123;</span><br><span class="line">                dp[row][col] = Math.max(dp[row - <span class="number">1</span>][col], dp[row][col - <span class="number">1</span>]) + grid[row][col];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[rows - <span class="number">1</span>][cols - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将二维数组优化成一维数组"><a href="#将二维数组优化成一维数组" class="headerlink" title="将二维数组优化成一维数组"></a>将二维数组优化成一维数组</h3><p><img src="/2020/07/27/Leetcode-动态规划/3.png" alt></p><p><strong>举例：当计算 $grid[1][1]$ 时，一维数组中保存的组就是红圈中的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = grid.length;</span><br><span class="line">        <span class="keyword">int</span> cols = grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[cols];</span><br><span class="line">        dp[<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; cols; col++) &#123;</span><br><span class="line">                <span class="comment">// 0行的处理 grid[0][0]跳过</span></span><br><span class="line">                <span class="keyword">if</span> (row == <span class="number">0</span> &amp;&amp; col &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[col] = dp[col-<span class="number">1</span>] + grid[row][col];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (col == <span class="number">0</span> &amp;&amp; row &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 0列的处理 grid[0][0]跳过</span></span><br><span class="line">                    dp[col] = dp[col] + grid[row][col];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; col &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 先将原先的 dp[col] 与dp[col-1] 比较，再重新将 dp[col] 赋值</span></span><br><span class="line">                    dp[col] = Math.max(dp[col-<span class="number">1</span>], dp[col]) + grid[row][col];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[cols - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-买卖股票的最佳时机"><a href="#LeetCode-买卖股票的最佳时机" class="headerlink" title="LeetCode_买卖股票的最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">LeetCode_买卖股票的最佳时机</a></h2><p><img src="/2020/07/27/Leetcode-动态规划/4.png" alt></p><p><strong>第 $i$ 天买，第 $j$ 天卖的利润是</strong></p><p><strong>第 $i - j$ 天内，所有相邻两天股价差的和</strong></p><p><strong>举例：第 $1$ 天买，第 $4$ 天卖的利润是</strong></p><p><strong>$(6-3) + (3-5) + (5-1) == 6-1 == 5$</strong></p><p><img src="/2020/07/27/Leetcode-动态规划/5.png" alt></p><p>于是，转化为了求<strong>【最大子数组和】</strong>的问题</p><p>也就是求<strong>【最大连续子序列和】</strong>的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 前面扫描过的最小价格</span></span><br><span class="line">    <span class="keyword">int</span> minPrice = prices[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 前面扫描过的最大利润</span></span><br><span class="line">    <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 扫描所有的价格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; minPrice) &#123;</span><br><span class="line">                minPrice = prices[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 把第i天的股票卖出</span></span><br><span class="line">                maxProfit = Math.max(maxProfit, prices[i] - minPrice);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-编辑距离"><a href="#LeetCode-编辑距离" class="headerlink" title="LeetCode_编辑距离"></a><a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">LeetCode_编辑距离</a></h2><p><img src="/2020/07/27/Leetcode-动态规划/6.png" alt></p><h3 id="假设-dp-i-j"><a href="#假设-dp-i-j" class="headerlink" title="假设 $dp[i][j]$"></a>假设 $dp[i][j]$</h3><p><img src="/2020/07/27/Leetcode-动态规划/7.png" alt></p><ul><li><p><strong>字符串 $（”mice”）$为 $s1$ ，它的长度为 $n1$ ；字符串 $（”arise”）$为 $s2$ ，它的长度为 $n2$</strong> </p></li><li><p><strong>$dp$ 是大小为 $(n1+1) * (n2 + 1)$ 的二维数组</strong> </p></li><li><p><strong>$dp[i][j]$ 是 $s1[0,i)$ 转换成 $s2[0,j)$ 的最少操作数</strong></p></li><li><p><strong>$s1[0,i)$ 是由 $s1$ 的前 $i$ 个字符组成的子串（区间，如：$s1[0,2)mic$ 转换成 $s2[0,3)aris$）</strong></p></li><li><p><strong>$s2[0,j)$ 是由 $s2$ 的前 $j$ 个字符组成的子串</strong></p></li></ul><p><strong>很显然， $dp[n1][n2]$ 就是 $s1[0,n1)$ 转换成 $s2[0,n2)$ 的最少操作数</strong></p><p><strong>也就是 $s1$ 转换成 $s2$ 的最少操作数</strong></p><h3 id="求出-dp-i-j-边界"><a href="#求出-dp-i-j-边界" class="headerlink" title="求出 $dp[i][j]$ 边界"></a>求出 $dp[i][j]$ 边界</h3><p><img src="/2020/07/27/Leetcode-动态规划/8.png" alt></p><ol><li><p>最左上角的 $dp[0][0]$ ：代表 $s1$ 的<strong>空子串</strong>转换为 $s2$ 的空子串的最少操作数</p><p>其实就是什么也不用做，所以：$dp[0][0] = 0$</p></li><li><p>第 $0$ 列的 $dp[i][0]$ ：代表 $s1[0,i)$ 转换为 $s2$ 的空子串的最少操作数</p><p>其实就是删除 $s1[0,i)$ 的所有字符，所以： $dp[i][0] = i$</p></li><li><p>第 $0$ 行的 $dp[0][j]$：代表 $s1$ 的空子串转换为 $s2[0,j)$ 的最少操作数</p><p>其实就是插入 $s2[0,j)$ 的所有字符，所以：$dp[0][j] = j$ </p></li></ol><h3 id="求出其他位置的-dp-i-j"><a href="#求出其他位置的-dp-i-j" class="headerlink" title="求出其他位置的 $dp[i][j]$"></a>求出其他位置的 $dp[i][j]$</h3><p><img src="/2020/07/27/Leetcode-动态规划/9.png" alt></p><p>$dp[i][j]$ 是 $s1[0,i)$ 转换成 $s2[0,j)$ 的最少操作数 </p><p>可以分$4$ 种情况讨论 </p><p>① 先删除 $s1[0,i)$ 的最后一个字符得到 $s1[0, i - 1)$</p><p>​    然后由 $s1[0,i - 1)$ 转换为 $s2[0,j)$</p><p>​    这种情况下，$dp[i][j] = 1 + dp[i - 1][j]$</p><p>​    <strong>举例：</strong>$s1[0,3) mic$ 转换成 $s2[0,3)ari$ </p><ul><li>$s1[0,3)mic$ 删除最后一个字符 $s1[0,2)mi$（操作 $1$ ）</li><li>$s1[0,2)mi$ 再转换成  $s2[0,3)ari$（操作 $dp[i-1][j]$）</li></ul><p>② 先由 $s1[0,i)$ 转换为 $s2[0,j - 1)$ ，然后在最后插入字符 $s2[j-1]$ ，得到 $s2[0,j)$</p><p>​    这种情况下，$dp[i][j] = dp[i][j - 1] + 1$</p><p>​    <strong>举例：</strong>$s1[0,3) mic$ 转换成 $s2[0,3)ari$ </p><ul><li>$s1[0,3)mic$ 转换成  $s2[0,2)ar$（操作 $dp[i][j-1]$）</li><li>$s2[0,2)ar$ 插入一个字符，得到 $s2[0,3)ari$（操作 $1$ ）</li></ul><p><strong>情况③ 和④ 是比较最后一个字符是否相等，相等不用操作，不相等只需一个替换操作</strong></p><p>③ 如果 $s1[i - 1] != s2[j - 1]$，先由 $s1[0,i - 1)$ 转换为 $s2[0,j - 1)$ </p><p>​    然后将 $s1[i-1]$ 替换为 $s2[j - 1]$，这种情况下，$dp[i][j] = dp[i-1][j-1] + 1$</p><p>​    <strong>举例：</strong>$s1[0,3) mic$ 转换成 $s2[0,3)ari$ </p><ul><li>$s1[1]i$  $!= s2[1]r$ ，$s1[0,2)mi$ 转换为 $s2[0,2)ar$ (操作 $dp[i-1][j-1]$ )</li><li>$s1[2]c$ 转换为 $s2[2]i$ (操作 $1$ )</li></ul><p>④ 如果  $s1[i - 1] == s2[j - 1]$，由 $s1[0,i - 1)$ 转换为 $s2[0,j-1)$ 后就不用再做任何操作</p><p>​    这种情况下，$dp[i][j] = dp[i - 1][j - 1]$</p><p>​    <strong>举例：</strong>$s1[0,2) mi$ 转换成 $s2[0,3)ari$</p><ul><li>$s1[1]i$  $== s2[2]i$ ，$s1[0,1)m$ 转换为 $s2[0,2)ar$ (操作 $dp[i-1][j-1]$ )</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (word1 == <span class="keyword">null</span> || word2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] cs1 = word1.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] cs2 = word2.toCharArray();</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[cs1.length + <span class="number">1</span>][cs2.length + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 第0列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cs1.length; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 第0行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cs2.length; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 其他行其他列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cs1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cs2.length; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> top = dp[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> left = dp[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> leftTop = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (cs1[i - <span class="number">1</span>] != cs2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    leftTop++;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = Math.min(Math.min(top, left), leftTop);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[cs1.length][cs2.length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-最长回文子串"><a href="#LeetCode-最长回文子串" class="headerlink" title="LeetCode_最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">LeetCode_最长回文子串</a></h2><p><img src="/2020/07/27/Leetcode-动态规划/10.png" alt></p><h3 id="暴力法-O-n-3"><a href="#暴力法-O-n-3" class="headerlink" title="暴力法 $O(n^3)$"></a>暴力法 $O(n^3)$</h3><p><img src="/2020/07/27/Leetcode-动态规划/11.png" alt></p><p>列举出所有的子串，时间复杂度：$0(n^2)$</p><p>检查每一个子串是否为回文串，每一个子串所需时间复杂度：$O(n)$</p><p>总共时间复杂度：$O(n^3)$，空间复杂度：$O(1)$</p><h3 id="动态规划解法-O-n-2"><a href="#动态规划解法-O-n-2" class="headerlink" title="动态规划解法 $O(n^2)$"></a>动态规划解法 $O(n^2)$</h3><p><strong>其实是基于暴力法的优化，优化的部分：判断每个串是否为回文串</strong></p><p><strong>时间复杂度：$O(n^2)$</strong></p><p><strong>空间复杂度：$O(n^2)$</strong></p><p><strong>空间复杂度可以优化至 $O(n)$</strong></p><p><img src="/2020/07/27/Leetcode-动态规划/12.png" alt></p><p>假设字符串（”$babad$”）为 ，它的长度为 $n$</p><p>$dp$ 是大小为 $n * n$ 的二维数组，$dp[i][j]$ 表示 $s[i,j]$ 是否为回文串，存储 $true$ 、$false$ </p><p>分 $2$ 种情况求出 $dp[i][j]$ 的值</p><ol><li><p>如果 $s[i,j]$ 的长度（ $j-i+1$ ）≤ $2$ 时 </p><p>如果 $s[i]$ 等于 $s[j]$，那么 $s[i,j]$ 是回文串</p><p><strong>所以 $dp[i,j] = (s[i] == s[j])$</strong></p></li><li><p>如果 $s[i,j]$ 的长度（ $j-i+1$ ）＞ $2$ 时</p><p>如果 $s[i+1,j-1]$ 是回文串，并且 $s[i]$ 等于 $s[j]$ ，那么 $s[i,j]$ 是回文串</p><p><strong>所以 $dp[i][j] = dp[i+1,j-1]$  $\&amp;\&amp;$  $(s[i] == s[j])$</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">char</span>[] cs = s.toCharArray();</span><br><span class="line">    <span class="keyword">if</span> (cs.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">    <span class="comment">// 最长回文子串的长度（至少是1）</span></span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 最长回文子串的开始索引</span></span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[cs.length][cs.length];</span><br><span class="line">    <span class="comment">// 从下到上（i由大到小）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = cs.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 从左到右（j由小到大）</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; cs.length; j++) &#123;</span><br><span class="line">                <span class="comment">// cs[i, j]的长度</span></span><br><span class="line">                <span class="keyword">int</span> len = j - i + <span class="number">1</span>;</span><br><span class="line">                dp[i][j] = (cs[i] == cs[j]) &amp;&amp; (len &lt;= <span class="number">2</span> || dp[i + <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &amp;&amp; len &gt; maxLen) &#123; <span class="comment">// 说明cs[i, j]是回文子串</span></span><br><span class="line">                    maxLen = len;</span><br><span class="line">                    begin = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(cs, begin, maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展中心法-O-n-O-n-2"><a href="#扩展中心法-O-n-O-n-2" class="headerlink" title="扩展中心法 $O(n)$ ~ $O(n^2)$"></a>扩展中心法 $O(n)$ ~ $O(n^2)$</h3><p><img src="/2020/07/27/Leetcode-动态规划/13.png" alt></p><p>假设字符串（”$abbaba$”)的长度为 $n$ ，那么一共有 $n + (n-1) == 2n - 1$ 个扩展中心</p><p>时间复杂度：$O(n^2)$</p><p>空间复杂度：$O(1)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">char</span>[] cs = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (cs.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="comment">// 最长回文子串的长度（至少是1）</span></span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 最长回文子串的开始索引</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cs.length - <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 以字符为中心向左右扩展</span></span><br><span class="line">            <span class="keyword">int</span> len1 = palindromeLength(cs, i - <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 以字符右边的间隙为中心向左右扩展</span></span><br><span class="line">            <span class="keyword">int</span> len2 = palindromeLength(cs, i, i + <span class="number">1</span>);</span><br><span class="line">            len1 = Math.max(len1, len2);</span><br><span class="line">            <span class="keyword">if</span> (len1 &gt; maxLen) &#123;</span><br><span class="line">                maxLen = len1;</span><br><span class="line">                <span class="comment">// 根据长度和中心位置算出开始索引</span></span><br><span class="line">                begin = i - ((maxLen - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 以0号字符右边的间隙为中心的最长回文子串长度是2</span></span><br><span class="line">        <span class="keyword">if</span> (cs[<span class="number">0</span>] == cs[<span class="number">1</span>] &amp;&amp; maxLen &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// cs[0, 1]就是最长的回文子串</span></span><br><span class="line">            begin = <span class="number">0</span>;</span><br><span class="line">            maxLen = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(cs, begin, maxLen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 从l开始向左、从r开始向右扫描，获得的最长回文子串的长度</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">palindromeLength</span><span class="params">(<span class="keyword">char</span>[] cs, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; cs.length &amp;&amp; cs[l] == cs[r]) &#123;</span><br><span class="line">            l--;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r - l - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于扩展中心法的优化-O-n-O-n-2"><a href="#基于扩展中心法的优化-O-n-O-n-2" class="headerlink" title="基于扩展中心法的优化 $O(n)$ ~ $O(n^2)$"></a>基于扩展中心法的优化 $O(n)$ ~ $O(n^2)$</h3><p><img src="/2020/07/27/Leetcode-动态规划/14.png" alt></p><ol><li><p>算法的核心思想：由连续的相同字符组成的子串作为扩展中心</p><p>所以，字符串 “$babbbabaa$” 的扩展中心有</p><p>“$b$”、”$a$”、”$bbb$”、”$a$”、”$b$”、”$aa$”</p></li><li><p>核心逻辑</p><p>找到右边第一个不等于 $s[i]$ 的字符，记为位置 $r$ , $i$ 左边位置记为 $l$</p><p><strong>$r$ 作为下一次的 $i$</strong></p><p>由 $l$ 开始向左、$r$ 开始向右扩展，找到最长的回文子串</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">char</span>[] cs = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (cs.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="comment">// 最长回文子串的长度（至少是1）</span></span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 最长回文子串的开始索引</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; cs.length) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = i - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 找到右边第一个不等于cs[i]的位置</span></span><br><span class="line">            <span class="keyword">int</span> r = i;</span><br><span class="line">            <span class="keyword">while</span> (++r &lt; cs.length &amp;&amp; cs[r] == cs[i]);</span><br><span class="line">            <span class="comment">// r会成为新的i</span></span><br><span class="line">            i = r;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从l向左，从r向右扩展</span></span><br><span class="line">            <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; cs.length &amp;&amp; cs[l] == cs[r]) &#123;</span><br><span class="line">                l--;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 扩展结束后，cs[l + 1, r)就是刚才找到的最大回文子串</span></span><br><span class="line">            <span class="comment">// ++l后，l就是刚才找到的最大回文子串的开始索引</span></span><br><span class="line">            <span class="keyword">int</span> len = r - ++l;</span><br><span class="line">            <span class="keyword">if</span> (len &gt; maxLen) &#123;</span><br><span class="line">                maxLen = len;</span><br><span class="line">                begin = l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(cs, begin, maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Manacher-马拉车）-O-n"><a href="#Manacher-马拉车）-O-n" class="headerlink" title="Manacher (马拉车）$O(n)$"></a>Manacher (马拉车）$O(n)$</h3><h4 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h4><p><img src="/2020/07/27/Leetcode-动态规划/15.png" alt></p><p><strong>中间的 # 字符可以是任意字符，头部的 ^ 字符、尾部的 $ 字符，必须是原字符串中不包含的字符</strong></p><p><strong>$m[i]$ 的含义：</strong></p><ol><li><p><strong>是以 $cs[i]$ 为扩展中心的最大回文子串的长度（不包含 #​ 字符）</strong></p><p>最大回文子串在原字符串中的开始索引：$(i - m[i]) &gt;&gt; 1$</p></li><li><p><strong>是以 $cs[i]$ 为扩展中心的最大回文子串的右半部分或左半部分的长度（包含 # 字符）</strong></p></li></ol><p><strong><font color="red">所以，$Manacher$ 算法的关键在于求出 $m$ 数组</font></strong></p><p><strong>以下图 $m[8]$ (红色区域)举例：</strong></p><ul><li><p><strong>绿色区域</strong>就是以 $cs[8]a$ 为扩展中心的最大回文子串的长度 $m[8]3$（不包含 # 字符）</p></li><li><p><strong>蓝色区域</strong>就是以 $cs[8]a$ 为扩展中心的最大回文子串的右半部分或左半部分的长度 $m[8]3$（包含 # 字符）</p></li></ul><p><img src="/2020/07/27/Leetcode-动态规划/16.png" alt></p><h4 id="怎么求出数组-m-情况1"><a href="#怎么求出数组-m-情况1" class="headerlink" title="怎么求出数组 $m$ - 情况1"></a>怎么求出数组 $m$ - 情况1</h4><p><img src="/2020/07/27/Leetcode-动态规划/17.png" alt></p><ol><li><p><strong>假设已知</strong></p><p>索引 $l、li 、c 、i 、r$ 的值分别为 $1、 4、 6、 8、11$</p><p>$cs[l,r]$ 是以 $c$ 为中心的最大回文串<strong>（绿色区域）</strong></p><p>$i$、$li$ 以 $c$ 为中心对称，<strong>（蓝色区域）</strong>$m[i]$ 是待求项，已知$m[li] == 1$</p><p>$i + m[li] &lt; r$</p></li><li><p><strong>由于回文的对称性，得出结论</strong></p><p><strong><font color="red">当 $i + m[li] &lt; r$ 时</font></strong> </p><p>$m[i] = m[li] == 1$</p></li></ol><h4 id="怎么求出数组-m-情况2"><a href="#怎么求出数组-m-情况2" class="headerlink" title="怎么求出数组 $m$ - 情况2"></a>怎么求出数组 $m$ - 情况2</h4><p><img src="/2020/07/27/Leetcode-动态规划/18.png" alt></p><ol><li><p><strong>假设已知</strong></p><p><strong>$m[li] == 3$</strong></p><p><strong><font color="red">$i + m[li] == r$</font> (蓝色区域)</strong></p></li><li><p><strong>结论</strong></p><p><strong>当 <font color="red">$i + m[li] == r$</font> (蓝色区域)</strong></p><p>$m[i]$ 至少是 $m[li]$，也就是说，至少是 $3$</p><p>接下来利用扩展中心法以 $i$ <strong>(黄色区域)</strong> 为中心计算出 $m[i]$，<strong>也可以直接跳到 (橙色区域) 进行比较</strong></p><p><strong>直到当</strong> $i + m[i] &gt; r$ 时，更新 $c、r$ <strong>(超出 $c$ 管辖的范围 绿色区域)</strong></p><ul><li><p>$c = i$</p></li><li><p>$r = i + m[i]$</p></li></ul></li></ol><h4 id="怎么求出数组-m-情况3"><a href="#怎么求出数组-m-情况3" class="headerlink" title="怎么求出数组 $m$ - 情况3"></a>怎么求出数组 $m$ - 情况3</h4><p><img src="/2020/07/27/Leetcode-动态规划/19.png" alt></p><ol><li><p><strong>假设已知</strong></p><p>$m[li] == 5$</p><p><strong><font color="red">$i + m[li] &gt; r$</font> (蓝色区域)</strong></p></li><li><p><strong>结论</strong></p><p><strong>当 <font color="red">$i + m[li] &gt; r$</font> (蓝色区域)</strong></p><p>$m[i]$ 至少是 $r - i$，也就是说，至少是 $3$</p><p>接下来利用扩展中心法以 $i$  为中心计算出 $m[i]$</p><p><strong>直到当</strong> $i + m[i] &gt; r$ 时，更新 $c、r$ <strong>(超出 $c$ 管辖的范围 绿色区域)</strong></p><ul><li><p>$c = i$</p></li><li><p>$r = i + m[i]$</p></li></ul></li></ol><h4 id="怎么求出数组-m-情况4"><a href="#怎么求出数组-m-情况4" class="headerlink" title="怎么求出数组 $m$ - 情况4"></a>怎么求出数组 $m$ - 情况4</h4><p><img src="/2020/07/27/Leetcode-动态规划/20.png" alt></p><p><strong><font color="red">当 $i == r$ 时</font></strong></p><p>直接利用扩展中心法以 $i$ 为中心计算出 $m[i]$</p><p><strong>直到当</strong> $i + m[i] &gt; r$ 时，更新 $c、r$ <strong>(超出 $c$ 管辖的范围 绿色区域)</strong></p><ul><li><p>$c = i$</p></li><li><p>$r = i + m[i]$</p></li></ul><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] preprocess(<span class="keyword">char</span>[] oldCs) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[(oldCs.length &lt;&lt; <span class="number">1</span>) + <span class="number">3</span>];</span><br><span class="line">        cs[<span class="number">0</span>] = <span class="string">'^'</span>;</span><br><span class="line">        cs[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">        cs[cs.length - <span class="number">1</span>] = <span class="string">'$'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldCs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = (i + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            cs[idx] = oldCs[i];</span><br><span class="line">            cs[idx + <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">char</span>[] oldCs = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (oldCs.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预处理</span></span><br><span class="line">        <span class="keyword">char</span>[] cs = preprocess(oldCs);</span><br><span class="line">        <span class="comment">// 构建m数组</span></span><br><span class="line">        <span class="keyword">int</span>[] m = <span class="keyword">new</span> <span class="keyword">int</span>[cs.length];</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">1</span>, r = <span class="number">1</span>, lastIdx = m.length - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>, idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; lastIdx; i++) &#123;</span><br><span class="line">            <span class="comment">// 前三种情况</span></span><br><span class="line">            <span class="keyword">if</span> (r &gt; i) &#123;</span><br><span class="line">                <span class="keyword">int</span> li = (c &lt;&lt; <span class="number">1</span>) - i;</span><br><span class="line">                <span class="comment">// 满足是情况1，不满足是情况2、3</span></span><br><span class="line">                m[i] = (i + m[li] &lt;= r) ? m[li] : (r - i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 以i为中心，向左右扩展（情况2、3、4都可能会执行）</span></span><br><span class="line">            <span class="keyword">while</span> (cs[i + m[i] + <span class="number">1</span>] == cs[i - m[i] - <span class="number">1</span>]) &#123;</span><br><span class="line">                m[i]++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新c、r</span></span><br><span class="line">            <span class="keyword">if</span> (i + m[i] &gt; r) &#123;</span><br><span class="line">                c = i;</span><br><span class="line">                r = i + m[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找出更大的回文子串</span></span><br><span class="line">            <span class="keyword">if</span> (m[i] &gt; maxLen) &#123;</span><br><span class="line">                maxLen = m[i];</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> begin = (idx - maxLen) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(oldCs, begin, maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode-礼物的最大价值&quot;&gt;&lt;a href=&quot;#LeetCode-礼物的最大价值&quot; class=&quot;headerlink&quot; title=&quot;LeetCode_礼物的最大价值&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/probl
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-字符串</title>
    <link href="http://yoursite.com/2020/07/26/Leetcode-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2020/07/26/Leetcode-字符串/</id>
    <published>2020-07-26T08:52:28.000Z</published>
    <updated>2020-07-26T09:50:00.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-字符串轮转"><a href="#LeetCode-字符串轮转" class="headerlink" title="LeetCode_字符串轮转"></a><a href="https://leetcode-cn.com/problems/string-rotation-lcci/" target="_blank" rel="noopener">LeetCode_字符串轮转</a></h2><p><img src="/2020/07/26/Leetcode-字符串/1.png" alt></p><p><img src="/2020/07/26/Leetcode-字符串/2.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlipedString</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.equals(s2)||(s1.length()==s2.length()&amp;&amp;(s1+s1).contains(s2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-另一个树的子树"><a href="#LeetCode-另一个树的子树" class="headerlink" title="LeetCode_另一个树的子树"></a><a href="https://leetcode-cn.com/problems/subtree-of-another-tree/" target="_blank" rel="noopener">LeetCode_另一个树的子树</a></h2><p><img src="/2020/07/26/Leetcode-字符串/3.png" alt></p><h3 id="序列化实现"><a href="#序列化实现" class="headerlink" title="序列化实现"></a>序列化实现</h3><p><img src="/2020/07/26/Leetcode-字符串/4.png" alt></p><p><strong>非空节点：$值 !$，空节点：# $!$</strong></p><p><strong>空节点也必须要序列化，才能完整地表达唯一的一棵树</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> postSerialize(s).contains(postSerialize(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用后序遍历的方式进行序列化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root 树的根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">postSerialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"!"</span>);</span><br><span class="line">postSerialize(root, sb);</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSerialize</span><span class="params">(TreeNode node, StringBuilder sb)</span> </span>&#123;</span><br><span class="line">sb.append(node.val).append(<span class="string">"!"</span>);</span><br><span class="line"><span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">sb.append(<span class="string">"#!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">postSerialize(node.left, sb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">sb.append(<span class="string">"#!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">postSerialize(node.right, sb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP优化"><a href="#KMP优化" class="headerlink" title="KMP优化"></a>KMP优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> contains(postSerialize(s), postSerialize(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> plen = pattern.length();</span><br><span class="line"><span class="keyword">int</span> tlen = text.length();</span><br><span class="line"><span class="keyword">if</span> (tlen == <span class="number">0</span> || plen == <span class="number">0</span> || tlen &lt; plen) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span>[] next = next(pattern);</span><br><span class="line"><span class="keyword">int</span> pi = <span class="number">0</span>, ti = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmax = tlen - plen;</span><br><span class="line"><span class="keyword">while</span> (pi &lt; plen &amp;&amp; ti - pi &lt;= tmax) &#123;</span><br><span class="line"><span class="keyword">if</span> (pi &lt; <span class="number">0</span> || text.charAt(ti) == pattern.charAt(pi)) &#123;</span><br><span class="line">ti++;</span><br><span class="line">pi++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pi = next[pi];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pi == plen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] next(String pattern) &#123;</span><br><span class="line"><span class="keyword">int</span> len = pattern.length();</span><br><span class="line"><span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> n = next[i] = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> imax = len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; imax) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span> || pattern.charAt(i) == pattern.charAt(n)) &#123;</span><br><span class="line">i++;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">if</span> (pattern.charAt(i) == pattern.charAt(n)) &#123;</span><br><span class="line">next[i] = next[n];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">next[i] = n;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">n = next[n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用后序遍历的方式进行序列化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root 树的根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">postSerialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"!"</span>);</span><br><span class="line">postSerialize(root, sb);</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSerialize</span><span class="params">(TreeNode node, StringBuilder sb)</span> </span>&#123;</span><br><span class="line">sb.append(node.val).append(<span class="string">"!"</span>);</span><br><span class="line"><span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">sb.append(<span class="string">"#!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">postSerialize(node.left, sb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">sb.append(<span class="string">"#!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">postSerialize(node.right, sb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-有效的字母异位词"><a href="#LeetCode-有效的字母异位词" class="headerlink" title="LeetCode_有效的字母异位词"></a><a href="https://leetcode-cn.com/problems/valid-anagram/" target="_blank" rel="noopener">LeetCode_有效的字母异位词</a></h2><p><img src="/2020/07/26/Leetcode-字符串/5.png" alt></p><p><strong>本题字符串只包含小写字母</strong></p><p><strong>定义一个长度为 $26$ 的数组，遍历 $s$ 时，字符出现的次数 $++$，</strong></p><p><strong>遍历 $t$ 时，字符出现的次数 $—$，当出现不存在的字符就可返回 $false$</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">char</span>[] schars = s.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] tchars = t.toCharArray();</span><br><span class="line">    <span class="keyword">if</span> (schars.length != tchars.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> len = schars.length;</span><br><span class="line">    <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> schar : schars) &#123;</span><br><span class="line">            counts[schar - <span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--counts[tchars[i] - <span class="string">'a'</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-翻转字符串里的单词"><a href="#LeetCode-翻转字符串里的单词" class="headerlink" title="LeetCode_翻转字符串里的单词"></a><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/" target="_blank" rel="noopener">LeetCode_翻转字符串里的单词</a></h2><p><img src="/2020/07/26/Leetcode-字符串/6.png" alt></p><h3 id="消除字符串中的多余空格-双指针"><a href="#消除字符串中的多余空格-双指针" class="headerlink" title="消除字符串中的多余空格(双指针)"></a>消除字符串中的多余空格(双指针)</h3><p><img src="/2020/07/26/Leetcode-字符串/7.png" alt></p><p><strong>指针 $i$ 遍历完数组</strong></p><p><strong>指针 $cur$ 数组中可以覆盖的位置</strong></p><p><strong>$space$ 前一个字符是否为空格字符</strong></p><h3 id="指定范围的字符串逆序"><a href="#指定范围的字符串逆序" class="headerlink" title="指定范围的字符串逆序"></a>指定范围的字符串逆序</h3><p><strong>将整个有效字符串逆序，再将每个单词逆序</strong></p><p><img src="/2020/07/26/Leetcode-字符串/8.png" alt></p><p><strong>双指针：交换位置</strong></p><p><img src="/2020/07/26/Leetcode-字符串/9.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 消除多余的空格</span></span><br><span class="line">    <span class="comment">// 字符串最终的有效长度</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当前用来存放字符的位置</span></span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 前一个字符是否为空格字符</span></span><br><span class="line">    <span class="keyword">boolean</span> space = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (chars[i] != <span class="string">' '</span>) &#123; <span class="comment">// chars[i]是非空格字符</span></span><br><span class="line">chars[cur++] = chars[i];</span><br><span class="line">space = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (space == <span class="keyword">false</span>) &#123; <span class="comment">// chars[i]是空格字符，chars[i - 1]是非空格字符</span></span><br><span class="line">chars[cur++] = <span class="string">' '</span>;</span><br><span class="line">space = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    len = space ? (cur - <span class="number">1</span>) :cur;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对整一个有效字符串进行逆序</span></span><br><span class="line">    reverse(chars, <span class="number">0</span>, len);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对每一个单词进行逆序</span></span><br><span class="line">    <span class="comment">// 前一个空格字符的位置（有-1位置有个假想的哨兵，就是一个假想的空格字符）</span></span><br><span class="line">    <span class="keyword">int</span> prevSapceIdx = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (chars[i] != <span class="string">' '</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">// i是空格字符的位置</span></span><br><span class="line">reverse(chars, prevSapceIdx + <span class="number">1</span>, i);</span><br><span class="line">prevSapceIdx = i;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 翻转最后一个单词</span></span><br><span class="line">    reverse(chars, prevSapceIdx + <span class="number">1</span>, len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(chars, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将[li, ri)范围内的字符串进行逆序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> li, <span class="keyword">int</span> ri)</span> </span>&#123;</span><br><span class="line">    ri--;</span><br><span class="line">    <span class="keyword">while</span> (li &lt; ri) &#123;</span><br><span class="line">    <span class="keyword">char</span> tmp = chars[li];</span><br><span class="line">    chars[li] = chars[ri];</span><br><span class="line">    chars[ri] = tmp;</span><br><span class="line">    li++;</span><br><span class="line">    ri--;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-无重复字符的最长子串"><a href="#LeetCode-无重复字符的最长子串" class="headerlink" title="LeetCode_无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">LeetCode_无重复字符的最长子串</a></h2><p><img src="/2020/07/26/Leetcode-字符串/10.png" alt></p><p><img src="/2020/07/26/Leetcode-字符串/12.png" alt></p><p><strong>$pi$ 是 $s[i]$ 字符上一次出现的位置</strong></p><p><strong>$li$ 是以 $s[i-1]$字符结尾的最长不重复子串的开始索引（最左索引）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">if</span> (chars.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用来保存每一个字符上一次出现的位置</span></span><br><span class="line">    Map&lt;Character, Integer&gt; prevIdxes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    prevIdxes.put(chars[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 以i - 1位置字符结尾的最长不重复字符串的开始索引（最左索引）</span></span><br><span class="line">    <span class="keyword">int</span> li = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">    <span class="comment">// i位置字符上一次出现的位置</span></span><br><span class="line">    Integer pi = prevIdxes.get(chars[i]);</span><br><span class="line">    <span class="keyword">if</span> (pi != <span class="keyword">null</span> &amp;&amp; li &lt;= pi) &#123;</span><br><span class="line">    li = pi + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// 存储这个字符出现的位置</span></span><br><span class="line">        prevIdxes.put(chars[i], i);</span><br><span class="line">        <span class="comment">// 求出最长不重复子串的长度</span></span><br><span class="line">        max = Math.max(max, i - li + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode-字符串轮转&quot;&gt;&lt;a href=&quot;#LeetCode-字符串轮转&quot; class=&quot;headerlink&quot; title=&quot;LeetCode_字符串轮转&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/st
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode_栈_队列</title>
    <link href="http://yoursite.com/2020/07/25/Leetcode-%E6%A0%88-%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2020/07/25/Leetcode-栈-队列/</id>
    <published>2020-07-25T08:09:59.000Z</published>
    <updated>2020-07-26T06:51:30.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-最小栈"><a href="#LeetCode-最小栈" class="headerlink" title="LeetCode_最小栈"></a><a href="https://leetcode-cn.com/problems/min-stack/" target="_blank" rel="noopener">LeetCode_最小栈</a></h2><p><img src="/2020/07/25/Leetcode-栈-队列/1.png" alt></p><h3 id="多维护一个栈，来保存最小数据"><a href="#多维护一个栈，来保存最小数据" class="headerlink" title="多维护一个栈，来保存最小数据"></a>多维护一个栈，来保存最小数据</h3><p><img src="/2020/07/25/Leetcode-栈-队列/2.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 用来存放正常数据 */</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack;</span><br><span class="line">    <span class="comment">/* 用来存放最小数据 */</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack.push(x);</span><br><span class="line">        <span class="keyword">if</span> (minStack.isEmpty()) &#123;</span><br><span class="line">            minStack.push(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            minStack.push(Math.min(x, minStack.peek()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表实现，同时保存value和最小值"><a href="#链表实现，同时保存value和最小值" class="headerlink" title="链表实现，同时保存value和最小值"></a>链表实现，同时保存value和最小值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node(<span class="number">0</span>, Integer.MAX_VALUE, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node(x, Math.min(x, head.min), head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> min;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> min, Node next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.min = min;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-滑动窗口最大值"><a href="#LeetCode-滑动窗口最大值" class="headerlink" title="LeetCode_滑动窗口最大值"></a><a href="https://leetcode-cn.com/problems/sliding-window-maximum/" target="_blank" rel="noopener">LeetCode_滑动窗口最大值</a></h2><p><img src="/2020/07/25/Leetcode-栈-队列/3.png" alt></p><h3 id="双端队列实现"><a href="#双端队列实现" class="headerlink" title="双端队列实现"></a>双端队列实现</h3><p>① 如果 $nums[ri] ≥ nums[$ 队尾 $]$，不断删除队尾，直到 $nums[$ 队尾 $]≥ nums[ri]$</p><p>② 将索引 $ri$ 加入队尾</p><p>③ 如 果 $li ≥ 0$ （$li$ 滑动窗口的最左边）</p><ul><li><p>删除失效的队头（<strong>队头索引 $&lt; li$ 就代表失效</strong>）</p></li><li><p>更新 $li$ 位置的窗口最大值为 $nums[$ 队头 $]$</p></li></ul><p>注意</p><ul><li><strong>队列中存放的是索引</strong></li><li>从对头到对尾，$nums[$ 队列元素 $]$，是逐渐减小的<strong>（队头保留滑动窗口的最大值）</strong></li></ul><p><strong>举例：当滑动窗口到索引 $1$ 时，窗口最大值为 $7$，如下图所示</strong></p><p><img src="/2020/07/25/Leetcode-栈-队列/4.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span> || k &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> nums;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] maxes = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length - k + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// peek: 取值（偷偷瞥一眼）</span></span><br><span class="line">        <span class="comment">// poll: 删除（削）</span></span><br><span class="line">        <span class="comment">// offer: 添加（入队）</span></span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ri = <span class="number">0</span>; ri &lt; nums.length; ri++) &#123;</span><br><span class="line">            <span class="comment">// 只要nums[队尾] &lt;= nums[i]，就删除队尾</span></span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty() &amp;&amp; nums[ri] &gt;= nums[deque.peekLast()]) &#123;</span><br><span class="line">                <span class="comment">// deque.pollLast();</span></span><br><span class="line">                deque.removeLast();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将i加到队尾</span></span><br><span class="line">            <span class="comment">// deque.offerLast(ri);</span></span><br><span class="line">            deque.addLast(ri);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查窗口的索引是否合法</span></span><br><span class="line">            <span class="comment">// li 滑动窗口的最左边</span></span><br><span class="line">            <span class="keyword">int</span> li = ri - k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (li &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查队头的合法性</span></span><br><span class="line">            <span class="keyword">if</span> (deque.peekFirst() &lt; li) &#123;</span><br><span class="line">                <span class="comment">// 队头不合法（失效，不在滑动窗口索引范围内）</span></span><br><span class="line">                <span class="comment">// deque.pollFirst();</span></span><br><span class="line">                deque.removeFirst();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置窗口的最大值</span></span><br><span class="line">            maxes[li] = nums[deque.peekFirst()];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-最大二叉树"><a href="#LeetCode-最大二叉树" class="headerlink" title="LeetCode_最大二叉树"></a><a href="https://leetcode-cn.com/problems/maximum-binary-tree/" target="_blank" rel="noopener">LeetCode_最大二叉树</a></h2><p><img src="/2020/07/25/Leetcode-栈-队列/5.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> findRoot(nums, <span class="number">0</span>, nums.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找出[l, r)范围的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出[l, r)范围内最大值的索引</span></span><br><span class="line">        <span class="keyword">int</span> maxIdx = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt; r; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[maxIdx]) maxIdx = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(nums[maxIdx]);</span><br><span class="line">        root.left = findRoot(nums, l, maxIdx);</span><br><span class="line">        root.right = findRoot(nums, maxIdx + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目变种："><a href="#题目变种：" class="headerlink" title="题目变种："></a>题目变种：</h3><p>返回一个数组，<strong>数组里面存着每个节点的父节点的索引</strong>（如果没有父节点，就存 $-1$ ）</p><p><img src="/2020/07/25/Leetcode-栈-队列/9.png" alt></p><h4 id="利用栈求左、右边第一个比它大的数（单调栈）"><a href="#利用栈求左、右边第一个比它大的数（单调栈）" class="headerlink" title="利用栈求左、右边第一个比它大的数（单调栈）"></a>利用栈求左、右边第一个比它大的数（单调栈）</h4><p><strong>注意：栈中只存放索引，图为方便举例，包括值</strong></p><p><strong>举例：</strong></p><p><strong>① 索引 $1$ 入栈时，$nums[0] &gt; nums[1] $，索引 $1$ 入栈</strong></p><p><strong>所以索引 $1$ 左边第一个比它大的数就是索引 $0$</strong></p><p><img src="/2020/07/25/Leetcode-栈-队列/6.png" alt></p><p><strong>②  索引 $2$ 入栈时，$nums[1] &gt; nums[2] $，索引 $2$ 入栈</strong></p><p><strong>所以索引 $2$ 左边第一个比它大的数就是索引 $1$</strong></p><p><img src="/2020/07/25/Leetcode-栈-队列/7.png" alt></p><p><strong>③ 索引 $3$ 入栈时，$nums[3] &gt; nums[2]$，索引 $2$ 出栈，所以索引 $2$ 右边第一个比它大的数就是索引 $3$</strong></p><p><strong>又$nums[3] &gt; nums[1]$，索引 $1$ 出栈，所以索引 $1$ 右边第一个比它大的数就是索引 $3$</strong></p><p><strong>又$nums[3] &gt; nums[0]$，索引 $0$ 出栈，所以索引 $0$ 右边第一个比它大的数就是索引 $3$</strong></p><p><strong>栈顶为空，索引 $3$ 入栈</strong></p><p><img src="/2020/07/25/Leetcode-栈-队列/8.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] parentIndexes(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1.扫描一遍所有的元素</span></span><br><span class="line"><span class="comment">    * 2.保持栈从栈底到栈顶是单调递减的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">int</span>[] lis = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">int</span>[] ris = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        ris[i] = -<span class="number">1</span>;</span><br><span class="line">        lis[i] = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 新遍历的索引的值大</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i] &gt; nums[stack.peek()]) &#123;</span><br><span class="line">            <span class="comment">// 栈顶索引 右边第一个比它大的数就是 i</span></span><br><span class="line">            ris[stack.pop()] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 准备入栈的索引的 栈顶索引就是左边第一个比它大的数</span></span><br><span class="line">            lis[i] = stack.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组lis、ris中比较大的值就是每个节点的父节点的索引</span></span><br><span class="line">    <span class="keyword">int</span>[] pis = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pis.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lis[i] == -<span class="number">1</span> &amp;&amp; ris[i] == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// i位置的是根节点</span></span><br><span class="line">            pis[i] = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lis[i] == -<span class="number">1</span>) &#123;</span><br><span class="line">            pis[i] = ris[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ris[i] == -<span class="number">1</span>) &#123;</span><br><span class="line">            pis[i] = lis[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[lis[i]] &lt; nums[ris[i]]) &#123;</span><br><span class="line">            pis[i] = lis[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pis[i] = ris[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-每日温度"><a href="#LeetCode-每日温度" class="headerlink" title="LeetCode_每日温度"></a><a href="https://leetcode-cn.com/problems/daily-temperatures/" target="_blank" rel="noopener">LeetCode_每日温度</a></h2><p><img src="/2020/07/25/Leetcode-栈-队列/10.png" alt></p><h3 id="利用栈求右边第一个比它大的数-原理同上单调栈"><a href="#利用栈求右边第一个比它大的数-原理同上单调栈" class="headerlink" title="利用栈求右边第一个比它大的数(原理同上单调栈)"></a>利用栈求右边第一个比它大的数(原理同上单调栈)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] dailyTemperatures(<span class="keyword">int</span>[] T) &#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="keyword">null</span> || T.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[T.length];</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 这里应该要写大于，不要写大于等于</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; T[i] &gt; T[stack.peek()]) &#123;</span><br><span class="line">            result[stack.peek()] = i - stack.peek();</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="倒推法"><a href="#倒推法" class="headerlink" title="倒推法"></a>倒推法</h3><p>$i$ 用来扫描所有的元素，从右往左扫描（ $i$ 逐渐递减），一开始 $i$ 指向倒数第 $2$ 个元素</p><p><img src="/2020/07/25/Leetcode-栈-队列/11.png" alt></p><p>对于每一个 $i$，一开始令 $j = i + 1$</p><p>① 如果 $T[i] &lt; T[j]$， 那么 $values[i] = j - i$，然后 $i—$ </p><p>② 如果 $T[i] == T[j]$</p><ul><li><p>如果 $values[j] == 0$，$values[i] = 0$，然后 $i—$ </p></li><li><p>如果 $values[j] != 0$，$values[i] = values[j] + j - i$，然后 $i—$</p></li></ul><p>③ 如果 $T[i] &gt; T[j]$</p><ul><li><p>如果 $values[j] == 0$，$values[i] = 0$，然后 $i—$ </p></li><li><p>如果 $values[j] != 0$，$j = j + values[j]$，重新进入①的判断</p></li></ul><p><strong>举例：</strong></p><p><img src="/2020/07/25/Leetcode-栈-队列/12.png" alt></p><p><strong>① 当 $i == 3$ 时，$j == 4$</strong></p><p>$T[3] &gt; T[4]，values[4] != 0，j = 4 + 1 = 5$</p><p>$T[3] &gt; T[5]，values[5] != 0，j = 5 + 1 = 6$</p><p>$T[3] &lt; T[6]，values[3] = 6 - 3 $</p><p><img src="/2020/07/25/Leetcode-栈-队列/13.png" alt></p><p><strong>② 当 $i == 2$ 时，$j == 3$</strong></p><p>$T[2] == T[3]$，$values[3] != 0$，$values[2] = values[3] + 3 - 2 = 4$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] dailyTemperatures(<span class="keyword">int</span>[] T) &#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="keyword">null</span> || T.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span>[] values = <span class="keyword">new</span> <span class="keyword">int</span>[T.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = T.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (T[i] &lt; T[j]) &#123;</span><br><span class="line">                values[i] = j - i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (values[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                values[i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T[i] == T[j]) &#123; <span class="comment">// 此条件可以省略</span></span><br><span class="line">                values[i] = values[j] + j - i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="comment">/*else &#123;</span></span><br><span class="line"><span class="comment">                j = j + values[j];</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            j = j + values[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="倒推法-精简条件"><a href="#倒推法-精简条件" class="headerlink" title="倒推法 - 精简条件"></a>倒推法 - 精简条件</h3><p>$i$ 用来扫描所有的元素，从右往左扫描（ $i$ 逐渐递减），一开始 $i$ 指向倒数第 $2$ 个元素</p><p>对于每一个 $i$，一开始令 $j = i + 1$</p><p>① 如果 $T[i] &lt; T[j]$ 那么 $values[i] = j - i$ ，然后 $i- -$ </p><p>② 如果 $values[j] == 0$，那么 $values[i] == 0$，然后  $i- -$ </p><p>③ 否则，设置 $j = j + values[j]$ 回到步骤①</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] dailyTemperatures(<span class="keyword">int</span>[] T) &#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="keyword">null</span> || T.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span>[] values = <span class="keyword">new</span> <span class="keyword">int</span>[T.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = T.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (T[i] &lt; T[j]) &#123;</span><br><span class="line">                values[i] = j - i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (values[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                values[i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当T[i] == T[j]的时候</span></span><br><span class="line">            j = j + values[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode-最小栈&quot;&gt;&lt;a href=&quot;#LeetCode-最小栈&quot; class=&quot;headerlink&quot; title=&quot;LeetCode_最小栈&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/min-stac
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode_链表</title>
    <link href="http://yoursite.com/2020/07/25/Leetcode_%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/07/25/Leetcode_链表/</id>
    <published>2020-07-25T07:09:42.000Z</published>
    <updated>2020-07-25T07:41:55.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-移除链表元素"><a href="#LeetCode-移除链表元素" class="headerlink" title="LeetCode_移除链表元素"></a><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/" target="_blank" rel="noopener">LeetCode_移除链表元素</a></h2><p><img src="/2020/07/25/Leetcode_链表/1.png" alt></p><p>时间复杂度：$O(n)$、空间复杂度：$O(1)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 新链表的虚拟头结点</span></span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 新链表的尾结点</span></span><br><span class="line">        ListNode newTail = newHead;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val != val) &#123;</span><br><span class="line">                newTail.next = head;</span><br><span class="line">                newTail = head;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newTail.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-两数相加"><a href="#LeetCode-两数相加" class="headerlink" title="LeetCode_两数相加"></a><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">LeetCode_两数相加</a></h2><p><img src="/2020/07/25/Leetcode_链表/2.png" alt></p><p><img src="/2020/07/25/Leetcode_链表/3.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode last = dummyHead;</span><br><span class="line">        <span class="comment">// 进位值</span></span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                v1 = l1.val;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                v2 = l2.val;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> sum = v1 + v2 + carry;</span><br><span class="line">            <span class="comment">// 设置进位值</span></span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// sum的个位数作为新节点的值</span></span><br><span class="line">            last.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            last = last.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查最后的进位</span></span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// carry == 1</span></span><br><span class="line">            last.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-相交链表"><a href="#LeetCode-相交链表" class="headerlink" title="LeetCode_相交链表"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">LeetCode_相交链表</a></h2><p><img src="/2020/07/25/Leetcode_链表/4.png" alt></p><p><img src="/2020/07/25/Leetcode_链表/5.png" alt></p><p><img src="/2020/07/25/Leetcode_链表/6.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode curA = headA, curB = headB;</span><br><span class="line">        <span class="keyword">while</span> (curA != curB) &#123;</span><br><span class="line">            curA = (curA == <span class="keyword">null</span>) ? headB : curA.next;</span><br><span class="line">            curB = (curB == <span class="keyword">null</span>) ? headA : curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-分隔链表"><a href="#LeetCode-分隔链表" class="headerlink" title="LeetCode_分隔链表"></a><a href="https://leetcode-cn.com/problems/partition-list/" target="_blank" rel="noopener">LeetCode_分隔链表</a></h2><p><img src="/2020/07/25/Leetcode_链表/7.png" alt></p><h3 id="双指针法："><a href="#双指针法：" class="headerlink" title="双指针法："></a>双指针法：</h3><p><strong>一个指针存放小于 $x$ 的值，另一个指针存放大于等于 $x$ 的值</strong></p><p><img src="/2020/07/25/Leetcode_链表/8.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode lHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode lTail = lHead;</span><br><span class="line">        ListNode rHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode rTail = rHead;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123; <span class="comment">// 放在lTail后面</span></span><br><span class="line">                lTail.next = head;</span><br><span class="line">                lTail = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 放在rTail后面</span></span><br><span class="line">                rTail.next = head;</span><br><span class="line">                rTail = head;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这句代码不能少</span></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 因为可能出现这样的情况:</span></span><br><span class="line"><span class="comment">         * 原链表倒数第N个节点A的值是&gt;=x的，A后面所有节点的值都是&lt;x的</span></span><br><span class="line"><span class="comment">         * 然后rTail.next最终其实就是A.next</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rTail.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 将rHead.next拼接在lTail后面</span></span><br><span class="line">        lTail.next = rHead.next;</span><br><span class="line">        <span class="keyword">return</span> lHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-回文链表"><a href="#LeetCode-回文链表" class="headerlink" title="LeetCode_回文链表"></a><a href="https://leetcode-cn.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">LeetCode_回文链表</a></h2><p><img src="/2020/07/25/Leetcode_链表/9.png" alt></p><h3 id="利用快慢指针得到中间节点"><a href="#利用快慢指针得到中间节点" class="headerlink" title="利用快慢指针得到中间节点"></a>利用快慢指针得到中间节点</h3><p><img src="/2020/07/25/Leetcode_链表/10.png" alt></p><h3 id="翻转中间节点后面的链表"><a href="#翻转中间节点后面的链表" class="headerlink" title="翻转中间节点后面的链表"></a>翻转中间节点后面的链表</h3><p><img src="/2020/07/25/Leetcode_链表/11.png" alt></p><p><img src="/2020/07/25/Leetcode_链表/12.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        <span class="keyword">if</span> (head.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> head.val == head.next.val;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到中间节点</span></span><br><span class="line">        ListNode mid = middleNode(head);</span><br><span class="line">        <span class="comment">// 翻转右半部分（中间节点的右边部分）</span></span><br><span class="line">        ListNode rHead = reverseList(mid.next);</span><br><span class="line">        ListNode lHead = head;</span><br><span class="line">        ListNode rOldHead = rHead;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从lHead、rHead出发，判断是否为回文链表</span></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (rHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lHead.val != rHead.val) &#123;</span><br><span class="line">                result = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rHead = rHead.next;</span><br><span class="line">            lHead = lHead.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复右半部分（对右半部分再次翻转）</span></span><br><span class="line">        reverseList(rOldHead);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到中间节点（右半部分链表头结点的前一个节点）</span></span><br><span class="line"><span class="comment">     * 比如 1&gt;2&gt;3&gt;2&gt;1中的3是中间节点</span></span><br><span class="line"><span class="comment">     * 比如 1&gt;2&gt;2&gt;1中左边第一个2是中间节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 翻转链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 原链表的头结点</span></span><br><span class="line"><span class="comment"> * 比如原链表：1&gt;2&gt;3&gt;4&gt;null，翻转之后是：4&gt;3&gt;2&gt;1&gt;null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 翻转之后链表的头结点（返回4）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode tmp = head.next;</span><br><span class="line">            head.next = newHead;</span><br><span class="line">            newHead = head;</span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode-移除链表元素&quot;&gt;&lt;a href=&quot;#LeetCode-移除链表元素&quot; class=&quot;headerlink&quot; title=&quot;LeetCode_移除链表元素&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode_数组_排序</title>
    <link href="http://yoursite.com/2020/07/25/Leetcode_%E6%95%B0%E7%BB%84_%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/07/25/Leetcode_数组_排序/</id>
    <published>2020-07-25T05:57:33.000Z</published>
    <updated>2020-07-25T07:08:11.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-合并两个有序数组"><a href="#LeetCode-合并两个有序数组" class="headerlink" title="LeetCode 合并两个有序数组"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">LeetCode 合并两个有序数组</a></h2><p><img src="/2020/07/25/Leetcode_数组_排序/1.png" alt></p><h3 id="双指针-从后往前"><a href="#双指针-从后往前" class="headerlink" title="双指针 / 从后往前"></a>双指针 / 从后往前</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入的两个数组是有序的</span></span><br><span class="line">        <span class="keyword">int</span> i1 = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 将数组nums1 从后往前重新赋值</span></span><br><span class="line">        <span class="keyword">int</span> cur = nums1.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i1 &gt;= <span class="number">0</span> &amp;&amp; nums2[i2] &lt; nums1[i1]) &#123;</span><br><span class="line">                nums1[cur--] = nums1[i1--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// i1 &lt; 0 || nums2[i2] &gt;= nums1[i1]</span></span><br><span class="line">                nums1[cur--] = nums2[i2--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-颜色分类"><a href="#LeetCode-颜色分类" class="headerlink" title="LeetCode 颜色分类"></a><a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">LeetCode 颜色分类</a></h2><p><img src="/2020/07/25/Leetcode_数组_排序/2.png" alt></p><h3 id="三指针"><a href="#三指针" class="headerlink" title="三指针"></a>三指针</h3><p><img src="/2020/07/25/Leetcode_数组_排序/3.png" alt></p><p>红色指针：（i） 遍历完全部元素</p><p>绿色指针：（l）追踪 0 的最右边界</p><p>紫色指针：（r）2 的最左边界和当前考虑的元素</p><p><strong>遇到1：跳过，红色指针++</strong></p><p><strong>遇到0：跟绿色指针交换值，绿色指针++、红色指针++</strong></p><p><strong>遇到2：跟紫色指针交换值，紫色指针—，再次对红色指针的值进行判断</strong></p><p><strong>表格中颜色是执行操作后指针最后所处的位置</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">初始值</th><th style="text-align:center">1</th><th style="text-align:center">0</th><th style="text-align:center">2</th><th style="text-align:center">1</th><th style="text-align:center">1</th><th style="text-align:center">0</th><th style="text-align:center">2</th></tr></thead><tbody><tr><td style="text-align:center">遇到1</td><td style="text-align:center"><strong><font color="green">1</font></strong></td><td style="text-align:center"><strong><font color="red">0</font></strong></td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center"><strong><font color="#6810C0">2</font></strong></td></tr><tr><td style="text-align:center">遇到0</td><td style="text-align:center">0</td><td style="text-align:center"><strong><font color="green">1</font></strong></td><td style="text-align:center"><strong><font color="red">2</font></strong></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center"><strong><font color="#6810C0">2</font></strong></td></tr><tr><td style="text-align:center">遇到2，执行第1次</td><td style="text-align:center">0</td><td style="text-align:center"><strong><font color="green">1</font></strong></td><td style="text-align:center"><strong><font color="red">2</font></strong></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center"><strong><font color="#6810C0">0</font></strong></td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">遇到2，执行第2次</td><td style="text-align:center">0</td><td style="text-align:center"><strong><font color="green">1</font></strong></td><td style="text-align:center"><strong><font color="red">0</font></strong></td><td style="text-align:center">1</td><td style="text-align:center"><strong><font color="#6810C0">1</font></strong></td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">遇到0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"><strong><font color="green">1</font></strong></td><td style="text-align:center"><strong><font color="red">1</font></strong></td><td style="text-align:center"><strong><font color="#6810C0">1</font></strong></td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 一个只包含0、1、2的整型数组，要求对它进行【原地】排序</span></span><br><span class="line"><span class="comment">     * 空间复杂度O(1)，时间复杂度O(n)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                swap(nums, i++, l++);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                swap(nums, i, r--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-部分排序"><a href="#LeetCode-部分排序" class="headerlink" title="LeetCode 部分排序"></a><a href="https://leetcode-cn.com/problems/sub-sort-lcci/" target="_blank" rel="noopener">LeetCode 部分排序</a></h2><p><img src="/2020/07/25/Leetcode_数组_排序/4.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] subSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; -<span class="number">1</span>, -<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从左扫描到右寻找逆序对（正序：逐渐变大）</span></span><br><span class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 用来记录最右的那个逆序对位置</span></span><br><span class="line">        <span class="keyword">int</span> r = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &gt;= max) &#123;</span><br><span class="line">                max = array[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提前结束</span></span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; -<span class="number">1</span>, -<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从右扫描到左寻找逆序对（正序：逐渐变小）</span></span><br><span class="line">        <span class="keyword">int</span> min = array[array.length - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 用来记录最左的那个逆序对位置</span></span><br><span class="line">        <span class="keyword">int</span> l = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt;= min) &#123;</span><br><span class="line">                min = array[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; l, r &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode-有序数组的平方"><a href="#LeetCode-有序数组的平方" class="headerlink" title="LeetCode 有序数组的平方"></a><a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/" target="_blank" rel="noopener">LeetCode 有序数组的平方</a></h2><p><img src="/2020/07/25/Leetcode_数组_排序/5.png" alt></p><p>反向遍历数组中的负数部分，从前向后遍历数组中的非负数部分，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortedSquares(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = A.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到最后一个负数</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; len &amp;&amp; A[j] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一个正数</span></span><br><span class="line">        <span class="keyword">int</span> i = j - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> [] nA= <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指针 i 反向读取负数部分，指针 j 正向读取非负数部分</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &lt; len)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] * A[i] &lt; A[j] * A[j])&#123;</span><br><span class="line">                nA[t++] = A[i] * A[i];</span><br><span class="line">                i--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nA[t++] = A[j] * A[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 负数还有剩余</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            nA[t++] = A[i] * A[i];</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 非负数还有剩余</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; len)&#123;</span><br><span class="line">            nA[t++] = A[j] * A[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode-合并两个有序数组&quot;&gt;&lt;a href=&quot;#LeetCode-合并两个有序数组&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 合并两个有序数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/pr
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
